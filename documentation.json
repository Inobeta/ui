{
    "pipes": [],
    "interfaces": [
        {
            "name": "GithubApi",
            "id": "interface-GithubApi-d0d7b11752e7ea4dc6b44d36a83b8224a9e3b0c1c8456ff5c32fd19508c454786850f84dba911cfe6daaf4e4ff2c7fc611f5fd26ca0bd534d26497b88724fcda",
            "file": "src/app/examples/kai-table-example/kai-table-api-example.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Injectable, ViewChild } from \"@angular/core\";\nimport { useColumn } from \"src/app/inobeta-ui/ui/kai-table/cells\";\nimport { IbTable } from \"src/app/inobeta-ui/ui/kai-table/table.component\";\nimport { IbSelectionColumn } from \"src/app/inobeta-ui/ui/kai-table/selection-column\";\nimport {\n  IbColumnDef,\n  IbTableDef,\n  IbKaiTableState,\n} from \"src/app/inobeta-ui/ui/kai-table\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { SortDirection } from \"@angular/material/sort\";\nimport { Observable } from \"rxjs\";\nimport { IbDataSource } from \"src/app/inobeta-ui/ui/kai-table/table-data-source\";\nimport { formatDate } from \"@angular/common\";\n\n@Injectable({ providedIn: \"root\" })\nclass GithubService {\n  href = \"https://api.github.com/search/issues\";\n\n  constructor(private _httpClient: HttpClient) {}\n\n  getRepoIssues(\n    sort: string,\n    order: SortDirection,\n    page: number\n  ): Observable<GithubApi> {\n    const requestUrl = `${\n      this.href\n    }?q=repo:angular/components&sort=${sort}&order=${order}&page=${page + 1}`;\n\n    console.log(\"getRepoIssues\", \"sort:\", sort, \"order:\", order, \"page:\", page);\n    return this._httpClient.get<GithubApi>(requestUrl);\n  }\n}\n\n@Component({\n  selector: \"ib-kai-table-api-example\",\n  template: `\n    <div style=\"display: flex; gap: 12px\">\n      <button mat-raised-button (click)=\"refresh()\">refresh</button>\n      <button mat-raised-button color=\"warn\" (click)=\"simulateError()\">\n        simulate error\n      </button>\n      <button mat-raised-button (click)=\"setState('loading')\">\n        set to loading\n      </button>\n      <button mat-raised-button (click)=\"setState('idle')\">set to idle</button>\n    </div>\n    <ib-kai-table\n      #table\n      [dataSource]=\"dataSource\"\n      [columns]=\"columns\"\n      [tableDef]=\"tableDef\"\n    ></ib-kai-table>\n  `,\n  styles: [\n    `\n      :host {\n        display: flex;\n        flex-direction: column;\n        padding: 30px;\n        gap: 3em;\n      }\n\n      ib-kai-table ::ng-deep .ib-table-scrollable {\n        max-height: 500px;\n      }\n\n      ib-kai-table .ib-table {\n        --ib-table-header-cell-color: lightgrey;\n        --ib-table-header-cell-background-color: #309933;\n      }\n    `,\n  ],\n})\nexport class IbKaiTableApiExamplePage {\n  @ViewChild(\"table\", { static: true }) kaiTable: IbTable;\n  @ViewChild(IbSelectionColumn, { static: true })\n  selectionColumn: IbSelectionColumn;\n\n  dataSource = new IbDataSource<GithubIssue>();\n  columns: IbColumnDef[] = [\n    {\n      columnDef: \"created\",\n      header: \"Created\",\n      cell: (e) => `${formatDate(e.created_at, \"d MMM YYYY\", \"it-IT\")}`,\n      sort: true,\n    },\n    useColumn(\"state\"),\n    useColumn(\"#\", \"number\", false),\n    useColumn(\"title\"),\n  ];\n  tableDef: IbTableDef = {\n    paginator: {\n      pageSize: 30,\n      pageSizeOptions: [30],\n    },\n  };\n\n  isRateLimitReached = false;\n  resultsLength = 0;\n\n  constructor(private github: GithubService) {}\n\n  ngOnInit() {\n    this.dataSource.fetchData = this.fetchIssues;\n    this.dataSource.mapData = this.mapData;\n    this.dataSource.updatePaginator = (result: GithubApi) => result.total_count;\n  }\n\n  fetchIssues = (sort: string, order: SortDirection, page: number) =>\n    this.github!.getRepoIssues(sort, order, page);\n\n  mapData = (result: GithubApi) => result.items;\n\n  setState(state: string) {\n    if (state === \"loading\") {\n      return (this.kaiTable.state = IbKaiTableState.LOADING);\n    }\n\n    this.kaiTable.state = IbKaiTableState.IDLE;\n  }\n\n  refresh() {\n    this.dataSource.refresh();\n  }\n\n  simulateError() {\n    this.github.href = \"oops\";\n    this.dataSource.refresh();\n    setTimeout(\n      () => (this.github.href = \"https://api.github.com/search/issues\"),\n      1\n    );\n  }\n}\n\ninterface GithubApi {\n  items: GithubIssue[];\n  total_count: number;\n}\n\ninterface GithubIssue {\n  created_at: string;\n  number: string;\n  state: string;\n  title: string;\n}\n",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GithubIssue[]",
                    "optional": false,
                    "description": "",
                    "line": 139
                },
                {
                    "name": "total_count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 140
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GithubIssue",
            "id": "interface-GithubIssue-d0d7b11752e7ea4dc6b44d36a83b8224a9e3b0c1c8456ff5c32fd19508c454786850f84dba911cfe6daaf4e4ff2c7fc611f5fd26ca0bd534d26497b88724fcda",
            "file": "src/app/examples/kai-table-example/kai-table-api-example.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Injectable, ViewChild } from \"@angular/core\";\nimport { useColumn } from \"src/app/inobeta-ui/ui/kai-table/cells\";\nimport { IbTable } from \"src/app/inobeta-ui/ui/kai-table/table.component\";\nimport { IbSelectionColumn } from \"src/app/inobeta-ui/ui/kai-table/selection-column\";\nimport {\n  IbColumnDef,\n  IbTableDef,\n  IbKaiTableState,\n} from \"src/app/inobeta-ui/ui/kai-table\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { SortDirection } from \"@angular/material/sort\";\nimport { Observable } from \"rxjs\";\nimport { IbDataSource } from \"src/app/inobeta-ui/ui/kai-table/table-data-source\";\nimport { formatDate } from \"@angular/common\";\n\n@Injectable({ providedIn: \"root\" })\nclass GithubService {\n  href = \"https://api.github.com/search/issues\";\n\n  constructor(private _httpClient: HttpClient) {}\n\n  getRepoIssues(\n    sort: string,\n    order: SortDirection,\n    page: number\n  ): Observable<GithubApi> {\n    const requestUrl = `${\n      this.href\n    }?q=repo:angular/components&sort=${sort}&order=${order}&page=${page + 1}`;\n\n    console.log(\"getRepoIssues\", \"sort:\", sort, \"order:\", order, \"page:\", page);\n    return this._httpClient.get<GithubApi>(requestUrl);\n  }\n}\n\n@Component({\n  selector: \"ib-kai-table-api-example\",\n  template: `\n    <div style=\"display: flex; gap: 12px\">\n      <button mat-raised-button (click)=\"refresh()\">refresh</button>\n      <button mat-raised-button color=\"warn\" (click)=\"simulateError()\">\n        simulate error\n      </button>\n      <button mat-raised-button (click)=\"setState('loading')\">\n        set to loading\n      </button>\n      <button mat-raised-button (click)=\"setState('idle')\">set to idle</button>\n    </div>\n    <ib-kai-table\n      #table\n      [dataSource]=\"dataSource\"\n      [columns]=\"columns\"\n      [tableDef]=\"tableDef\"\n    ></ib-kai-table>\n  `,\n  styles: [\n    `\n      :host {\n        display: flex;\n        flex-direction: column;\n        padding: 30px;\n        gap: 3em;\n      }\n\n      ib-kai-table ::ng-deep .ib-table-scrollable {\n        max-height: 500px;\n      }\n\n      ib-kai-table .ib-table {\n        --ib-table-header-cell-color: lightgrey;\n        --ib-table-header-cell-background-color: #309933;\n      }\n    `,\n  ],\n})\nexport class IbKaiTableApiExamplePage {\n  @ViewChild(\"table\", { static: true }) kaiTable: IbTable;\n  @ViewChild(IbSelectionColumn, { static: true })\n  selectionColumn: IbSelectionColumn;\n\n  dataSource = new IbDataSource<GithubIssue>();\n  columns: IbColumnDef[] = [\n    {\n      columnDef: \"created\",\n      header: \"Created\",\n      cell: (e) => `${formatDate(e.created_at, \"d MMM YYYY\", \"it-IT\")}`,\n      sort: true,\n    },\n    useColumn(\"state\"),\n    useColumn(\"#\", \"number\", false),\n    useColumn(\"title\"),\n  ];\n  tableDef: IbTableDef = {\n    paginator: {\n      pageSize: 30,\n      pageSizeOptions: [30],\n    },\n  };\n\n  isRateLimitReached = false;\n  resultsLength = 0;\n\n  constructor(private github: GithubService) {}\n\n  ngOnInit() {\n    this.dataSource.fetchData = this.fetchIssues;\n    this.dataSource.mapData = this.mapData;\n    this.dataSource.updatePaginator = (result: GithubApi) => result.total_count;\n  }\n\n  fetchIssues = (sort: string, order: SortDirection, page: number) =>\n    this.github!.getRepoIssues(sort, order, page);\n\n  mapData = (result: GithubApi) => result.items;\n\n  setState(state: string) {\n    if (state === \"loading\") {\n      return (this.kaiTable.state = IbKaiTableState.LOADING);\n    }\n\n    this.kaiTable.state = IbKaiTableState.IDLE;\n  }\n\n  refresh() {\n    this.dataSource.refresh();\n  }\n\n  simulateError() {\n    this.github.href = \"oops\";\n    this.dataSource.refresh();\n    setTimeout(\n      () => (this.github.href = \"https://api.github.com/search/issues\"),\n      1\n    );\n  }\n}\n\ninterface GithubApi {\n  items: GithubIssue[];\n  total_count: number;\n}\n\ninterface GithubIssue {\n  created_at: string;\n  number: string;\n  state: string;\n  title: string;\n}\n",
            "properties": [
                {
                    "name": "created_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 144
                },
                {
                    "name": "number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 145
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 146
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 147
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IAppState",
            "id": "interface-IAppState-e21dca225b561f4a3e85c5a304f6a5af831c575b4e84fba273a555918d6e69ecdb5c70c6e91c8b0384d96e59fdccef89131bb1ce2f76ae88849dc1a52146c88c",
            "file": "src/app/app.module.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { RoutingModule } from './routing.module';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@Inobeta/flex-layout';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { environment } from '../environments/environment';\nimport { IbTableExampleComponent } from 'src/app/examples/table-example/table-with-redux/table-example.component';\nimport { NavComponent } from './examples/nav/nav.component';\nimport { DynamicFormsExampleComponent } from './examples/dynamic-forms-example/dynamic-forms-example.component';\nimport { ActionReducerMap, StoreModule } from '@ngrx/store';\nimport { IbTableModule } from './inobeta-ui/ui/table/table.module';\nimport { IbDynamicFormsModule } from './inobeta-ui/ui/forms/forms.module';\nimport { IbBreadcrumbModule } from './inobeta-ui/ui/breadcrumb/breadcrumb.module';\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\nimport { HttpClient } from '@angular/common/http';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { IbMaterialFormModule } from './inobeta-ui/ui/material-forms/material-form.module';\nimport { HttpExampleComponent } from './examples/http-example.component';\nimport { MyCounterComponent } from './examples/redux-example/my-counter.component';\nimport { IbHttpModule } from './inobeta-ui/http/http.module';\nimport { ICounterState, counterReducer } from './examples/redux-example/counter.reducer';\nimport { DialogExampleComponent } from './examples/dialog-example/dialog-example.component';\nimport { IbModalModule } from './inobeta-ui/ui/modal';\nimport { MyCustomTextboxComponent } from './examples/dynamic-forms-example/my-custom-textbox.model';\nimport { IbToastExampleComponent } from './examples/toast-example/toast-example.component';\nimport { IbToastModule } from './inobeta-ui/ui/toast/toast.module';\nimport { IbTableExampleNoReduxComponent } from './examples/table-example/table-without-redux/table-example.component';\nimport { ITableFiltersState } from './inobeta-ui/ui/table/redux/table.reducer';\nimport { ISessionState } from './inobeta-ui/http/auth/redux/session.reducer';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { IbTableStickyExampleComponent } from './examples/table-example/table-sticky/table-example.component';\nimport { EffectsModule } from '@ngrx/effects';\nimport { TableEffects } from './inobeta-ui/ui/table/store/effects/table.effects';\nimport { IbMainMenuModule } from './inobeta-ui/ui/main-menu/main-menu.module';\nimport { IbMainMenuExampleComponent } from './examples/main-menu-example/main-menu-example.component';\nimport { ibSetupHydration } from './inobeta-ui/hydration';\nimport { IbKaiTableExamplePage } from './examples/kai-table-example/kai-table-example';\nimport { IbKaiTableContextActionExamplePage } from './examples/kai-table-example/kai-table-context-action-example';\nimport { IbKaiTableFullExamplePage } from './examples/kai-table-example/kai-table-full-example';\nimport { IbKaiTableModule } from './inobeta-ui/ui/kai-table';\nimport { IbKaiTableApiExamplePage } from './examples/kai-table-example/kai-table-api-example';\nimport { IbFilterModule } from './inobeta-ui/ui/kai-filter';\n//import { IbTableViewModule } from './inobeta-ui/ui/kai-table-view/table-view.module';\n\nexport interface IAppState {\n  sessionState?: ISessionState;\n  countState: ICounterState;\n}\n\nconst reducers: ActionReducerMap<IAppState> = {\n  countState: counterReducer\n};\n\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n\nexport const statusErrorMessages = { 404: 'Risorsa non trovata'};\n\n\nconst reduxStorageSave = ibSetupHydration('__redux-store-inobeta-ui__', ['sessionState', 'ibTable', 'lazyLoaded']);\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    IbTableExampleComponent,\n    NavComponent,\n    DynamicFormsExampleComponent,\n    HttpExampleComponent,\n    MyCounterComponent,\n    DialogExampleComponent,\n    MyCustomTextboxComponent,\n    IbToastExampleComponent,\n    IbTableExampleNoReduxComponent,\n    IbTableStickyExampleComponent,\n    IbMainMenuExampleComponent,\n    IbKaiTableExamplePage,\n    IbKaiTableContextActionExamplePage,\n    IbKaiTableFullExamplePage,\n    IbKaiTableApiExamplePage\n  ],\n  imports: [\n    CommonModule,\n    IbTableModule,\n    IbMainMenuModule,\n    IbBreadcrumbModule,\n    IbDynamicFormsModule,\n    IbMaterialFormModule,\n    RoutingModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    FlexLayoutModule,\n    IbHttpModule,\n    IbModalModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n    IbToastModule,\n    MatMenuModule,\n    MatRippleModule,\n    MatButtonModule,\n    MatGridListModule,\n    IbKaiTableModule,\n    IbFilterModule,\n    StoreModule.forRoot(reducers, {\n      metaReducers: reduxStorageSave.metareducers,\n      runtimeChecks: {\n        strictStateImmutability: false,\n        strictActionImmutability: false,\n      },\n    }),\n    EffectsModule.forRoot([TableEffects, ...reduxStorageSave.effects]),\n    StoreDevtoolsModule.instrument({\n      maxAge: 25,\n      logOnly: environment.production,\n      features: {\n        pause: true,\n        lock: true,\n        persist: true\n      },\n    }),\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      }\n    }),\n\n    MatCardModule\n  ],\n  exports: [\n    FlexLayoutModule\n  ],\n  providers: [\n    //{provide: 'ibSessionStorageKey', useValue: '__redux-store-inobeta-ui__'},\n    //{provide: 'ibReduxPersistKeys', useValue: ['sessionState', 'ibTable', 'lazyLoaded']},\n    {provide: 'HttpMode', useValue: 'NORMAL'},\n    {provide: 'ibHttpToastOnStatusCode', useValue: statusErrorMessages },\n    {provide: 'ibHttpToastErrorCode', useValue: 'code' },\n    {provide: 'ibHttpUrlExcludedFromLoader', useValue: [{url: 'http://repubblica.it', method: 'GET'}] }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n",
            "properties": [
                {
                    "name": "countState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICounterState",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "sessionState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISessionState",
                    "optional": true,
                    "description": "",
                    "line": 57
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IbBreadcrumbItem",
            "id": "interface-IbBreadcrumbItem-6dd833b5b14b862dfca72ff3a069ed76af2fd0eb079144a534cdc0ea836159dce8452448b3a5e6f836fd05f28fb42249e9504e09a841f20d621a0af7ed669b25",
            "file": "src/app/inobeta-ui/ui/breadcrumb/breadcrumb.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { Router, ActivatedRoute, NavigationEnd } from '@angular/router';\nimport { filter } from 'rxjs/operators';\n\ninterface IbBreadcrumbItem {\n  label?: string;\n  url?: string;\n  icon?: string;\n}\n\nenum IbBreadcrumbMode {\n  static = 'static',\n  auto = 'auto',\n}\n\n@Component({\n  selector: 'ib-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n})\nexport class IbBreadcrumbComponent implements OnInit {\n  static readonly ROUTE_DATA_BREADCRUMB = 'breadcrumb';\n  /**\n   * Modifica l'icona o label per il primo elemento.\n   */\n  @Input() home: IbBreadcrumbItem = {url: '/', icon: 'home'};\n  @Input() items: IbBreadcrumbItem[] = [];\n  /**\n   * Modalità per il render delle breadcrumbs.\n   * Di default, il percorso viene calcolato dalle routes. Per inserire le singole \"briciole\" usare la modalità `static`\n   */\n  @Input() mode = IbBreadcrumbMode.auto;\n\n  constructor(private router: Router, private activatedRoute: ActivatedRoute) {}\n\n  ngOnInit() {\n    if (this.mode === IbBreadcrumbMode.static) {\n      return;\n    }\n    this.items = this.createBreadcrumbs(this.activatedRoute.root);\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe(() => this.items = this.createBreadcrumbs(this.activatedRoute.root));\n  }\n\n  private createBreadcrumbs(route: ActivatedRoute, url = '', breadcrumbs: IbBreadcrumbItem[] = []) {\n    const children = route.children;\n\n    if (children.length === 0) {\n      return breadcrumbs;\n    }\n\n    for (const child of children) {\n      const routeURL: string = child.snapshot.url.map(segment => segment.path).join('/');\n      if (routeURL !== '') {\n        url += `/${routeURL}`;\n      }\n\n      const label = child.snapshot.data[IbBreadcrumbComponent.ROUTE_DATA_BREADCRUMB];\n      if (label) {\n        breadcrumbs.push({label, url});\n      }\n\n      return this.createBreadcrumbs(child, url, breadcrumbs);\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IbCellData",
            "id": "interface-IbCellData-94e7d29db84b8e80b6f248281d1750437bcc8798336cde4221d139c2945488474a8a59a6c3a931e623d06f010601a783d58843979e645b580b705b41d31d54b1",
            "file": "src/app/inobeta-ui/ui/kai-table/table.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ComponentType } from \"@angular/cdk/portal\";\nimport { MatPaginatorDefaultOptions } from \"@angular/material/paginator\";\nimport { Sort } from \"@angular/material/sort\";\nimport { IbCell } from \"./cells\";\n\nexport interface IbColumnDef<T = any> {\n  /**\n   * Unique name for this column.\n   * Note: if `sort` is true, then this property **must** match the name\n   * of the respective element property.\n   * @example\n   * columnDef: 'author'\n   */\n  columnDef: string;\n  /**\n   * Column name to display.\n   * It also accepts translation ids.\n   * @example\n   * header: 'Author'\n   */\n  header: string;\n  /** If true, enables data sorting for this column. */\n  sort?: boolean;\n  /**\n   * @description\n   * Gets a reference to an element of the data array.\n   * Used as a data accessor, it formats the inner text of the cell.\n   * @example\n   * (book: Book) => `${book.author}`\n   * @param element A row instance\n   * @returns {string}\n   */\n  cell: (element: T) => string | any;\n  /**\n   * @description\n   * Custom cell component.\n   * Accepts any component that extends `IbCell`\n   *\n   * @example\n   * ＠Component({\n   *  selector: 'ib-tag-cell',\n   *  template: '<span>{{column.cell(row)}}<span>',\n   *  styles: [`\n   *    span {\n   *      color: white;\n   *      background-color: peach;\n   *      padding: 2px 10px;\n   *      border-radius: 4px;\n   *  }`]\n   * })\n   * export class MnTagCell extends IbCell { }\n   * // ...\n   * columns = [{\n   *   columnDef: 'author',\n   *   header: 'terms.author',\n   *   cell: (element) => `${element.author}`,\n   *   component: MnTagCell,\n   * }]\n   */\n  component?: ComponentType<IbCell>;\n}\n\nexport interface IbPaginatorOptions extends MatPaginatorDefaultOptions {\n  hide?: boolean;\n}\n\nexport interface IbTableDef {\n  paginator?: IbPaginatorOptions;\n  initialSort?: Sort;\n}\n\nexport interface IbCellData<T = any> {\n  column: IbColumnDef<T>;\n  row: any;\n  send: (event: Partial<IbTableRowEvent>) => void;\n}\n\nexport interface IbTableRowEvent<T = any> {\n  tableName: string;\n  type: string;\n  row: T;\n}\n\nexport interface IbTableRowSelectionChange<T = any> {\n  tableName: string;\n  selection: boolean;\n  row: T;\n}\n\nexport enum IbKaiTableState {\n  IDLE,\n  LOADING,\n  NO_DATA,\n  HTTP_ERROR,\n}\n",
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbColumnDef<T>",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "send",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 75
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IbColumnDef",
            "id": "interface-IbColumnDef-94e7d29db84b8e80b6f248281d1750437bcc8798336cde4221d139c2945488474a8a59a6c3a931e623d06f010601a783d58843979e645b580b705b41d31d54b1",
            "file": "src/app/inobeta-ui/ui/kai-table/table.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ComponentType } from \"@angular/cdk/portal\";\nimport { MatPaginatorDefaultOptions } from \"@angular/material/paginator\";\nimport { Sort } from \"@angular/material/sort\";\nimport { IbCell } from \"./cells\";\n\nexport interface IbColumnDef<T = any> {\n  /**\n   * Unique name for this column.\n   * Note: if `sort` is true, then this property **must** match the name\n   * of the respective element property.\n   * @example\n   * columnDef: 'author'\n   */\n  columnDef: string;\n  /**\n   * Column name to display.\n   * It also accepts translation ids.\n   * @example\n   * header: 'Author'\n   */\n  header: string;\n  /** If true, enables data sorting for this column. */\n  sort?: boolean;\n  /**\n   * @description\n   * Gets a reference to an element of the data array.\n   * Used as a data accessor, it formats the inner text of the cell.\n   * @example\n   * (book: Book) => `${book.author}`\n   * @param element A row instance\n   * @returns {string}\n   */\n  cell: (element: T) => string | any;\n  /**\n   * @description\n   * Custom cell component.\n   * Accepts any component that extends `IbCell`\n   *\n   * @example\n   * ＠Component({\n   *  selector: 'ib-tag-cell',\n   *  template: '<span>{{column.cell(row)}}<span>',\n   *  styles: [`\n   *    span {\n   *      color: white;\n   *      background-color: peach;\n   *      padding: 2px 10px;\n   *      border-radius: 4px;\n   *  }`]\n   * })\n   * export class MnTagCell extends IbCell { }\n   * // ...\n   * columns = [{\n   *   columnDef: 'author',\n   *   header: 'terms.author',\n   *   cell: (element) => `${element.author}`,\n   *   component: MnTagCell,\n   * }]\n   */\n  component?: ComponentType<IbCell>;\n}\n\nexport interface IbPaginatorOptions extends MatPaginatorDefaultOptions {\n  hide?: boolean;\n}\n\nexport interface IbTableDef {\n  paginator?: IbPaginatorOptions;\n  initialSort?: Sort;\n}\n\nexport interface IbCellData<T = any> {\n  column: IbColumnDef<T>;\n  row: any;\n  send: (event: Partial<IbTableRowEvent>) => void;\n}\n\nexport interface IbTableRowEvent<T = any> {\n  tableName: string;\n  type: string;\n  row: T;\n}\n\nexport interface IbTableRowSelectionChange<T = any> {\n  tableName: string;\n  selection: boolean;\n  row: T;\n}\n\nexport enum IbKaiTableState {\n  IDLE,\n  LOADING,\n  NO_DATA,\n  HTTP_ERROR,\n}\n",
            "properties": [
                {
                    "name": "cell",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Gets a reference to an element of the data array.\nUsed as a data accessor, it formats the inner text of the cell.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">(book: Book) =&gt; `${book.author}`</code></pre></div>",
                    "line": 33,
                    "rawdescription": "\n\nGets a reference to an element of the data array.\nUsed as a data accessor, it formats the inner text of the cell.\n```html\n(book: Book) => `${book.author}`\n```",
                    "jsdoctags": [
                        {
                            "pos": 687,
                            "end": 829,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 688,
                                "end": 699,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "description"
                            },
                            "comment": "<p>Gets a reference to an element of the data array.\nUsed as a data accessor, it formats the inner text of the cell.</p>\n"
                        },
                        {
                            "pos": 829,
                            "end": 881,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 830,
                                "end": 837,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": "<p>(book: Book) =&gt; <code>${book.author}</code></p>\n"
                        },
                        {
                            "pos": 881,
                            "end": 916,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 882,
                                "end": 887,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>A row instance</p>\n",
                            "name": {
                                "pos": 888,
                                "end": 895,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "element"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        },
                        {
                            "pos": 916,
                            "end": 937,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 339,
                            "tagName": {
                                "pos": 917,
                                "end": 924,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 925,
                                "end": 933,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 307,
                                "type": {
                                    "pos": 926,
                                    "end": 932,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 149
                                }
                            }
                        }
                    ]
                },
                {
                    "name": "columnDef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Unique name for this column.\nNote: if <code>sort</code> is true, then this property <strong>must</strong> match the name\nof the respective element property.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">columnDef: &#39;author&#39;</code></pre></div>",
                    "line": 14,
                    "rawdescription": "\n\nUnique name for this column.\nNote: if `sort` is true, then this property **must** match the name\nof the respective element property.\n```html\ncolumnDef: 'author'\n```",
                    "jsdoctags": [
                        {
                            "pos": 408,
                            "end": 445,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 409,
                                "end": 416,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": "<p>columnDef: &#39;author&#39;</p>\n"
                        }
                    ]
                },
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentType<IbCell>",
                    "optional": true,
                    "description": "<p>Custom cell component.\nAccepts any component that extends <code>IbCell</code></p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">＠Component({\n selector: &#39;ib-tag-cell&#39;,\n template: &#39;&lt;span&gt;{{column.cell(row)}}&lt;span&gt;&#39;,\n styles: [`\n   span {\n     color: white;\n     background-color: peach;\n     padding: 2px 10px;\n     border-radius: 4px;\n }`]\n})\nexport class MnTagCell extends IbCell { }\n// ...\ncolumns = [{\n  columnDef: &#39;author&#39;,\n  header: &#39;terms.author&#39;,\n  cell: (element) =&gt; `${element.author}`,\n  component: MnTagCell,\n}]</code></pre></div>",
                    "line": 60,
                    "rawdescription": "\n\nCustom cell component.\nAccepts any component that extends `IbCell`\n\n```html\n＠Component({\n selector: 'ib-tag-cell',\n template: '<span>{{column.cell(row)}}<span>',\n styles: [`\n   span {\n     color: white;\n     background-color: peach;\n     padding: 2px 10px;\n     border-radius: 4px;\n }`]\n})\nexport class MnTagCell extends IbCell { }\n// ...\ncolumns = [{\n  columnDef: 'author',\n  header: 'terms.author',\n  cell: (element) => `${element.author}`,\n  component: MnTagCell,\n}]\n```",
                    "jsdoctags": [
                        {
                            "pos": 989,
                            "end": 1089,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 990,
                                "end": 1001,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "description"
                            },
                            "comment": "<p>Custom cell component.\nAccepts any component that extends <code>IbCell</code></p>\n"
                        },
                        {
                            "pos": 1089,
                            "end": 1590,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1090,
                                "end": 1097,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": "<p>＠Component({\n selector: &#39;ib-tag-cell&#39;,\n template: &#39;<span>{{column.cell(row)}}<span>&#39;,\n styles: [<code>    span {      color: white;      background-color: peach;      padding: 2px 10px;      border-radius: 4px;  }</code>]\n})\nexport class MnTagCell extends IbCell { }\n// ...\ncolumns = [{\n  columnDef: &#39;author&#39;,\n  header: &#39;terms.author&#39;,\n  cell: (element) =&gt; <code>${element.author}</code>,\n  component: MnTagCell,\n}]</p>\n"
                        }
                    ]
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Column name to display.\nIt also accepts translation ids.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">header: &#39;Author&#39;</code></pre></div>",
                    "line": 21,
                    "rawdescription": "\n\nColumn name to display.\nIt also accepts translation ids.\n```html\nheader: 'Author'\n```",
                    "jsdoctags": [
                        {
                            "pos": 547,
                            "end": 581,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 548,
                                "end": 555,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": "<p>header: &#39;Author&#39;</p>\n"
                        }
                    ]
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>If true, enables data sorting for this column.</p>\n",
                    "line": 23,
                    "rawdescription": "\nIf true, enables data sorting for this column."
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IbContextAction",
            "id": "interface-IbContextAction-07b3d0b60079370a6cb133bb26f46177038dffd109032f4fd143c5dafdc436b63d10cd18e068cfaa42be48124359676e876a286abe3b85a0154b08cd3d042563",
            "file": "src/app/inobeta-ui/ui/kai-table/cells.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { formatDate, formatNumber } from \"@angular/common\";\nimport { Component, ChangeDetectionStrategy, Inject, Optional } from \"@angular/core\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport { IB_CELL_DATA } from \"./table.component\";\nimport { IbCellData, IbColumnDef } from \"./table.types\";\n\n@Component({\n  selector: 'ib-cell',\n  template: '<div class=\"ib-cell-{{this.column.columnDef}}\">{{column.cell(row)}}</div>',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IbCell {\n  get cell() { return this.data.column.cell(this.data.row) }\n  get column() { return this.data.column }\n  get row() { return this.data.row }\n  get send() { return this.data.send }\n\n  constructor(@Inject(IB_CELL_DATA) @Optional() public data: IbCellData) { }\n}\n\ninterface IbContextAction {\n  /** Unique action type identifier. Used in `IbTableRowEvent.type` */\n  type: string;\n  /** Icon name for the action. Only supports material icons names. */\n  icon?: string;\n}\n\n@Component({\n  selector: 'ib-cell-ctx',\n  template: `<div *ngFor=\"let action of actions\" class=\"action-section ib-action-{{action.type}}\">\n    <button mat-icon-button (click)=\"send({ type: action.type, row: row }); $event.stopPropagation();\">\n      <mat-icon>{{ action?.icon ?? action.type }}</mat-icon>\n    </button>\n</div>`,\n  styles: [`\n  :host {\n    display: flex;\n    gap: 4px;\n    justify-content: flex-end;\n  }\n\n  .button-infos {\n    cursor: pointer;\n    user-select: none;\n  }`],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IbContextActionCell extends IbCell {\n  get actions(): IbContextAction[] { return this.data.column.cell(this.data.row) }\n}\n\n@Component({\n  selector: 'ib-cell-translate',\n  template: `{{text()}}`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IbTranslateCell extends IbCell {\n  text = () => this.translate.instant(this.cell.key, this.cell.params);\n  constructor(\n    @Inject(IB_CELL_DATA) @Optional() public data: IbCellData,\n    public translate: TranslateService) {\n    super(data);\n  }\n}\n\n/**\n *\n * @param {cell} cell - Data accessor. Same as `IbColumnDef.cell`, but returns\n *  an {IbContextAction} array.\n * @returns\n */\nexport const useContextCell = <T>(cell: (e: T) => IbContextAction[]): IbColumnDef => ({\n  component: IbContextActionCell,\n  columnDef: '_ctxActions',\n  header: '',\n  cell,\n})\nexport const useContextColumn = useContextCell;\n\nexport const useColumn = <T>(columnName: string, propertyName?: string, sort?: boolean): IbColumnDef => ({\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => e[propertyName ?? columnName],\n  sort\n});\n\nexport const useDateColumn = <T>(\n  columnName: string,\n  propertyName?: string,\n  sort?: boolean,\n  format: string = 'dd/MM/yyyy HH:mm z',\n  locale: string = 'it'\n): IbColumnDef => ({\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => `${formatDate(e[propertyName ?? columnName], format, locale)}`,\n  sort\n});\n\n\nexport const useNumberColumn = <T>(\n  columnName: string,\n  propertyName?: string,\n  sort?: boolean,\n  format: string = '1.2-2',\n  locale: string = 'it'\n): IbColumnDef => ({\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => `${formatNumber(e[propertyName ?? columnName], locale, format)}`,\n  sort\n});\n\nexport const useTranslateColumn = <T>(\n  columnName: string,\n  propertyName?: string,\n  sort?: boolean,\n  params: any = {},\n): IbColumnDef => ({\n  component: IbTranslateCell,\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => ({ key: e[propertyName ?? columnName], params }),\n  sort\n});\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Icon name for the action. Only supports material icons names.</p>\n",
                    "line": 25,
                    "rawdescription": "\nIcon name for the action. Only supports material icons names."
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Unique action type identifier. Used in <code>IbTableRowEvent.type</code></p>\n",
                    "line": 23,
                    "rawdescription": "\nUnique action type identifier. Used in `IbTableRowEvent.type`"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IbDropdownData",
            "id": "interface-IbDropdownData-e813c2e7331c0e5fe2fe0af27c33b5dc455c41412c2511d5540ba066e898d8f33274d753dfc39cba954ea819e442370c13faad765402d4407f2644d9cbe4b6e1",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/dropdown.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IbFormControlInterface, IbFormControlBase, IbFormControlBaseComponent, IbFormControlBaseParams, IbFormControlData } from '../../forms/controls/form-control-base';\n\n@Component({\n  selector: '[ib-mat-dropdown]',\n  template: `\n    <mat-form-field appearance=\"fill\" style=\"width: 100%;\"  [formGroup]=\"data.form\">\n      <mat-label>{{data.base.label | translate}}</mat-label>\n      <mat-select\n        [formControlName]=\"data.base.key\"\n        [multiple]=\"data.base.multiple\"\n        (selectionChange)=\"handleSelection($event)\"\n      >\n        <mat-option\n          *ngIf=\"data.base.multiple\"\n          class=\"ib-mat-dropdown-select-all\"\n          disabled\n          (click)=\"selectAll()\"\n        >{{ (this.all ? 'shared.ibDropdown.selectNone' : 'shared.ibDropdown.selectAll') | translate}}</mat-option>\n        <mat-option *ngIf=\"data.base.emptyRow\" [value]=\"data.base.emptyRow.key\">\n          {{data.base.emptyRow.value | translate}}\n        </mat-option>\n        <mat-option *ngFor=\"let opt of data.base.options\" [value]=\"opt.key\">\n          {{opt.value | translate}}\n        </mat-option>\n      </mat-select>\n      <mat-icon\n        matSuffix\n        *ngIf=\"hintMessage\"\n        [matTooltip]=\"hintMessage | translate\"\n      >\n          help_outline\n      </mat-icon>\n      <mat-error>\n        <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n      </mat-error>\n    </mat-form-field>\n\n\n    <!-- TODO: example style with inline search\nhttps://stackblitz.com/edit/angular-ev8r2t?file=src%2Fapp%2Fselect-multiple-example.html\n      <mat-option class=\"select-all\">\n        <input type=\"text\" matInput (click)=\"$event.stopPropagation()\"/>\n      </mat-option>\n      <mat-option class=\"select-all\" (click)=\"selectAll()\">{{ this.all ? 'none' : 'all'}}</mat-option>\n      <div style=\"overflow:auto;height:160px;\">\n      <mat-option *ngFor=\"let t of toppingList\" [value]=\"t.key\">{{t.value}}</mat-option>\n      </div>\n-->\n  `,\n  styles: [`\n      .ib-mat-dropdown-select-all ::ng-deep mat-pseudo-checkbox {\n        display: none;\n      }\n\n      /* TODO(mdc-migration): The following rule targets internal classes of option that may no longer apply for the MDC version. */\n      .ib-mat-dropdown-select-all ::ng-deep .mat-option-text {\n        color: rgba(0, 0, 0, 0.87) !important;\n        cursor: pointer !important;\n      }\n  `]\n})\n\nexport class IbMatDropdownComponent implements IbFormControlInterface {\n  @Input() data: IbDropdownData;\n  all = false;\n  get hintMessage() {\n    return (this.data.base.hintMessage) ? this.data.base.hintMessage() : null;\n  }\n\n  selectAll() {\n    let newValues: any = [];\n    this.all = !this.all;\n    if (this.all) {\n      newValues = this.data.base.options.map(t => t.key);\n    }\n    this.data.self.setValue(newValues);\n    this.data.base.change(this.data.self);\n  }\n\n\n\n  handleSelection(who) {\n    if (this.data.base.multiple) {\n      //if (who.value.length > 0 && who.value[0] === undefined) { return; }\n      const currentValue = this.data.self.value;\n      this.all = currentValue && currentValue.length === this.data.base.options.length;\n    }\n\n    this.data.base.change(this.data.self);\n  }\n\n}\n\n\nexport class IbMatDropdownControl extends IbFormControlBase<string | string[] | number | number[]> {\n  multiple = false;\n  emptyRow = null;\n  hintMessage;\n  constructor(options: IbMatDropdownParams) {\n    super(options);\n    this.multiple = options.multiple || false;\n    this.emptyRow = options.emptyRow || null;\n    this.hintMessage = options.hintMessage || null;\n    this.control = new IbFormControlBaseComponent(IbMatDropdownComponent, {\n      base: this\n    });\n  }\n}\n\n\n\nexport interface IbMatDropdownParams extends IbFormControlBaseParams<string | string[] | number | number[]> {\n  multiple?: boolean;\n  emptyRow?: {key?: string | number, value: string};\n  hintMessage?: () => string;\n}\n\n\nexport interface IbDropdownData extends IbFormControlData {\n  base: IbMatDropdownParams;\n}\n",
            "properties": [
                {
                    "name": "base",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbMatDropdownParams",
                    "optional": false,
                    "description": "",
                    "line": 121
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IbFormControlData"
        },
        {
            "name": "IbFilterDef",
            "id": "interface-IbFilterDef-3a6bd8c494e021566d087ca1c12a56802d80581b62058f8035604d50e6fcc4d278546e1a1c66a73e09f401f7f7c7b05c1bd9e99c09b2a15ea1cf9da8c2aa1a6d",
            "file": "src/app/inobeta-ui/ui/kai-filter/filter.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum IbFilterOperator {\n  NONE,\n  EQUALS,\n  NOT_EQUALS,\n  LESS_THAN,\n  LESS_THAN_EQUALS,\n  GREATHER_THAN,\n  GREATHER_THAN_EQUALS,\n  CONTAINS,\n  NOT_CONTAINS,\n  STARTS_WITH,\n  ENDS_WITH,\n  AND,\n  OR,\n}\n\nexport interface IbFilterDef {\n  operator: IbFilterOperator;\n  value: IbFilterDef[] | string | number;\n}\n\nexport interface IbFilterSyntax {\n  [key: string]: IbFilterDef;\n}\n",
            "properties": [
                {
                    "name": "operator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFilterOperator",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFilterDef[] | string | number",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IbFilterSyntax",
            "id": "interface-IbFilterSyntax-3a6bd8c494e021566d087ca1c12a56802d80581b62058f8035604d50e6fcc4d278546e1a1c66a73e09f401f7f7c7b05c1bd9e99c09b2a15ea1cf9da8c2aa1a6d",
            "file": "src/app/inobeta-ui/ui/kai-filter/filter.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum IbFilterOperator {\n  NONE,\n  EQUALS,\n  NOT_EQUALS,\n  LESS_THAN,\n  LESS_THAN_EQUALS,\n  GREATHER_THAN,\n  GREATHER_THAN_EQUALS,\n  CONTAINS,\n  NOT_CONTAINS,\n  STARTS_WITH,\n  ENDS_WITH,\n  AND,\n  OR,\n}\n\nexport interface IbFilterDef {\n  operator: IbFilterOperator;\n  value: IbFilterDef[] | string | number;\n}\n\nexport interface IbFilterSyntax {\n  [key: string]: IbFilterDef;\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-3a6bd8c494e021566d087ca1c12a56802d80581b62058f8035604d50e6fcc4d278546e1a1c66a73e09f401f7f7c7b05c1bd9e99c09b2a15ea1cf9da8c2aa1a6d",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "IbFilterDef",
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": []
        },
        {
            "name": "IbFormAction",
            "id": "interface-IbFormAction-af6d90b26a2012701fb52b83bbabab9428d11e92cf95f3843e5766740379d27a12bd186b8a75933d4bd80546d38d8447caa721a19b95d57f3882d82c08da9806",
            "file": "src/app/inobeta-ui/ui/forms/dynamic-form/dynamic-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';\nimport { IbFormControlBase } from '../controls/form-control-base';\nimport { UntypedFormGroup } from '@angular/forms';\nimport { IbFormControlService } from '../form-control.service';\nimport { Observable, Subject } from 'rxjs';\n\nexport interface IbFormAction {\n  key?: string;\n  label: string;\n  handler?: (form: UntypedFormGroup) => void;\n  options?: any;\n  requireConfirmOnDirty?: boolean;\n}\n\ninterface IbFormOnChanges {\n  changes: SimpleChanges;\n  form: UntypedFormGroup;\n}\n\n@Component({\n  selector: 'ib-form',\n  templateUrl: './dynamic-form.component.html',\n})\nexport class IbDynamicFormComponent implements OnInit, OnChanges, OnDestroy {\n  @Input() fields: IbFormControlBase<string>[] = [];\n  @Input() actions: IbFormAction[] = [\n    { key: 'submit', label: 'Save' }\n  ];\n  @Input() cols: number;\n  /**\n   * @deprecated\n   * this input will be removed in a future release.\n   * Utilizzare una subscription ad `afterInit()` per eseguire codice immediatamente dopo aver\n   * inizializzato il `FormGroup` (come `form.disable()`)\n   */\n  @Input() disabledOnInit = false;\n  @Output() ibSubmit = new EventEmitter<any>();\n  form: UntypedFormGroup;\n\n  private readonly onInitSubject = new Subject<UntypedFormGroup>();\n\n  private readonly onChangesSubject = new Subject<IbFormOnChanges>();\n\n  constructor(private cs: IbFormControlService) {}\n\n  ngOnInit() {\n    this.form = this.cs.toFormGroup(this.fields);\n    this.onInitSubject.next(this.form);\n    if (this.disabledOnInit) {\n      this.form.disable();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const fields = changes.fields;\n    if (fields && !fields.isFirstChange()) {\n      this.form = this.cs.toFormGroup(fields.currentValue);\n    }\n    for (const prop of Object.values(changes)) {\n      if (!prop.isFirstChange()) {\n        this.onChangesSubject.next({changes, form: this.form});\n        break;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.onInitSubject.unsubscribe();\n    this.onChangesSubject.unsubscribe();\n  }\n\n  onSubmit() {\n    this.ibSubmit.emit(this.form.getRawValue());\n  }\n\n  handleActionClick(source: IbFormAction) {\n    if (source.key === 'submit') {\n      return;\n    }\n    source.handler(this.form);\n  }\n\n  afterInit(): Observable<UntypedFormGroup> {\n    return this.onInitSubject;\n  }\n\n  afterChanges(): Observable<IbFormOnChanges> {\n    return this.onChangesSubject;\n  }\n}\n",
            "properties": [
                {
                    "name": "handler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "requireConfirmOnDirty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IbFormControlBaseParams",
            "id": "interface-IbFormControlBaseParams-7ae5904db3cd9462db3d6b357a0f7599efc7d7faf90a391b06076d28772d35cbb8f157114d418061e7878dced08daeb90974cf3da2e597ce523235f688e0ce15",
            "file": "src/app/inobeta-ui/ui/forms/controls/form-control-base.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { UntypedFormControl, ValidatorFn, Form, UntypedFormGroup, Validators } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { TemplateRef, Type } from '@angular/core';\n\nexport class IbFormControlBase<T> {\n  public value: T;\n  public disabled: boolean;\n  public key: string;\n  public label: string;\n  public required: boolean;\n  public order: number;\n  public controlType: string;\n  public type: string;\n  public validators: ValidatorFn[];\n  public options: {key?: string | number, value: string}[];\n  public change: (c: UntypedFormControl) => void;\n  public width: string;\n  public control: IbFormControlBaseComponent;\n  public cols: number;\n  public rows: number;\n  public debounceOnChange: number;\n\n  constructor(options: IbFormControlBaseParams<T> = {}) {\n\n    this.value = options.value;\n    this.disabled = options.disabled || false;\n    this.key = options.key || '';\n    this.label = options.label || '';\n    this.validators = options.validators || [];\n    this.required = !!options.required;\n    if(this.validators.indexOf(Validators.required) >= 0){\n      this.required = true;\n    }\n    this.order = options.order === undefined ? 1 : options.order;\n    this.controlType = options.controlType || '';\n    this.type = options.type || '';\n    this.options = options.options || [];\n    this.width = options.width || '';\n    this.control = options.control || null;\n    this.cols = options.cols || 1;\n    this.rows = options.rows || 1;\n    this.debounceOnChange = (options.debounceOnChange >= 0) ? options.debounceOnChange : 0;\n    this.setupChangeEvent(options);\n  }\n\n\n  private setupChangeEvent(options) {\n\n    let previousValue = this.value;\n    const changeSubject = new Subject();\n    this.change = (c: UntypedFormControl) => {\n      if (options.change && c.value !== previousValue) { changeSubject.next(c); }\n    };\n    changeSubject.pipe(\n      debounceTime(this.debounceOnChange)\n    ).subscribe((control: UntypedFormControl) => {\n      previousValue = control.value;\n      options.change(control);\n    });\n\n  }\n\n}\n\nexport interface IbFormControlBaseParams<T> {\n  value?: T;\n  disabled?: boolean;\n  key?: string;\n  label?: string;\n  required?: boolean;\n  order?: number;\n  controlType?: string;\n  type?: string;\n  validators?: ValidatorFn[];\n  options?: {key?: string | number, value: string}[];\n  change?: (c: UntypedFormControl) => void;\n  width?: string;\n  control?: IbFormControlBaseComponent;\n  cols?: number;\n  rows?: number;\n  debounceOnChange?: number;\n}\n\nexport interface IbFormControlInterface {\n  data: IbFormControlData;\n}\n\n\nexport class IbFormControlBaseComponent {\n  constructor(public component: Type<any>, public data: IbFormControlData) {}\n}\n\nexport interface IbFormControlData {\n  base: IbFormControlBaseParams<any>;\n  self?: UntypedFormControl;\n  form?: UntypedFormGroup;\n  hasError?: (errorCode: string) => boolean;\n  formControlErrors?: TemplateRef<any>;\n}\n",
            "properties": [
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlBaseComponent",
                    "optional": true,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "debounceOnChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": true,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn[]",
                    "optional": true,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 78
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IbFormControlData",
            "id": "interface-IbFormControlData-7ae5904db3cd9462db3d6b357a0f7599efc7d7faf90a391b06076d28772d35cbb8f157114d418061e7878dced08daeb90974cf3da2e597ce523235f688e0ce15",
            "file": "src/app/inobeta-ui/ui/forms/controls/form-control-base.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { UntypedFormControl, ValidatorFn, Form, UntypedFormGroup, Validators } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { TemplateRef, Type } from '@angular/core';\n\nexport class IbFormControlBase<T> {\n  public value: T;\n  public disabled: boolean;\n  public key: string;\n  public label: string;\n  public required: boolean;\n  public order: number;\n  public controlType: string;\n  public type: string;\n  public validators: ValidatorFn[];\n  public options: {key?: string | number, value: string}[];\n  public change: (c: UntypedFormControl) => void;\n  public width: string;\n  public control: IbFormControlBaseComponent;\n  public cols: number;\n  public rows: number;\n  public debounceOnChange: number;\n\n  constructor(options: IbFormControlBaseParams<T> = {}) {\n\n    this.value = options.value;\n    this.disabled = options.disabled || false;\n    this.key = options.key || '';\n    this.label = options.label || '';\n    this.validators = options.validators || [];\n    this.required = !!options.required;\n    if(this.validators.indexOf(Validators.required) >= 0){\n      this.required = true;\n    }\n    this.order = options.order === undefined ? 1 : options.order;\n    this.controlType = options.controlType || '';\n    this.type = options.type || '';\n    this.options = options.options || [];\n    this.width = options.width || '';\n    this.control = options.control || null;\n    this.cols = options.cols || 1;\n    this.rows = options.rows || 1;\n    this.debounceOnChange = (options.debounceOnChange >= 0) ? options.debounceOnChange : 0;\n    this.setupChangeEvent(options);\n  }\n\n\n  private setupChangeEvent(options) {\n\n    let previousValue = this.value;\n    const changeSubject = new Subject();\n    this.change = (c: UntypedFormControl) => {\n      if (options.change && c.value !== previousValue) { changeSubject.next(c); }\n    };\n    changeSubject.pipe(\n      debounceTime(this.debounceOnChange)\n    ).subscribe((control: UntypedFormControl) => {\n      previousValue = control.value;\n      options.change(control);\n    });\n\n  }\n\n}\n\nexport interface IbFormControlBaseParams<T> {\n  value?: T;\n  disabled?: boolean;\n  key?: string;\n  label?: string;\n  required?: boolean;\n  order?: number;\n  controlType?: string;\n  type?: string;\n  validators?: ValidatorFn[];\n  options?: {key?: string | number, value: string}[];\n  change?: (c: UntypedFormControl) => void;\n  width?: string;\n  control?: IbFormControlBaseComponent;\n  cols?: number;\n  rows?: number;\n  debounceOnChange?: number;\n}\n\nexport interface IbFormControlInterface {\n  data: IbFormControlData;\n}\n\n\nexport class IbFormControlBaseComponent {\n  constructor(public component: Type<any>, public data: IbFormControlData) {}\n}\n\nexport interface IbFormControlData {\n  base: IbFormControlBaseParams<any>;\n  self?: UntypedFormControl;\n  form?: UntypedFormGroup;\n  hasError?: (errorCode: string) => boolean;\n  formControlErrors?: TemplateRef<any>;\n}\n",
            "properties": [
                {
                    "name": "base",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlBaseParams<any>",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UntypedFormGroup",
                    "optional": true,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "formControlErrors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": true,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "hasError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "self",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UntypedFormControl",
                    "optional": true,
                    "description": "",
                    "line": 96
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IbFormControlInterface",
            "id": "interface-IbFormControlInterface-7ae5904db3cd9462db3d6b357a0f7599efc7d7faf90a391b06076d28772d35cbb8f157114d418061e7878dced08daeb90974cf3da2e597ce523235f688e0ce15",
            "file": "src/app/inobeta-ui/ui/forms/controls/form-control-base.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { UntypedFormControl, ValidatorFn, Form, UntypedFormGroup, Validators } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { TemplateRef, Type } from '@angular/core';\n\nexport class IbFormControlBase<T> {\n  public value: T;\n  public disabled: boolean;\n  public key: string;\n  public label: string;\n  public required: boolean;\n  public order: number;\n  public controlType: string;\n  public type: string;\n  public validators: ValidatorFn[];\n  public options: {key?: string | number, value: string}[];\n  public change: (c: UntypedFormControl) => void;\n  public width: string;\n  public control: IbFormControlBaseComponent;\n  public cols: number;\n  public rows: number;\n  public debounceOnChange: number;\n\n  constructor(options: IbFormControlBaseParams<T> = {}) {\n\n    this.value = options.value;\n    this.disabled = options.disabled || false;\n    this.key = options.key || '';\n    this.label = options.label || '';\n    this.validators = options.validators || [];\n    this.required = !!options.required;\n    if(this.validators.indexOf(Validators.required) >= 0){\n      this.required = true;\n    }\n    this.order = options.order === undefined ? 1 : options.order;\n    this.controlType = options.controlType || '';\n    this.type = options.type || '';\n    this.options = options.options || [];\n    this.width = options.width || '';\n    this.control = options.control || null;\n    this.cols = options.cols || 1;\n    this.rows = options.rows || 1;\n    this.debounceOnChange = (options.debounceOnChange >= 0) ? options.debounceOnChange : 0;\n    this.setupChangeEvent(options);\n  }\n\n\n  private setupChangeEvent(options) {\n\n    let previousValue = this.value;\n    const changeSubject = new Subject();\n    this.change = (c: UntypedFormControl) => {\n      if (options.change && c.value !== previousValue) { changeSubject.next(c); }\n    };\n    changeSubject.pipe(\n      debounceTime(this.debounceOnChange)\n    ).subscribe((control: UntypedFormControl) => {\n      previousValue = control.value;\n      options.change(control);\n    });\n\n  }\n\n}\n\nexport interface IbFormControlBaseParams<T> {\n  value?: T;\n  disabled?: boolean;\n  key?: string;\n  label?: string;\n  required?: boolean;\n  order?: number;\n  controlType?: string;\n  type?: string;\n  validators?: ValidatorFn[];\n  options?: {key?: string | number, value: string}[];\n  change?: (c: UntypedFormControl) => void;\n  width?: string;\n  control?: IbFormControlBaseComponent;\n  cols?: number;\n  rows?: number;\n  debounceOnChange?: number;\n}\n\nexport interface IbFormControlInterface {\n  data: IbFormControlData;\n}\n\n\nexport class IbFormControlBaseComponent {\n  constructor(public component: Type<any>, public data: IbFormControlData) {}\n}\n\nexport interface IbFormControlData {\n  base: IbFormControlBaseParams<any>;\n  self?: UntypedFormControl;\n  form?: UntypedFormGroup;\n  hasError?: (errorCode: string) => boolean;\n  formControlErrors?: TemplateRef<any>;\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlData",
                    "optional": false,
                    "description": "",
                    "line": 86
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IbFormOnChanges",
            "id": "interface-IbFormOnChanges-af6d90b26a2012701fb52b83bbabab9428d11e92cf95f3843e5766740379d27a12bd186b8a75933d4bd80546d38d8447caa721a19b95d57f3882d82c08da9806",
            "file": "src/app/inobeta-ui/ui/forms/dynamic-form/dynamic-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';\nimport { IbFormControlBase } from '../controls/form-control-base';\nimport { UntypedFormGroup } from '@angular/forms';\nimport { IbFormControlService } from '../form-control.service';\nimport { Observable, Subject } from 'rxjs';\n\nexport interface IbFormAction {\n  key?: string;\n  label: string;\n  handler?: (form: UntypedFormGroup) => void;\n  options?: any;\n  requireConfirmOnDirty?: boolean;\n}\n\ninterface IbFormOnChanges {\n  changes: SimpleChanges;\n  form: UntypedFormGroup;\n}\n\n@Component({\n  selector: 'ib-form',\n  templateUrl: './dynamic-form.component.html',\n})\nexport class IbDynamicFormComponent implements OnInit, OnChanges, OnDestroy {\n  @Input() fields: IbFormControlBase<string>[] = [];\n  @Input() actions: IbFormAction[] = [\n    { key: 'submit', label: 'Save' }\n  ];\n  @Input() cols: number;\n  /**\n   * @deprecated\n   * this input will be removed in a future release.\n   * Utilizzare una subscription ad `afterInit()` per eseguire codice immediatamente dopo aver\n   * inizializzato il `FormGroup` (come `form.disable()`)\n   */\n  @Input() disabledOnInit = false;\n  @Output() ibSubmit = new EventEmitter<any>();\n  form: UntypedFormGroup;\n\n  private readonly onInitSubject = new Subject<UntypedFormGroup>();\n\n  private readonly onChangesSubject = new Subject<IbFormOnChanges>();\n\n  constructor(private cs: IbFormControlService) {}\n\n  ngOnInit() {\n    this.form = this.cs.toFormGroup(this.fields);\n    this.onInitSubject.next(this.form);\n    if (this.disabledOnInit) {\n      this.form.disable();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const fields = changes.fields;\n    if (fields && !fields.isFirstChange()) {\n      this.form = this.cs.toFormGroup(fields.currentValue);\n    }\n    for (const prop of Object.values(changes)) {\n      if (!prop.isFirstChange()) {\n        this.onChangesSubject.next({changes, form: this.form});\n        break;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.onInitSubject.unsubscribe();\n    this.onChangesSubject.unsubscribe();\n  }\n\n  onSubmit() {\n    this.ibSubmit.emit(this.form.getRawValue());\n  }\n\n  handleActionClick(source: IbFormAction) {\n    if (source.key === 'submit') {\n      return;\n    }\n    source.handler(this.form);\n  }\n\n  afterInit(): Observable<UntypedFormGroup> {\n    return this.onInitSubject;\n  }\n\n  afterChanges(): Observable<IbFormOnChanges> {\n    return this.onChangesSubject;\n  }\n}\n",
            "properties": [
                {
                    "name": "changes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SimpleChanges",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UntypedFormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IbHttpRequestDefinition",
            "id": "interface-IbHttpRequestDefinition-5c77c882915a7c1450d9067c7dc27d687d5b0c671ee1d11addb6691b52a989fdbb1638eac4aa474555db0ad7418252d9471902886b1e4198f8131e9b83a9d2c9",
            "file": "src/app/inobeta-ui/http/http/http-client.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, Inject, Optional} from '@angular/core';\nimport {IbResponseHandlerService} from './response-handler.service';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {catchError, finalize, map, tap} from 'rxjs/operators';\nimport {IbAuthService} from '../auth/auth.service';\nimport {IbAuthTypes} from '../auth/session.model';\nimport { from } from 'rxjs';\n\n/*\n  HttpClient with Bearer authentication\n */\n@Injectable({providedIn: 'root'})\nexport class IbHttpClientService {\n\n  public pendingRequests = 0;\n  public showLoading = false;\n  public authType = IbAuthTypes.JWT; // FIXME: this should be private\n  public additionalHeaders: any[] = [];\n\n  /**\n   * @deprecated Mobile version deprecated, please delete this param\n   */\n  public httpMode = 'NORMAL'; // FIXME: this should be private\n\n  constructor(\n    public h: HttpClient,\n    private srvAuth: IbAuthService,\n    private srvResponse: IbResponseHandlerService,\n    /**\n     * @deprecated Mobile version deprecated, please delete this param\n     */\n    @Inject('HttpMode') @Optional() public HttpMode?: string,\n    /**\n     * @deprecated Mobile version deprecated, please delete this param\n     */\n    @Inject('hMobile') @Optional() public hMobile?: any,\n    @Inject('ibHttpUrlExcludedFromLoader') @Optional() public ibHttpUrlExcludedFromLoader?: IbHttpRequestDefinition[],\n    ) {\n      this.httpMode = HttpMode || 'NORMAL';\n      if(this.httpMode !== 'NORMAL') {\n        console.warn('[deprecated] IbHttp Mobile support will be removed');\n      }\n      this.ibHttpUrlExcludedFromLoader = this.ibHttpUrlExcludedFromLoader || [];\n  }\n\n  public setAuthtype(type: IbAuthTypes) {\n    this.authType = type;\n  }\n\n  /*public setAdditionalHeaders(headers: any[] = []) {}*/\n\n  createAuthorizationHeader(req: IbHttpRequestDefinition = { url: null, method: null }) {\n    this.turnOnModal(!this.ibHttpUrlExcludedFromLoader\n                          .find(u => u.url.toUpperCase() === req.url.toUpperCase() && u.method.toUpperCase() === req.method.toUpperCase())\n    );\n    let head = (new HttpHeaders())\n      .set('Content-Type', 'application/json')\n      .set('x-requested-with', 'XMLHttpRequest');\n\n    if (this.additionalHeaders.length) {\n      for (const elem of this.additionalHeaders) {\n        head = head.set(elem.key, elem.value);\n      }\n    }\n    if (!this.srvAuth.activeSession) {\n      return head;\n    }\n    switch (this.httpMode) {\n      case 'MOBILE':\n        const mobileHeaders = {};\n        mobileHeaders['Content-Type'] = 'application/json';\n        mobileHeaders['x-requested-with'] = 'XMLHttpRequest';\n        if (this.authType === IbAuthTypes.BASIC_AUTH) {\n          mobileHeaders['Authorization'] = 'Basic ' + this.srvAuth.activeSession.authToken;\n        } else if (this.authType === IbAuthTypes.JWT) {\n          mobileHeaders['Authorization'] = 'Bearer ' + this.srvAuth.activeSession.authToken;\n        } else {\n          if (this.additionalHeaders.length) {\n            for (const elem of this.additionalHeaders) {\n              mobileHeaders[elem.key] = elem.value;\n            }\n          }\n        }\n        return mobileHeaders;\n      default:\n        if (this.authType === IbAuthTypes.BASIC_AUTH) {\n          return head.set('Authorization', 'Basic ' + this.srvAuth.activeSession.authToken);\n        } else if (this.authType === IbAuthTypes.JWT) {\n          return head.set('Authorization', 'Bearer ' + this.srvAuth.activeSession.authToken);\n        }\n        return head;\n    }\n  }\n\n  get(url, data = null, options = null): any {\n    const headers = this.createAuthorizationHeader({ url, method: 'GET' });\n    return this.getObservableFromMode('get', url, data, headers, options)\n      .pipe(\n        map(val => {\n          if (this.httpMode === 'MOBILE') {\n            return (val['data']) ? JSON.parse(val['data']) : '';\n          }\n          return val;\n        }),\n        map(x => this.srvResponse.handleOK(x)),\n        catchError(x => this.srvResponse.handleKO(x)),\n        finalize(() => this.turnOffModal()),\n        tap(x => x, err => this.srvResponse.displayErrors(err))\n      );\n\n  }\n\n  post(url, data = null, options = null): any {\n    const headers = this.createAuthorizationHeader({ url, method: 'POST' });\n    return this.getObservableFromMode('post', url, data, headers, options)\n      .pipe(\n        map(val => {\n          if (this.httpMode === 'MOBILE') {\n            return (val['data']) ? JSON.parse(val['data']) : '';\n          }\n          return val;\n        }),\n        map(x => this.srvResponse.handleOK(x)),\n        catchError(x => this.srvResponse.handleKO(x)),\n        finalize(() => this.turnOffModal()),\n        tap(x => x, err => this.srvResponse.displayErrors(err))\n      );\n  }\n\n  put(url, data = null, options = null): any {\n    const headers = this.createAuthorizationHeader({ url, method: 'PUT' });\n    return this.getObservableFromMode('put', url, data, headers, options)\n      .pipe(\n        map(val => {\n          if (this.httpMode === 'MOBILE') {\n            return (val['data']) ? JSON.parse(val['data']) : '';\n          }\n          return val;\n        }),\n        map(x => this.srvResponse.handleOK(x)),\n        catchError(x => this.srvResponse.handleKO(x)),\n        finalize(() => this.turnOffModal()),\n        tap(x => x, err => this.srvResponse.displayErrors(err))\n      );\n  }\n\n  patch(url, data = null, options = null): any {\n    const headers = this.createAuthorizationHeader({ url, method: 'PATCH' });\n    return this.getObservableFromMode('patch', url, data, headers, options)\n      .pipe(\n        map(val => {\n          if (this.httpMode === 'MOBILE') {\n            return (val['data']) ? JSON.parse(val['data']) : '';\n          }\n          return val;\n        }),\n        map(x => this.srvResponse.handleOK(x)),\n        catchError(x => this.srvResponse.handleKO(x)),\n        finalize(() => this.turnOffModal()),\n        tap(x => x, err => this.srvResponse.displayErrors(err))\n      );\n  }\n\n  delete(url, data = null, options = null): any {\n    const headers = this.createAuthorizationHeader({ url, method: 'DELETE' });\n    return this.getObservableFromMode('delete', url, data, headers, options)\n      .pipe(\n        map(val => {\n          if (this.httpMode === 'MOBILE') {\n            return (val['data']) ? JSON.parse(val['data']) : '';\n          }\n          return val;\n        }),\n        map(x => this.srvResponse.handleOK(x)),\n        catchError(x => this.srvResponse.handleKO(x)),\n        finalize(() => this.turnOffModal()),\n        tap(x => x, err => this.srvResponse.displayErrors(err))\n      );\n  }\n\n  private getObservableFromMode(method, url, data, headers, options) {\n    let obs = null;\n    switch (this.httpMode) {\n      case 'MOBILE':\n        switch (method) {\n          case 'get': obs = from(this.hMobile.get(url, data, headers)); break;\n          case 'post': obs = from(this.hMobile.post(url, data, headers)); break;\n          case 'put': obs = from(this.hMobile.put(url, data, headers)); break;\n          case 'delete': obs = from(this.hMobile.delete(url, null, headers)); break;\n        }\n        break;\n      default:\n        switch (method) {\n          case 'get': obs = this.h.get(url, {headers, ...options, params: data }); break;\n          case 'post': obs = this.h.post(url, data, {headers, ...options}); break;\n          case 'put': obs = this.h.put(url, data, {headers, ...options}); break;\n          case 'patch': obs = this.h.patch(url, data, {headers, ...options}); break;\n          case 'delete': obs = this.h.delete(url, {headers, ...options}); break;\n        }\n    }\n    return obs;\n  }\n\n\n\n  public turnOnModal(enableLoader = true) {\n    if (this.pendingRequests === 0) {\n      this.showLoading = enableLoader;\n    }\n    this.pendingRequests += 1;\n  }\n\n  public turnOffModal() {\n    this.pendingRequests -= 1;\n    if (this.pendingRequests <= 0) {\n      this.showLoading = false;\n    }\n  }\n}\n\n\nexport interface IbHttpRequestDefinition {\n  url: string;\n  method: string;\n}\n\n",
            "properties": [
                {
                    "name": "method",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 224
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 223
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IbMainMenuButton",
            "id": "interface-IbMainMenuButton-9e0bee795e25e2a4db11ef14e3b8855373aed539b9e5d879e4a7756bccb75700a2d60d888551cde9beda95f85a9c8ab9d36d1656fb54aec2ee8d2248949fbf89",
            "file": "src/app/inobeta-ui/ui/main-menu/models/main-menu-button.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IbMainMenuButton {\n  label: string,\n  icon?: { label: string, type?: string },\n  link?: string\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IbMainMenuData",
            "id": "interface-IbMainMenuData-0e098308da13098610c05d0326869aac03b0d5b31a69affbbf890e5e1c1d9bc44bacdbc89e523bcc9c43b5f7dbc0722a60758f37bb87cb9702127f7dac40b6aa",
            "file": "src/app/inobeta-ui/ui/main-menu/models/main-menu-data.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IbMainMenuButton } from \"./main-menu-button.model\";\n\nexport interface IbMainMenuData extends IbMainMenuButton {\n  paths?: IbMainMenuData []\n}\n",
            "properties": [
                {
                    "name": "paths",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbMainMenuData[]",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IbMainMenuButton"
        },
        {
            "name": "IbMainMenuDataSet",
            "id": "interface-IbMainMenuDataSet-512a46530214e46d13fee1048826cbbaca638a6549cf8d78a508954e3f9cfbf68012270ddb036355a5d77a32d93cc8961ebc634219cdebe3ad0a55f6950a4736",
            "file": "src/app/inobeta-ui/ui/main-menu/models/main-menu-data-set.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IbMainMenuButton } from './main-menu-button.model';\nimport { IbMainMenuData } from './main-menu-data.model';\n/**\n * Composition of the data models the <ib-main-menu-bar> receives,\n * so that they can be sent to the <ib-main-menu-dialog> as a unique variable.\n */\nexport interface IbMainMenuDataSet {\n  title: string;\n  topCenter: IbMainMenuButton;\n  upRight: IbMainMenuButton[];\n  navData: IbMainMenuData[];\n  bottomRight: string;\n  bottomLeft: IbMainMenuButton;\n}\n",
            "properties": [
                {
                    "name": "bottomLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbMainMenuButton",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "bottomRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "navData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbMainMenuData[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "topCenter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbMainMenuButton",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "upRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbMainMenuButton[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Composition of the data models the <ib-main-menu-bar> receives,\nso that they can be sent to the <ib-main-menu-dialog> as a unique variable.</p>\n",
            "rawdescription": "\n\nComposition of the data models the <ib-main-menu-bar> receives,\nso that they can be sent to the <ib-main-menu-dialog> as a unique variable.\n",
            "methods": []
        },
        {
            "name": "IbMatButtonData",
            "id": "interface-IbMatButtonData-ca2cd37a8a1214d4d35bb5ca49b78fb402315d614e0d0d89071bdaaf2dbaface48c1fbbb17f6642293bf4f656d8f95da8c86fbc0ad0e02db033c74f9527a6fce",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/button.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { UntypedFormGroup } from '@angular/forms';\nimport { IbFormControlBase, IbFormControlBaseComponent, IbFormControlBaseParams, IbFormControlData, IbFormControlInterface } from '../../forms/controls/form-control-base';\nimport { IbModalMessageService } from '../../modal/modal-message.service';\n\n@Component({\n  selector: '[ib-mat-button]',\n  template: `\n<div fxLayout=\"row\" fxLayout=\"space-around center\" style=\"padding-top:5px;padding-bottom:5px;height:45px;\">\n  <button\n    (click)=\"handleActionClick()\"\n    [type]=\"(data.base.key === 'submit') ? 'submit' : 'button'\"\n    [disabled]=\"data.base.disabled || ((data.base.requireValidation) && !data.form.valid)\"\n    mat-raised-button\n    [color]=\"data.base.color\"\n  >{{data.base.label | translate}}</button>\n</div>\n  `\n})\n\nexport class IbMatButtonComponent implements IbFormControlInterface {\n  @Input() data: IbMatButtonData;\n  constructor(private dialog: IbModalMessageService) {\n\n  }\n  handleActionClick() {\n    if (this.data.base.key === 'submit') {\n      return;\n    }\n\n    if (this.data.base.requireConfirmOnDirty && this.data.form && this.data.form.dirty) {\n      return this.dialog.show( {\n        title: 'shared.ibForms.unsavedTitle',\n        message: 'shared.ibForms.unsavedMessage'\n      }).subscribe(result => {\n        if (result) {\n          this.data.base.handler(this.data.form);\n        }\n      });\n    }\n\n    this.data.base.handler(this.data.form);\n  }\n}\n\n\nexport class IbMatButtonControl extends IbFormControlBase<string> {\n  color;\n  handler;\n  requireValidation;\n  requireConfirmOnDirty;\n  constructor(options: IbMatButtonParams) {\n    if (options.key === 'submit') { options.requireValidation = true; }\n    super(options);\n    this.color = options.color || 'primary';\n    this.handler = options.handler;\n    this.requireValidation = options.requireValidation || false;\n    this.requireConfirmOnDirty = options.requireConfirmOnDirty || false;\n    this.control = new IbFormControlBaseComponent(IbMatButtonComponent, {\n      base: this\n    });\n  }\n\n}\n\nexport interface IbMatButtonParams extends IbFormControlBaseParams<string> {\n  color?: string;\n  requireValidation?: boolean;\n  requireConfirmOnDirty?: boolean;\n  handler?: (form: UntypedFormGroup) => void;\n}\n\n\n\nexport interface IbMatButtonData extends IbFormControlData {\n  base: IbMatButtonParams;\n}\n\n",
            "properties": [
                {
                    "name": "base",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbMatButtonParams",
                    "optional": false,
                    "description": "",
                    "line": 76
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IbFormControlData"
        },
        {
            "name": "IbMatButtonParams",
            "id": "interface-IbMatButtonParams-ca2cd37a8a1214d4d35bb5ca49b78fb402315d614e0d0d89071bdaaf2dbaface48c1fbbb17f6642293bf4f656d8f95da8c86fbc0ad0e02db033c74f9527a6fce",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/button.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { UntypedFormGroup } from '@angular/forms';\nimport { IbFormControlBase, IbFormControlBaseComponent, IbFormControlBaseParams, IbFormControlData, IbFormControlInterface } from '../../forms/controls/form-control-base';\nimport { IbModalMessageService } from '../../modal/modal-message.service';\n\n@Component({\n  selector: '[ib-mat-button]',\n  template: `\n<div fxLayout=\"row\" fxLayout=\"space-around center\" style=\"padding-top:5px;padding-bottom:5px;height:45px;\">\n  <button\n    (click)=\"handleActionClick()\"\n    [type]=\"(data.base.key === 'submit') ? 'submit' : 'button'\"\n    [disabled]=\"data.base.disabled || ((data.base.requireValidation) && !data.form.valid)\"\n    mat-raised-button\n    [color]=\"data.base.color\"\n  >{{data.base.label | translate}}</button>\n</div>\n  `\n})\n\nexport class IbMatButtonComponent implements IbFormControlInterface {\n  @Input() data: IbMatButtonData;\n  constructor(private dialog: IbModalMessageService) {\n\n  }\n  handleActionClick() {\n    if (this.data.base.key === 'submit') {\n      return;\n    }\n\n    if (this.data.base.requireConfirmOnDirty && this.data.form && this.data.form.dirty) {\n      return this.dialog.show( {\n        title: 'shared.ibForms.unsavedTitle',\n        message: 'shared.ibForms.unsavedMessage'\n      }).subscribe(result => {\n        if (result) {\n          this.data.base.handler(this.data.form);\n        }\n      });\n    }\n\n    this.data.base.handler(this.data.form);\n  }\n}\n\n\nexport class IbMatButtonControl extends IbFormControlBase<string> {\n  color;\n  handler;\n  requireValidation;\n  requireConfirmOnDirty;\n  constructor(options: IbMatButtonParams) {\n    if (options.key === 'submit') { options.requireValidation = true; }\n    super(options);\n    this.color = options.color || 'primary';\n    this.handler = options.handler;\n    this.requireValidation = options.requireValidation || false;\n    this.requireConfirmOnDirty = options.requireConfirmOnDirty || false;\n    this.control = new IbFormControlBaseComponent(IbMatButtonComponent, {\n      base: this\n    });\n  }\n\n}\n\nexport interface IbMatButtonParams extends IbFormControlBaseParams<string> {\n  color?: string;\n  requireValidation?: boolean;\n  requireConfirmOnDirty?: boolean;\n  handler?: (form: UntypedFormGroup) => void;\n}\n\n\n\nexport interface IbMatButtonData extends IbFormControlData {\n  base: IbMatButtonParams;\n}\n\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "handler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "requireConfirmOnDirty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "requireValidation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 68
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IbFormControlBaseParams"
        },
        {
            "name": "IbMatDropdownParams",
            "id": "interface-IbMatDropdownParams-e813c2e7331c0e5fe2fe0af27c33b5dc455c41412c2511d5540ba066e898d8f33274d753dfc39cba954ea819e442370c13faad765402d4407f2644d9cbe4b6e1",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/dropdown.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IbFormControlInterface, IbFormControlBase, IbFormControlBaseComponent, IbFormControlBaseParams, IbFormControlData } from '../../forms/controls/form-control-base';\n\n@Component({\n  selector: '[ib-mat-dropdown]',\n  template: `\n    <mat-form-field appearance=\"fill\" style=\"width: 100%;\"  [formGroup]=\"data.form\">\n      <mat-label>{{data.base.label | translate}}</mat-label>\n      <mat-select\n        [formControlName]=\"data.base.key\"\n        [multiple]=\"data.base.multiple\"\n        (selectionChange)=\"handleSelection($event)\"\n      >\n        <mat-option\n          *ngIf=\"data.base.multiple\"\n          class=\"ib-mat-dropdown-select-all\"\n          disabled\n          (click)=\"selectAll()\"\n        >{{ (this.all ? 'shared.ibDropdown.selectNone' : 'shared.ibDropdown.selectAll') | translate}}</mat-option>\n        <mat-option *ngIf=\"data.base.emptyRow\" [value]=\"data.base.emptyRow.key\">\n          {{data.base.emptyRow.value | translate}}\n        </mat-option>\n        <mat-option *ngFor=\"let opt of data.base.options\" [value]=\"opt.key\">\n          {{opt.value | translate}}\n        </mat-option>\n      </mat-select>\n      <mat-icon\n        matSuffix\n        *ngIf=\"hintMessage\"\n        [matTooltip]=\"hintMessage | translate\"\n      >\n          help_outline\n      </mat-icon>\n      <mat-error>\n        <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n      </mat-error>\n    </mat-form-field>\n\n\n    <!-- TODO: example style with inline search\nhttps://stackblitz.com/edit/angular-ev8r2t?file=src%2Fapp%2Fselect-multiple-example.html\n      <mat-option class=\"select-all\">\n        <input type=\"text\" matInput (click)=\"$event.stopPropagation()\"/>\n      </mat-option>\n      <mat-option class=\"select-all\" (click)=\"selectAll()\">{{ this.all ? 'none' : 'all'}}</mat-option>\n      <div style=\"overflow:auto;height:160px;\">\n      <mat-option *ngFor=\"let t of toppingList\" [value]=\"t.key\">{{t.value}}</mat-option>\n      </div>\n-->\n  `,\n  styles: [`\n      .ib-mat-dropdown-select-all ::ng-deep mat-pseudo-checkbox {\n        display: none;\n      }\n\n      /* TODO(mdc-migration): The following rule targets internal classes of option that may no longer apply for the MDC version. */\n      .ib-mat-dropdown-select-all ::ng-deep .mat-option-text {\n        color: rgba(0, 0, 0, 0.87) !important;\n        cursor: pointer !important;\n      }\n  `]\n})\n\nexport class IbMatDropdownComponent implements IbFormControlInterface {\n  @Input() data: IbDropdownData;\n  all = false;\n  get hintMessage() {\n    return (this.data.base.hintMessage) ? this.data.base.hintMessage() : null;\n  }\n\n  selectAll() {\n    let newValues: any = [];\n    this.all = !this.all;\n    if (this.all) {\n      newValues = this.data.base.options.map(t => t.key);\n    }\n    this.data.self.setValue(newValues);\n    this.data.base.change(this.data.self);\n  }\n\n\n\n  handleSelection(who) {\n    if (this.data.base.multiple) {\n      //if (who.value.length > 0 && who.value[0] === undefined) { return; }\n      const currentValue = this.data.self.value;\n      this.all = currentValue && currentValue.length === this.data.base.options.length;\n    }\n\n    this.data.base.change(this.data.self);\n  }\n\n}\n\n\nexport class IbMatDropdownControl extends IbFormControlBase<string | string[] | number | number[]> {\n  multiple = false;\n  emptyRow = null;\n  hintMessage;\n  constructor(options: IbMatDropdownParams) {\n    super(options);\n    this.multiple = options.multiple || false;\n    this.emptyRow = options.emptyRow || null;\n    this.hintMessage = options.hintMessage || null;\n    this.control = new IbFormControlBaseComponent(IbMatDropdownComponent, {\n      base: this\n    });\n  }\n}\n\n\n\nexport interface IbMatDropdownParams extends IbFormControlBaseParams<string | string[] | number | number[]> {\n  multiple?: boolean;\n  emptyRow?: {key?: string | number, value: string};\n  hintMessage?: () => string;\n}\n\n\nexport interface IbDropdownData extends IbFormControlData {\n  base: IbMatDropdownParams;\n}\n",
            "properties": [
                {
                    "name": "emptyRow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "hintMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "multiple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 114
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IbFormControlBaseParams"
        },
        {
            "name": "IbMatTextareaData",
            "id": "interface-IbMatTextareaData-4073182fd9f72646cc841615210871243d54b24e09e061dc9760fd7f294c1095fc94903a5595ed4757b4f990a4ea3530caaf32167c9ee74e9bf5584bc9935245",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/textarea.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IbFormControlBase, IbFormControlBaseComponent, IbFormControlBaseParams, IbFormControlData, IbFormControlInterface } from '../../forms/controls/form-control-base';\n\n@Component({\n  selector: '[ib-mat-textarea]',\n  template: `\n  <mat-form-field appearance=\"fill\" style=\"width: 100%;\" [formGroup]=\"data.form\">\n    <mat-label>{{data.base.label | translate}}</mat-label>\n    <textarea\n      matInput\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      [type]=\"data.base.type\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n      [style.height]=\"data.base.height\"\n    ></textarea>\n    <mat-error>\n      <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n    </mat-error>\n  </mat-form-field>\n  `\n})\n\nexport class IbMatTextareaComponent implements IbFormControlInterface {\n  @Input() data: IbMatTextareaData;\n}\n\n\nexport class IbMatTextareaControl extends IbFormControlBase<string>{\n  height = 'auto'\n  constructor(options: IbMatTextareaParams){\n    super(options)\n    this.height = options.height || 'auto';\n    this.control = new IbFormControlBaseComponent(IbMatTextareaComponent, {\n      base: this\n    })\n  }\n}\n\n\nexport interface IbMatTextareaParams extends IbFormControlBaseParams<string>{\n  height?: string;\n}\n\n\nexport interface IbMatTextareaData extends IbFormControlData {\n  base: IbMatTextareaParams;\n}\n",
            "properties": [
                {
                    "name": "base",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbMatTextareaParams",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IbFormControlData"
        },
        {
            "name": "IbMatTextareaParams",
            "id": "interface-IbMatTextareaParams-4073182fd9f72646cc841615210871243d54b24e09e061dc9760fd7f294c1095fc94903a5595ed4757b4f990a4ea3530caaf32167c9ee74e9bf5584bc9935245",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/textarea.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IbFormControlBase, IbFormControlBaseComponent, IbFormControlBaseParams, IbFormControlData, IbFormControlInterface } from '../../forms/controls/form-control-base';\n\n@Component({\n  selector: '[ib-mat-textarea]',\n  template: `\n  <mat-form-field appearance=\"fill\" style=\"width: 100%;\" [formGroup]=\"data.form\">\n    <mat-label>{{data.base.label | translate}}</mat-label>\n    <textarea\n      matInput\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      [type]=\"data.base.type\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n      [style.height]=\"data.base.height\"\n    ></textarea>\n    <mat-error>\n      <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n    </mat-error>\n  </mat-form-field>\n  `\n})\n\nexport class IbMatTextareaComponent implements IbFormControlInterface {\n  @Input() data: IbMatTextareaData;\n}\n\n\nexport class IbMatTextareaControl extends IbFormControlBase<string>{\n  height = 'auto'\n  constructor(options: IbMatTextareaParams){\n    super(options)\n    this.height = options.height || 'auto';\n    this.control = new IbFormControlBaseComponent(IbMatTextareaComponent, {\n      base: this\n    })\n  }\n}\n\n\nexport interface IbMatTextareaParams extends IbFormControlBaseParams<string>{\n  height?: string;\n}\n\n\nexport interface IbMatTextareaData extends IbFormControlData {\n  base: IbMatTextareaParams;\n}\n",
            "properties": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IbFormControlBaseParams"
        },
        {
            "name": "IbMatTextboxData",
            "id": "interface-IbMatTextboxData-bbb6112b823fe6aceab6ad1265e0566b1876d343e0b60779e9ba303d71c37411c8ea4d9454cb189009514e2775815ad3ed0d18709060c56e067d9a1c2722679a",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/textbox.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { AbstractControl, Validators } from '@angular/forms';\nimport { IbFormControlInterface, IbFormControlBase, IbFormControlBaseComponent, IbFormControlBaseParams, IbFormControlData } from '../../forms/controls/form-control-base';\n\n@Component({\n  selector: '[ib-mat-textbox]',\n  template: `\n  <mat-form-field appearance=\"fill\" style=\"width: 100%;\" [formGroup]=\"data.form\">\n    <mat-label>{{data.base.label | translate}}</mat-label>\n    <!--\n      https://github.com/angular/angular/issues/13243\n      type is not dynamic (see angular issue)\n    -->\n    <input\n      matInput\n      *ngIf=\"data.base.type === 'number'\"\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      [min]=\"minValidator\"\n      [max]=\"maxValidator\"\n      type=\"number\"\n      (keyup)=\"data.base.change(data.self)\"\n      (input)=\"data.base.change(data.self)\"\n    />\n    <input\n      matInput\n      *ngIf=\"data.base.type === 'text'\"\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      [maxlength]=\"maxLengthValidator\"\n      type=\"text\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n    />\n    <input\n      matInput\n      *ngIf=\"data.base.type === 'email'\"\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      type=\"email\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n    />\n    <input\n      matInput\n      *ngIf=\"data.base.type === 'password'\"\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      type=\"password\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n    />\n    <input\n      matInput\n      *ngIf=\"data.base.type === 'date'\"\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      type=\"date\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n    />\n    <mat-icon\n      matSuffix\n      *ngIf=\"hintMessage\"\n      [matTooltip]=\"hintMessage | translate\"\n    >\n        help_outline\n    </mat-icon>\n    <mat-error>\n      <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n    </mat-error>\n  </mat-form-field>\n  `\n})\n\nexport class IbMatTextboxComponent implements IbFormControlInterface {\n  @Input() data: IbMatTextboxData;\n  get hintMessage() {\n    return (this.data.base.hintMessage) ? this.data.base.hintMessage() : null;\n  }\n\n  get minValidator() {\n    for (const func of this.data.base.validators) {\n      const validation = func({value: -Infinity} as AbstractControl);\n      if (validation && validation.min) {\n        return validation.min.min;\n      }\n    }\n    return null;\n  }\n\n  get maxValidator() {\n    for (const func of this.data.base.validators) {\n      const validation = func({value: Infinity} as AbstractControl);\n      if (validation && validation.max) {\n        return validation.max.max;\n      }\n    }\n    return null;\n  }\n\n\n  get maxLengthValidator() {\n    for (const func of this.data.base.validators) {\n      const getMethods = (obj) => {\n        let properties = new Set()\n        let currentObj = obj\n        do {\n          Object.getOwnPropertyNames(currentObj).map(item => properties.add(item))\n        } while ((currentObj = Object.getPrototypeOf(currentObj)))\n        return [...properties.keys()].filter((item: any) => typeof obj[item] === 'function') as string[]\n      }\n      const sampleString = this.data.self.value\n      if(!sampleString) return Infinity\n\n      const methods: string[] = getMethods(sampleString)\n      const fakeString: any = {}\n      for(let m of methods){\n        fakeString[m] = sampleString[m].bind(sampleString)\n      }\n      fakeString['length'] = Infinity\n      const validation = func({value: fakeString} as AbstractControl);\n      if (validation && validation.maxlength) {\n        return validation.maxlength.requiredLength;\n      }\n    }\n    return Infinity;\n  }\n}\n\n\nexport class IbMatTextboxControl extends IbFormControlBase<number | string> {\n  hintMessage;\n\n  constructor(options: IbMatTextboxParams) {\n    options.type = options.type || 'text';\n    super(options);\n    this.hintMessage = options.hintMessage || null;\n    this.control = new IbFormControlBaseComponent(IbMatTextboxComponent, {\n      base: this\n    });\n  }\n}\n\n\nexport interface IbMatTextboxParams extends IbFormControlBaseParams<number | string> {\n  hintMessage?: () => string;\n}\n\nexport interface IbMatTextboxData extends IbFormControlData {\n    base: IbMatTextboxParams;\n}\n\n",
            "properties": [
                {
                    "name": "base",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbMatTextboxParams",
                    "optional": false,
                    "description": "",
                    "line": 151
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IbFormControlData"
        },
        {
            "name": "IbMatTextboxParams",
            "id": "interface-IbMatTextboxParams-bbb6112b823fe6aceab6ad1265e0566b1876d343e0b60779e9ba303d71c37411c8ea4d9454cb189009514e2775815ad3ed0d18709060c56e067d9a1c2722679a",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/textbox.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { AbstractControl, Validators } from '@angular/forms';\nimport { IbFormControlInterface, IbFormControlBase, IbFormControlBaseComponent, IbFormControlBaseParams, IbFormControlData } from '../../forms/controls/form-control-base';\n\n@Component({\n  selector: '[ib-mat-textbox]',\n  template: `\n  <mat-form-field appearance=\"fill\" style=\"width: 100%;\" [formGroup]=\"data.form\">\n    <mat-label>{{data.base.label | translate}}</mat-label>\n    <!--\n      https://github.com/angular/angular/issues/13243\n      type is not dynamic (see angular issue)\n    -->\n    <input\n      matInput\n      *ngIf=\"data.base.type === 'number'\"\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      [min]=\"minValidator\"\n      [max]=\"maxValidator\"\n      type=\"number\"\n      (keyup)=\"data.base.change(data.self)\"\n      (input)=\"data.base.change(data.self)\"\n    />\n    <input\n      matInput\n      *ngIf=\"data.base.type === 'text'\"\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      [maxlength]=\"maxLengthValidator\"\n      type=\"text\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n    />\n    <input\n      matInput\n      *ngIf=\"data.base.type === 'email'\"\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      type=\"email\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n    />\n    <input\n      matInput\n      *ngIf=\"data.base.type === 'password'\"\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      type=\"password\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n    />\n    <input\n      matInput\n      *ngIf=\"data.base.type === 'date'\"\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      type=\"date\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n    />\n    <mat-icon\n      matSuffix\n      *ngIf=\"hintMessage\"\n      [matTooltip]=\"hintMessage | translate\"\n    >\n        help_outline\n    </mat-icon>\n    <mat-error>\n      <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n    </mat-error>\n  </mat-form-field>\n  `\n})\n\nexport class IbMatTextboxComponent implements IbFormControlInterface {\n  @Input() data: IbMatTextboxData;\n  get hintMessage() {\n    return (this.data.base.hintMessage) ? this.data.base.hintMessage() : null;\n  }\n\n  get minValidator() {\n    for (const func of this.data.base.validators) {\n      const validation = func({value: -Infinity} as AbstractControl);\n      if (validation && validation.min) {\n        return validation.min.min;\n      }\n    }\n    return null;\n  }\n\n  get maxValidator() {\n    for (const func of this.data.base.validators) {\n      const validation = func({value: Infinity} as AbstractControl);\n      if (validation && validation.max) {\n        return validation.max.max;\n      }\n    }\n    return null;\n  }\n\n\n  get maxLengthValidator() {\n    for (const func of this.data.base.validators) {\n      const getMethods = (obj) => {\n        let properties = new Set()\n        let currentObj = obj\n        do {\n          Object.getOwnPropertyNames(currentObj).map(item => properties.add(item))\n        } while ((currentObj = Object.getPrototypeOf(currentObj)))\n        return [...properties.keys()].filter((item: any) => typeof obj[item] === 'function') as string[]\n      }\n      const sampleString = this.data.self.value\n      if(!sampleString) return Infinity\n\n      const methods: string[] = getMethods(sampleString)\n      const fakeString: any = {}\n      for(let m of methods){\n        fakeString[m] = sampleString[m].bind(sampleString)\n      }\n      fakeString['length'] = Infinity\n      const validation = func({value: fakeString} as AbstractControl);\n      if (validation && validation.maxlength) {\n        return validation.maxlength.requiredLength;\n      }\n    }\n    return Infinity;\n  }\n}\n\n\nexport class IbMatTextboxControl extends IbFormControlBase<number | string> {\n  hintMessage;\n\n  constructor(options: IbMatTextboxParams) {\n    options.type = options.type || 'text';\n    super(options);\n    this.hintMessage = options.hintMessage || null;\n    this.control = new IbFormControlBaseComponent(IbMatTextboxComponent, {\n      base: this\n    });\n  }\n}\n\n\nexport interface IbMatTextboxParams extends IbFormControlBaseParams<number | string> {\n  hintMessage?: () => string;\n}\n\nexport interface IbMatTextboxData extends IbFormControlData {\n    base: IbMatTextboxParams;\n}\n\n",
            "properties": [
                {
                    "name": "hintMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 147
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IbFormControlBaseParams"
        },
        {
            "name": "IbModalMessage",
            "id": "interface-IbModalMessage-1f93557a677f266cf273971f7f274778dcfb0a4e631a4898164ae3d6aea7f8e3738de14e6a9debc59ff88581b590e9a5c9cb150ec61f372951fd5bf172cc6f81",
            "file": "src/app/inobeta-ui/ui/modal/modal-message.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IbModalMessage {\n  title: string;\n  message: string;\n  hasYes?: boolean;\n  hasNo?: boolean;\n  actions?: {label: string, value: any, color?: string }[];\n}\n",
            "properties": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "hasNo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "hasYes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IbPaginatorOptions",
            "id": "interface-IbPaginatorOptions-94e7d29db84b8e80b6f248281d1750437bcc8798336cde4221d139c2945488474a8a59a6c3a931e623d06f010601a783d58843979e645b580b705b41d31d54b1",
            "file": "src/app/inobeta-ui/ui/kai-table/table.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ComponentType } from \"@angular/cdk/portal\";\nimport { MatPaginatorDefaultOptions } from \"@angular/material/paginator\";\nimport { Sort } from \"@angular/material/sort\";\nimport { IbCell } from \"./cells\";\n\nexport interface IbColumnDef<T = any> {\n  /**\n   * Unique name for this column.\n   * Note: if `sort` is true, then this property **must** match the name\n   * of the respective element property.\n   * @example\n   * columnDef: 'author'\n   */\n  columnDef: string;\n  /**\n   * Column name to display.\n   * It also accepts translation ids.\n   * @example\n   * header: 'Author'\n   */\n  header: string;\n  /** If true, enables data sorting for this column. */\n  sort?: boolean;\n  /**\n   * @description\n   * Gets a reference to an element of the data array.\n   * Used as a data accessor, it formats the inner text of the cell.\n   * @example\n   * (book: Book) => `${book.author}`\n   * @param element A row instance\n   * @returns {string}\n   */\n  cell: (element: T) => string | any;\n  /**\n   * @description\n   * Custom cell component.\n   * Accepts any component that extends `IbCell`\n   *\n   * @example\n   * ＠Component({\n   *  selector: 'ib-tag-cell',\n   *  template: '<span>{{column.cell(row)}}<span>',\n   *  styles: [`\n   *    span {\n   *      color: white;\n   *      background-color: peach;\n   *      padding: 2px 10px;\n   *      border-radius: 4px;\n   *  }`]\n   * })\n   * export class MnTagCell extends IbCell { }\n   * // ...\n   * columns = [{\n   *   columnDef: 'author',\n   *   header: 'terms.author',\n   *   cell: (element) => `${element.author}`,\n   *   component: MnTagCell,\n   * }]\n   */\n  component?: ComponentType<IbCell>;\n}\n\nexport interface IbPaginatorOptions extends MatPaginatorDefaultOptions {\n  hide?: boolean;\n}\n\nexport interface IbTableDef {\n  paginator?: IbPaginatorOptions;\n  initialSort?: Sort;\n}\n\nexport interface IbCellData<T = any> {\n  column: IbColumnDef<T>;\n  row: any;\n  send: (event: Partial<IbTableRowEvent>) => void;\n}\n\nexport interface IbTableRowEvent<T = any> {\n  tableName: string;\n  type: string;\n  row: T;\n}\n\nexport interface IbTableRowSelectionChange<T = any> {\n  tableName: string;\n  selection: boolean;\n  row: T;\n}\n\nexport enum IbKaiTableState {\n  IDLE,\n  LOADING,\n  NO_DATA,\n  HTTP_ERROR,\n}\n",
            "properties": [
                {
                    "name": "hide",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 64
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "MatPaginatorDefaultOptions"
        },
        {
            "name": "IbTableColumnState",
            "id": "interface-IbTableColumnState-4483ef2cffb9a59d3bea5e96db88fcc4da5a1a28f6c8cbd08432f1a3485b4b3db00a2f88c4775465affef141cd599dc8d545cf15ef34e7412eb118b8cc5aea72",
            "file": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Sort } from '@angular/material/sort';\nimport { Action, createReducer, on } from '@ngrx/store';\nimport * as TableActions from '../actions/table.actions';\n\nexport const ibTableFeatureKey = 'ibTable';\n\nexport interface IbTableColumnState {\n  columnName: string;\n}\n\nexport interface IbTableFilterState extends IbTableColumnState {\n  value: string;\n}\n\nexport interface IbTableSortState extends IbTableColumnState {\n  direction: string;\n}\n\nexport interface IbTableTotalRowState extends IbTableColumnState {\n  func: string;\n}\n\nexport interface IbTablePaginatorState {\n  pageIndex?: number;\n  pageSize?: number;\n  length?: number;\n}\n\nexport interface IbTableConfigState {\n  filters?: IbTableFilterState[];\n  totals?: IbTableTotalRowState[];\n  sort?: IbTableSortState;\n  paginator?: IbTablePaginatorState;\n  default?: boolean;\n}\n\nexport interface IbTableState {\n  instances: {\n    tableName: string\n    config: IbTableConfigState\n  }[];\n  selectedConfig?: string;\n}\n\nexport const ibTableFeatureInitialState: IbTableState = {\n  instances: []\n};\n\n\nconst reducer = createReducer(\n  ibTableFeatureInitialState,\n\n  on(TableActions.ibTableActionSetTotalRowCell,\n    (state, newTotalRowState) => {\n      if (!newTotalRowState.tableName) {\n        return { ...state };\n      }\n      const instance = state.instances?.find(i => i.tableName === newTotalRowState.tableName);\n      if (!instance) {\n        return formatFieldState(state, newTotalRowState.tableName, null, { totals: [newTotalRowState.state] });\n      }\n      state.instances.splice(state.instances.indexOf(instance), 1);\n      const rowExists = instance.config?.totals.find(t => t.columnName === newTotalRowState.state.columnName);\n      if (!rowExists) {\n        return formatFieldState(state,\n          newTotalRowState.tableName,\n          instance,\n          { totals: [...(instance.config?.totals || []), newTotalRowState.state] });\n      }\n      return formatFieldState(state, newTotalRowState.tableName, instance,\n        {\n          totals: instance.config.totals.map(\n            t => t.columnName === newTotalRowState.state.columnName\n              ? ({ columnName: newTotalRowState.state.columnName, func: newTotalRowState.state.func })\n              : t\n          )\n        });\n    }\n  ),\n\n  on(TableActions.ibTableActionSetConfig, (state, newConfigData) => {\n    if (!newConfigData.config) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === newConfigData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return {\n      ...state,\n      instances: [\n        ...(state.instances || []),\n        {\n          tableName: newConfigData.tableName,\n          config: newConfigData.config.config\n        }\n      ],\n      selectedConfig: `${newConfigData.tableName}/${newConfigData.config.name}`\n    };\n  }),\n\n  on(TableActions.ibTableActionSaveConfig, (state, saveConfigData) => {\n    return { ...state, selectedConfig: `${saveConfigData.tableName}/${saveConfigData.options.data.name}` };\n  }),\n\n  on(TableActions.ibTableActionSelectSortingField, (state, sortData) => {\n    if (!sortData.tableName) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === sortData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return formatFieldState(state, sortData.tableName, instance, { sort: sortData.options });\n  }),\n\n  on(TableActions.ibTableActionAddFilterField,\n    (state, addFilterState) => {\n      if (!addFilterState.tableName) {\n        return { ...state };\n      }\n      const instance = state.instances?.find(i => i.tableName === addFilterState.tableName);\n      if (!instance) {\n        return formatFieldState(state, addFilterState.tableName, null, { filters: [addFilterState.state] });\n      }\n      state.instances.splice(state.instances.indexOf(instance), 1);\n      const rowExists = instance.config?.filters.find(t => t.columnName === addFilterState.state.columnName);\n      if (!rowExists) {\n        return formatFieldState(state,\n          addFilterState.tableName,\n          instance,\n          { filters: [...(instance.config?.filters || []), addFilterState.state] });\n      }\n      return formatFieldState(state, addFilterState.tableName, instance, {\n        filters: instance.config.filters.map(\n          t => t.columnName === addFilterState.state.columnName\n            ? ({ columnName: addFilterState.state.columnName, value: addFilterState.state.value })\n            : t\n        )\n      });\n    }\n  ),\n\n  on(TableActions.ibTableActionSetPaginator, (state, paginatorData) => {\n    if (!paginatorData.tableName) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === paginatorData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return formatFieldState(state, paginatorData.tableName, instance, { paginator: paginatorData.state });\n  }),\n);\n\n\nexport function ibTableFeatureReducer(state: IbTableState = ibTableFeatureInitialState, action: Action) {\n  return reducer(state, action);\n}\n\n\nfunction formatFieldState(state, tableName, instance, newConfig: IbTableConfigState): IbTableState {\n\n  const instanceConfig: { config: IbTableConfigState, tableName } =\n    { config: { totals: [], sort: null, filters: [], paginator: null }, tableName };\n  for (const k of Object.keys(instanceConfig.config)) {\n    instanceConfig.config[k] = !newConfig[k] ? instance?.config[k] || instanceConfig.config[k] : newConfig[k] || instanceConfig.config[k];\n  }\n  return {\n    ...state,\n    instances: [\n      ...(state.instances || []),\n      instanceConfig\n    ]\n  };\n}\n\n\n",
            "properties": [
                {
                    "name": "columnName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IbTableConfDialogParams",
            "id": "interface-IbTableConfDialogParams-e2bcb2d508a319048b3acd61defa467d2127c5b9515bb596731ba2cc21ed09628c99c28186a889547e506965bb75e340e688501ce86cd1b8326110f99adc6311",
            "file": "src/app/inobeta-ui/ui/table/components/table-header/table-header.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Input, EventEmitter, Output, HostListener } from '@angular/core';\nimport { IbStickyAreas, ibTableSupportedFilters, IbTableTitles, IbTableTitlesTypes } from '../../models/titles.model';\nimport { IbTemplateModel } from '../../models/template.model';\nimport { Store } from '@ngrx/store';\nimport { IbModalMessageService } from '../../../modal/modal-message.service';\nimport { IbTableConfSaveComponent } from '../table-conf/table-conf-save.component';\nimport { ibTableActionLoadConfig, ibTableActionSaveConfig } from '../../store/actions/table.actions';\nimport { IbModalMessage } from '../../../modal/modal-message.model';\nimport { IbTableConfLoadComponent } from '../table-conf/table-conf-load.component';\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: '[ib-table-header]',\n  templateUrl: './table-header.component.html',\n  styleUrls: ['./table-header.component.css']\n})\nexport class IbTableHeaderComponent implements OnInit {\n  @Input() table: any;\n  @Input() titles: IbTableTitles[] = [];\n  @Input() selectableRows = true;\n  @Input() currentSort: any = {};\n  @Input() templateHeaders: any = {};\n  @Input() templateButtons: IbTemplateModel[] = [];\n  @Input() columnFilter = {};\n  @Input() hasEdit = false;\n  @Input() hasDelete = false;\n  @Input() hasConfig = true;\n  @Input() stickyAreas = [];\n  @Input() tableName: string;\n\n  renderContextMenu = {};\n  visibleHeaders = {};\n  columnTypes = IbTableTitlesTypes;\n  supportedFilters = ibTableSupportedFilters;\n  ibStickyArea = IbStickyAreas;\n\n  @Output() handleSetFilter = new EventEmitter<any>();\n\n  constructor(\n    private store: Store<any>,\n    private ibModal: IbModalMessageService\n  ) { }\n\n  ngOnInit() {\n  }\n\n  resetCustomHeaderVisibility(event = null) {\n    if (event) {\n      event.stopPropagation();\n    }\n    this.visibleHeaders = {};\n  }\n\n  setFilter(key, value, indexToSet = 0) {\n    this.handleSetFilter.emit({\n      key,\n      value,\n      indexToSet\n    });\n  }\n\n  @HostListener('document:click', ['$event'])\n  clickout(event) {\n    // tslint:disable-next-line: forin\n    for (const el in this.visibleHeaders) {\n      event.stopPropagation();\n      break;\n    }\n    this.resetCustomHeaderVisibility();\n  }\n\n  hasCustomHeadersVisible() {\n    return Object.keys(this.visibleHeaders).length > 0;\n  }\n\n  saveConf() {\n\n    console.log('saveConf');\n    this.ibModal.show({\n      title: 'shared.ibTable.saveConf.title',\n      message: 'shared.ibTable.saveConf.message',\n      tableName: this.tableName\n    } as IbTableConfDialogParams, IbTableConfSaveComponent).subscribe(data => {\n      if (data) {\n        this.store.dispatch(ibTableActionSaveConfig({ options: data, tableName: this.tableName }));\n      }\n    });\n  }\n  loadConf() {\n    this.ibModal.show({\n      title: 'shared.ibTable.loadConf.title',\n      message: 'shared.ibTable.loadConf.message',\n      tableName: this.tableName\n    } as IbTableConfDialogParams, IbTableConfLoadComponent).subscribe(data => {\n      if (data) {\n        this.store.dispatch(ibTableActionLoadConfig({ configName: data.name, tableName: this.tableName }));\n      }\n    });\n  }\n}\n\nexport interface IbTableConfDialogParams extends IbModalMessage {\n  tableName: string;\n}\n",
            "properties": [
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 103
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IbModalMessage"
        },
        {
            "name": "IbTableConfigState",
            "id": "interface-IbTableConfigState-4483ef2cffb9a59d3bea5e96db88fcc4da5a1a28f6c8cbd08432f1a3485b4b3db00a2f88c4775465affef141cd599dc8d545cf15ef34e7412eb118b8cc5aea72",
            "file": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Sort } from '@angular/material/sort';\nimport { Action, createReducer, on } from '@ngrx/store';\nimport * as TableActions from '../actions/table.actions';\n\nexport const ibTableFeatureKey = 'ibTable';\n\nexport interface IbTableColumnState {\n  columnName: string;\n}\n\nexport interface IbTableFilterState extends IbTableColumnState {\n  value: string;\n}\n\nexport interface IbTableSortState extends IbTableColumnState {\n  direction: string;\n}\n\nexport interface IbTableTotalRowState extends IbTableColumnState {\n  func: string;\n}\n\nexport interface IbTablePaginatorState {\n  pageIndex?: number;\n  pageSize?: number;\n  length?: number;\n}\n\nexport interface IbTableConfigState {\n  filters?: IbTableFilterState[];\n  totals?: IbTableTotalRowState[];\n  sort?: IbTableSortState;\n  paginator?: IbTablePaginatorState;\n  default?: boolean;\n}\n\nexport interface IbTableState {\n  instances: {\n    tableName: string\n    config: IbTableConfigState\n  }[];\n  selectedConfig?: string;\n}\n\nexport const ibTableFeatureInitialState: IbTableState = {\n  instances: []\n};\n\n\nconst reducer = createReducer(\n  ibTableFeatureInitialState,\n\n  on(TableActions.ibTableActionSetTotalRowCell,\n    (state, newTotalRowState) => {\n      if (!newTotalRowState.tableName) {\n        return { ...state };\n      }\n      const instance = state.instances?.find(i => i.tableName === newTotalRowState.tableName);\n      if (!instance) {\n        return formatFieldState(state, newTotalRowState.tableName, null, { totals: [newTotalRowState.state] });\n      }\n      state.instances.splice(state.instances.indexOf(instance), 1);\n      const rowExists = instance.config?.totals.find(t => t.columnName === newTotalRowState.state.columnName);\n      if (!rowExists) {\n        return formatFieldState(state,\n          newTotalRowState.tableName,\n          instance,\n          { totals: [...(instance.config?.totals || []), newTotalRowState.state] });\n      }\n      return formatFieldState(state, newTotalRowState.tableName, instance,\n        {\n          totals: instance.config.totals.map(\n            t => t.columnName === newTotalRowState.state.columnName\n              ? ({ columnName: newTotalRowState.state.columnName, func: newTotalRowState.state.func })\n              : t\n          )\n        });\n    }\n  ),\n\n  on(TableActions.ibTableActionSetConfig, (state, newConfigData) => {\n    if (!newConfigData.config) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === newConfigData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return {\n      ...state,\n      instances: [\n        ...(state.instances || []),\n        {\n          tableName: newConfigData.tableName,\n          config: newConfigData.config.config\n        }\n      ],\n      selectedConfig: `${newConfigData.tableName}/${newConfigData.config.name}`\n    };\n  }),\n\n  on(TableActions.ibTableActionSaveConfig, (state, saveConfigData) => {\n    return { ...state, selectedConfig: `${saveConfigData.tableName}/${saveConfigData.options.data.name}` };\n  }),\n\n  on(TableActions.ibTableActionSelectSortingField, (state, sortData) => {\n    if (!sortData.tableName) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === sortData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return formatFieldState(state, sortData.tableName, instance, { sort: sortData.options });\n  }),\n\n  on(TableActions.ibTableActionAddFilterField,\n    (state, addFilterState) => {\n      if (!addFilterState.tableName) {\n        return { ...state };\n      }\n      const instance = state.instances?.find(i => i.tableName === addFilterState.tableName);\n      if (!instance) {\n        return formatFieldState(state, addFilterState.tableName, null, { filters: [addFilterState.state] });\n      }\n      state.instances.splice(state.instances.indexOf(instance), 1);\n      const rowExists = instance.config?.filters.find(t => t.columnName === addFilterState.state.columnName);\n      if (!rowExists) {\n        return formatFieldState(state,\n          addFilterState.tableName,\n          instance,\n          { filters: [...(instance.config?.filters || []), addFilterState.state] });\n      }\n      return formatFieldState(state, addFilterState.tableName, instance, {\n        filters: instance.config.filters.map(\n          t => t.columnName === addFilterState.state.columnName\n            ? ({ columnName: addFilterState.state.columnName, value: addFilterState.state.value })\n            : t\n        )\n      });\n    }\n  ),\n\n  on(TableActions.ibTableActionSetPaginator, (state, paginatorData) => {\n    if (!paginatorData.tableName) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === paginatorData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return formatFieldState(state, paginatorData.tableName, instance, { paginator: paginatorData.state });\n  }),\n);\n\n\nexport function ibTableFeatureReducer(state: IbTableState = ibTableFeatureInitialState, action: Action) {\n  return reducer(state, action);\n}\n\n\nfunction formatFieldState(state, tableName, instance, newConfig: IbTableConfigState): IbTableState {\n\n  const instanceConfig: { config: IbTableConfigState, tableName } =\n    { config: { totals: [], sort: null, filters: [], paginator: null }, tableName };\n  for (const k of Object.keys(instanceConfig.config)) {\n    instanceConfig.config[k] = !newConfig[k] ? instance?.config[k] || instanceConfig.config[k] : newConfig[k] || instanceConfig.config[k];\n  }\n  return {\n    ...state,\n    instances: [\n      ...(state.instances || []),\n      instanceConfig\n    ]\n  };\n}\n\n\n",
            "properties": [
                {
                    "name": "default",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "filters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTableFilterState[]",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTablePaginatorState",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTableSortState",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "totals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTableTotalRowState[]",
                    "optional": true,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IbTableDef",
            "id": "interface-IbTableDef-94e7d29db84b8e80b6f248281d1750437bcc8798336cde4221d139c2945488474a8a59a6c3a931e623d06f010601a783d58843979e645b580b705b41d31d54b1",
            "file": "src/app/inobeta-ui/ui/kai-table/table.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ComponentType } from \"@angular/cdk/portal\";\nimport { MatPaginatorDefaultOptions } from \"@angular/material/paginator\";\nimport { Sort } from \"@angular/material/sort\";\nimport { IbCell } from \"./cells\";\n\nexport interface IbColumnDef<T = any> {\n  /**\n   * Unique name for this column.\n   * Note: if `sort` is true, then this property **must** match the name\n   * of the respective element property.\n   * @example\n   * columnDef: 'author'\n   */\n  columnDef: string;\n  /**\n   * Column name to display.\n   * It also accepts translation ids.\n   * @example\n   * header: 'Author'\n   */\n  header: string;\n  /** If true, enables data sorting for this column. */\n  sort?: boolean;\n  /**\n   * @description\n   * Gets a reference to an element of the data array.\n   * Used as a data accessor, it formats the inner text of the cell.\n   * @example\n   * (book: Book) => `${book.author}`\n   * @param element A row instance\n   * @returns {string}\n   */\n  cell: (element: T) => string | any;\n  /**\n   * @description\n   * Custom cell component.\n   * Accepts any component that extends `IbCell`\n   *\n   * @example\n   * ＠Component({\n   *  selector: 'ib-tag-cell',\n   *  template: '<span>{{column.cell(row)}}<span>',\n   *  styles: [`\n   *    span {\n   *      color: white;\n   *      background-color: peach;\n   *      padding: 2px 10px;\n   *      border-radius: 4px;\n   *  }`]\n   * })\n   * export class MnTagCell extends IbCell { }\n   * // ...\n   * columns = [{\n   *   columnDef: 'author',\n   *   header: 'terms.author',\n   *   cell: (element) => `${element.author}`,\n   *   component: MnTagCell,\n   * }]\n   */\n  component?: ComponentType<IbCell>;\n}\n\nexport interface IbPaginatorOptions extends MatPaginatorDefaultOptions {\n  hide?: boolean;\n}\n\nexport interface IbTableDef {\n  paginator?: IbPaginatorOptions;\n  initialSort?: Sort;\n}\n\nexport interface IbCellData<T = any> {\n  column: IbColumnDef<T>;\n  row: any;\n  send: (event: Partial<IbTableRowEvent>) => void;\n}\n\nexport interface IbTableRowEvent<T = any> {\n  tableName: string;\n  type: string;\n  row: T;\n}\n\nexport interface IbTableRowSelectionChange<T = any> {\n  tableName: string;\n  selection: boolean;\n  row: T;\n}\n\nexport enum IbKaiTableState {\n  IDLE,\n  LOADING,\n  NO_DATA,\n  HTTP_ERROR,\n}\n",
            "properties": [
                {
                    "name": "initialSort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Sort",
                    "optional": true,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbPaginatorOptions",
                    "optional": true,
                    "description": "",
                    "line": 68
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IbTableFilterState",
            "id": "interface-IbTableFilterState-4483ef2cffb9a59d3bea5e96db88fcc4da5a1a28f6c8cbd08432f1a3485b4b3db00a2f88c4775465affef141cd599dc8d545cf15ef34e7412eb118b8cc5aea72",
            "file": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Sort } from '@angular/material/sort';\nimport { Action, createReducer, on } from '@ngrx/store';\nimport * as TableActions from '../actions/table.actions';\n\nexport const ibTableFeatureKey = 'ibTable';\n\nexport interface IbTableColumnState {\n  columnName: string;\n}\n\nexport interface IbTableFilterState extends IbTableColumnState {\n  value: string;\n}\n\nexport interface IbTableSortState extends IbTableColumnState {\n  direction: string;\n}\n\nexport interface IbTableTotalRowState extends IbTableColumnState {\n  func: string;\n}\n\nexport interface IbTablePaginatorState {\n  pageIndex?: number;\n  pageSize?: number;\n  length?: number;\n}\n\nexport interface IbTableConfigState {\n  filters?: IbTableFilterState[];\n  totals?: IbTableTotalRowState[];\n  sort?: IbTableSortState;\n  paginator?: IbTablePaginatorState;\n  default?: boolean;\n}\n\nexport interface IbTableState {\n  instances: {\n    tableName: string\n    config: IbTableConfigState\n  }[];\n  selectedConfig?: string;\n}\n\nexport const ibTableFeatureInitialState: IbTableState = {\n  instances: []\n};\n\n\nconst reducer = createReducer(\n  ibTableFeatureInitialState,\n\n  on(TableActions.ibTableActionSetTotalRowCell,\n    (state, newTotalRowState) => {\n      if (!newTotalRowState.tableName) {\n        return { ...state };\n      }\n      const instance = state.instances?.find(i => i.tableName === newTotalRowState.tableName);\n      if (!instance) {\n        return formatFieldState(state, newTotalRowState.tableName, null, { totals: [newTotalRowState.state] });\n      }\n      state.instances.splice(state.instances.indexOf(instance), 1);\n      const rowExists = instance.config?.totals.find(t => t.columnName === newTotalRowState.state.columnName);\n      if (!rowExists) {\n        return formatFieldState(state,\n          newTotalRowState.tableName,\n          instance,\n          { totals: [...(instance.config?.totals || []), newTotalRowState.state] });\n      }\n      return formatFieldState(state, newTotalRowState.tableName, instance,\n        {\n          totals: instance.config.totals.map(\n            t => t.columnName === newTotalRowState.state.columnName\n              ? ({ columnName: newTotalRowState.state.columnName, func: newTotalRowState.state.func })\n              : t\n          )\n        });\n    }\n  ),\n\n  on(TableActions.ibTableActionSetConfig, (state, newConfigData) => {\n    if (!newConfigData.config) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === newConfigData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return {\n      ...state,\n      instances: [\n        ...(state.instances || []),\n        {\n          tableName: newConfigData.tableName,\n          config: newConfigData.config.config\n        }\n      ],\n      selectedConfig: `${newConfigData.tableName}/${newConfigData.config.name}`\n    };\n  }),\n\n  on(TableActions.ibTableActionSaveConfig, (state, saveConfigData) => {\n    return { ...state, selectedConfig: `${saveConfigData.tableName}/${saveConfigData.options.data.name}` };\n  }),\n\n  on(TableActions.ibTableActionSelectSortingField, (state, sortData) => {\n    if (!sortData.tableName) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === sortData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return formatFieldState(state, sortData.tableName, instance, { sort: sortData.options });\n  }),\n\n  on(TableActions.ibTableActionAddFilterField,\n    (state, addFilterState) => {\n      if (!addFilterState.tableName) {\n        return { ...state };\n      }\n      const instance = state.instances?.find(i => i.tableName === addFilterState.tableName);\n      if (!instance) {\n        return formatFieldState(state, addFilterState.tableName, null, { filters: [addFilterState.state] });\n      }\n      state.instances.splice(state.instances.indexOf(instance), 1);\n      const rowExists = instance.config?.filters.find(t => t.columnName === addFilterState.state.columnName);\n      if (!rowExists) {\n        return formatFieldState(state,\n          addFilterState.tableName,\n          instance,\n          { filters: [...(instance.config?.filters || []), addFilterState.state] });\n      }\n      return formatFieldState(state, addFilterState.tableName, instance, {\n        filters: instance.config.filters.map(\n          t => t.columnName === addFilterState.state.columnName\n            ? ({ columnName: addFilterState.state.columnName, value: addFilterState.state.value })\n            : t\n        )\n      });\n    }\n  ),\n\n  on(TableActions.ibTableActionSetPaginator, (state, paginatorData) => {\n    if (!paginatorData.tableName) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === paginatorData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return formatFieldState(state, paginatorData.tableName, instance, { paginator: paginatorData.state });\n  }),\n);\n\n\nexport function ibTableFeatureReducer(state: IbTableState = ibTableFeatureInitialState, action: Action) {\n  return reducer(state, action);\n}\n\n\nfunction formatFieldState(state, tableName, instance, newConfig: IbTableConfigState): IbTableState {\n\n  const instanceConfig: { config: IbTableConfigState, tableName } =\n    { config: { totals: [], sort: null, filters: [], paginator: null }, tableName };\n  for (const k of Object.keys(instanceConfig.config)) {\n    instanceConfig.config[k] = !newConfig[k] ? instance?.config[k] || instanceConfig.config[k] : newConfig[k] || instanceConfig.config[k];\n  }\n  return {\n    ...state,\n    instances: [\n      ...(state.instances || []),\n      instanceConfig\n    ]\n  };\n}\n\n\n",
            "properties": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IbTableColumnState"
        },
        {
            "name": "IbTableItem",
            "id": "interface-IbTableItem-770fc173dec7a48959357948f96b6eecd330666934fb0096ac90a00341d2d0ca435580d78ba7439c300444922bbed852eda29a132fbb3a4509b84f59381fee7b",
            "file": "src/app/inobeta-ui/ui/table/models/table-item.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IbTableItem{\n  ibTableItemSelected?: boolean;\n  [others: string]: any;\n}\n",
            "properties": [
                {
                    "name": "ibTableItemSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-770fc173dec7a48959357948f96b6eecd330666934fb0096ac90a00341d2d0ca435580d78ba7439c300444922bbed852eda29a132fbb3a4509b84f59381fee7b",
                    "args": [
                        {
                            "name": "others",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": []
        },
        {
            "name": "IbTablePaginatorState",
            "id": "interface-IbTablePaginatorState-4483ef2cffb9a59d3bea5e96db88fcc4da5a1a28f6c8cbd08432f1a3485b4b3db00a2f88c4775465affef141cd599dc8d545cf15ef34e7412eb118b8cc5aea72",
            "file": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Sort } from '@angular/material/sort';\nimport { Action, createReducer, on } from '@ngrx/store';\nimport * as TableActions from '../actions/table.actions';\n\nexport const ibTableFeatureKey = 'ibTable';\n\nexport interface IbTableColumnState {\n  columnName: string;\n}\n\nexport interface IbTableFilterState extends IbTableColumnState {\n  value: string;\n}\n\nexport interface IbTableSortState extends IbTableColumnState {\n  direction: string;\n}\n\nexport interface IbTableTotalRowState extends IbTableColumnState {\n  func: string;\n}\n\nexport interface IbTablePaginatorState {\n  pageIndex?: number;\n  pageSize?: number;\n  length?: number;\n}\n\nexport interface IbTableConfigState {\n  filters?: IbTableFilterState[];\n  totals?: IbTableTotalRowState[];\n  sort?: IbTableSortState;\n  paginator?: IbTablePaginatorState;\n  default?: boolean;\n}\n\nexport interface IbTableState {\n  instances: {\n    tableName: string\n    config: IbTableConfigState\n  }[];\n  selectedConfig?: string;\n}\n\nexport const ibTableFeatureInitialState: IbTableState = {\n  instances: []\n};\n\n\nconst reducer = createReducer(\n  ibTableFeatureInitialState,\n\n  on(TableActions.ibTableActionSetTotalRowCell,\n    (state, newTotalRowState) => {\n      if (!newTotalRowState.tableName) {\n        return { ...state };\n      }\n      const instance = state.instances?.find(i => i.tableName === newTotalRowState.tableName);\n      if (!instance) {\n        return formatFieldState(state, newTotalRowState.tableName, null, { totals: [newTotalRowState.state] });\n      }\n      state.instances.splice(state.instances.indexOf(instance), 1);\n      const rowExists = instance.config?.totals.find(t => t.columnName === newTotalRowState.state.columnName);\n      if (!rowExists) {\n        return formatFieldState(state,\n          newTotalRowState.tableName,\n          instance,\n          { totals: [...(instance.config?.totals || []), newTotalRowState.state] });\n      }\n      return formatFieldState(state, newTotalRowState.tableName, instance,\n        {\n          totals: instance.config.totals.map(\n            t => t.columnName === newTotalRowState.state.columnName\n              ? ({ columnName: newTotalRowState.state.columnName, func: newTotalRowState.state.func })\n              : t\n          )\n        });\n    }\n  ),\n\n  on(TableActions.ibTableActionSetConfig, (state, newConfigData) => {\n    if (!newConfigData.config) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === newConfigData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return {\n      ...state,\n      instances: [\n        ...(state.instances || []),\n        {\n          tableName: newConfigData.tableName,\n          config: newConfigData.config.config\n        }\n      ],\n      selectedConfig: `${newConfigData.tableName}/${newConfigData.config.name}`\n    };\n  }),\n\n  on(TableActions.ibTableActionSaveConfig, (state, saveConfigData) => {\n    return { ...state, selectedConfig: `${saveConfigData.tableName}/${saveConfigData.options.data.name}` };\n  }),\n\n  on(TableActions.ibTableActionSelectSortingField, (state, sortData) => {\n    if (!sortData.tableName) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === sortData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return formatFieldState(state, sortData.tableName, instance, { sort: sortData.options });\n  }),\n\n  on(TableActions.ibTableActionAddFilterField,\n    (state, addFilterState) => {\n      if (!addFilterState.tableName) {\n        return { ...state };\n      }\n      const instance = state.instances?.find(i => i.tableName === addFilterState.tableName);\n      if (!instance) {\n        return formatFieldState(state, addFilterState.tableName, null, { filters: [addFilterState.state] });\n      }\n      state.instances.splice(state.instances.indexOf(instance), 1);\n      const rowExists = instance.config?.filters.find(t => t.columnName === addFilterState.state.columnName);\n      if (!rowExists) {\n        return formatFieldState(state,\n          addFilterState.tableName,\n          instance,\n          { filters: [...(instance.config?.filters || []), addFilterState.state] });\n      }\n      return formatFieldState(state, addFilterState.tableName, instance, {\n        filters: instance.config.filters.map(\n          t => t.columnName === addFilterState.state.columnName\n            ? ({ columnName: addFilterState.state.columnName, value: addFilterState.state.value })\n            : t\n        )\n      });\n    }\n  ),\n\n  on(TableActions.ibTableActionSetPaginator, (state, paginatorData) => {\n    if (!paginatorData.tableName) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === paginatorData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return formatFieldState(state, paginatorData.tableName, instance, { paginator: paginatorData.state });\n  }),\n);\n\n\nexport function ibTableFeatureReducer(state: IbTableState = ibTableFeatureInitialState, action: Action) {\n  return reducer(state, action);\n}\n\n\nfunction formatFieldState(state, tableName, instance, newConfig: IbTableConfigState): IbTableState {\n\n  const instanceConfig: { config: IbTableConfigState, tableName } =\n    { config: { totals: [], sort: null, filters: [], paginator: null }, tableName };\n  for (const k of Object.keys(instanceConfig.config)) {\n    instanceConfig.config[k] = !newConfig[k] ? instance?.config[k] || instanceConfig.config[k] : newConfig[k] || instanceConfig.config[k];\n  }\n  return {\n    ...state,\n    instances: [\n      ...(state.instances || []),\n      instanceConfig\n    ]\n  };\n}\n\n\n",
            "properties": [
                {
                    "name": "length",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "pageIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IbTableRowEvent",
            "id": "interface-IbTableRowEvent-94e7d29db84b8e80b6f248281d1750437bcc8798336cde4221d139c2945488474a8a59a6c3a931e623d06f010601a783d58843979e645b580b705b41d31d54b1",
            "file": "src/app/inobeta-ui/ui/kai-table/table.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ComponentType } from \"@angular/cdk/portal\";\nimport { MatPaginatorDefaultOptions } from \"@angular/material/paginator\";\nimport { Sort } from \"@angular/material/sort\";\nimport { IbCell } from \"./cells\";\n\nexport interface IbColumnDef<T = any> {\n  /**\n   * Unique name for this column.\n   * Note: if `sort` is true, then this property **must** match the name\n   * of the respective element property.\n   * @example\n   * columnDef: 'author'\n   */\n  columnDef: string;\n  /**\n   * Column name to display.\n   * It also accepts translation ids.\n   * @example\n   * header: 'Author'\n   */\n  header: string;\n  /** If true, enables data sorting for this column. */\n  sort?: boolean;\n  /**\n   * @description\n   * Gets a reference to an element of the data array.\n   * Used as a data accessor, it formats the inner text of the cell.\n   * @example\n   * (book: Book) => `${book.author}`\n   * @param element A row instance\n   * @returns {string}\n   */\n  cell: (element: T) => string | any;\n  /**\n   * @description\n   * Custom cell component.\n   * Accepts any component that extends `IbCell`\n   *\n   * @example\n   * ＠Component({\n   *  selector: 'ib-tag-cell',\n   *  template: '<span>{{column.cell(row)}}<span>',\n   *  styles: [`\n   *    span {\n   *      color: white;\n   *      background-color: peach;\n   *      padding: 2px 10px;\n   *      border-radius: 4px;\n   *  }`]\n   * })\n   * export class MnTagCell extends IbCell { }\n   * // ...\n   * columns = [{\n   *   columnDef: 'author',\n   *   header: 'terms.author',\n   *   cell: (element) => `${element.author}`,\n   *   component: MnTagCell,\n   * }]\n   */\n  component?: ComponentType<IbCell>;\n}\n\nexport interface IbPaginatorOptions extends MatPaginatorDefaultOptions {\n  hide?: boolean;\n}\n\nexport interface IbTableDef {\n  paginator?: IbPaginatorOptions;\n  initialSort?: Sort;\n}\n\nexport interface IbCellData<T = any> {\n  column: IbColumnDef<T>;\n  row: any;\n  send: (event: Partial<IbTableRowEvent>) => void;\n}\n\nexport interface IbTableRowEvent<T = any> {\n  tableName: string;\n  type: string;\n  row: T;\n}\n\nexport interface IbTableRowSelectionChange<T = any> {\n  tableName: string;\n  selection: boolean;\n  row: T;\n}\n\nexport enum IbKaiTableState {\n  IDLE,\n  LOADING,\n  NO_DATA,\n  HTTP_ERROR,\n}\n",
            "properties": [
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IbTableRowSelectionChange",
            "id": "interface-IbTableRowSelectionChange-94e7d29db84b8e80b6f248281d1750437bcc8798336cde4221d139c2945488474a8a59a6c3a931e623d06f010601a783d58843979e645b580b705b41d31d54b1",
            "file": "src/app/inobeta-ui/ui/kai-table/table.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ComponentType } from \"@angular/cdk/portal\";\nimport { MatPaginatorDefaultOptions } from \"@angular/material/paginator\";\nimport { Sort } from \"@angular/material/sort\";\nimport { IbCell } from \"./cells\";\n\nexport interface IbColumnDef<T = any> {\n  /**\n   * Unique name for this column.\n   * Note: if `sort` is true, then this property **must** match the name\n   * of the respective element property.\n   * @example\n   * columnDef: 'author'\n   */\n  columnDef: string;\n  /**\n   * Column name to display.\n   * It also accepts translation ids.\n   * @example\n   * header: 'Author'\n   */\n  header: string;\n  /** If true, enables data sorting for this column. */\n  sort?: boolean;\n  /**\n   * @description\n   * Gets a reference to an element of the data array.\n   * Used as a data accessor, it formats the inner text of the cell.\n   * @example\n   * (book: Book) => `${book.author}`\n   * @param element A row instance\n   * @returns {string}\n   */\n  cell: (element: T) => string | any;\n  /**\n   * @description\n   * Custom cell component.\n   * Accepts any component that extends `IbCell`\n   *\n   * @example\n   * ＠Component({\n   *  selector: 'ib-tag-cell',\n   *  template: '<span>{{column.cell(row)}}<span>',\n   *  styles: [`\n   *    span {\n   *      color: white;\n   *      background-color: peach;\n   *      padding: 2px 10px;\n   *      border-radius: 4px;\n   *  }`]\n   * })\n   * export class MnTagCell extends IbCell { }\n   * // ...\n   * columns = [{\n   *   columnDef: 'author',\n   *   header: 'terms.author',\n   *   cell: (element) => `${element.author}`,\n   *   component: MnTagCell,\n   * }]\n   */\n  component?: ComponentType<IbCell>;\n}\n\nexport interface IbPaginatorOptions extends MatPaginatorDefaultOptions {\n  hide?: boolean;\n}\n\nexport interface IbTableDef {\n  paginator?: IbPaginatorOptions;\n  initialSort?: Sort;\n}\n\nexport interface IbCellData<T = any> {\n  column: IbColumnDef<T>;\n  row: any;\n  send: (event: Partial<IbTableRowEvent>) => void;\n}\n\nexport interface IbTableRowEvent<T = any> {\n  tableName: string;\n  type: string;\n  row: T;\n}\n\nexport interface IbTableRowSelectionChange<T = any> {\n  tableName: string;\n  selection: boolean;\n  row: T;\n}\n\nexport enum IbKaiTableState {\n  IDLE,\n  LOADING,\n  NO_DATA,\n  HTTP_ERROR,\n}\n",
            "properties": [
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "selection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 85
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IbTableSortState",
            "id": "interface-IbTableSortState-4483ef2cffb9a59d3bea5e96db88fcc4da5a1a28f6c8cbd08432f1a3485b4b3db00a2f88c4775465affef141cd599dc8d545cf15ef34e7412eb118b8cc5aea72",
            "file": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Sort } from '@angular/material/sort';\nimport { Action, createReducer, on } from '@ngrx/store';\nimport * as TableActions from '../actions/table.actions';\n\nexport const ibTableFeatureKey = 'ibTable';\n\nexport interface IbTableColumnState {\n  columnName: string;\n}\n\nexport interface IbTableFilterState extends IbTableColumnState {\n  value: string;\n}\n\nexport interface IbTableSortState extends IbTableColumnState {\n  direction: string;\n}\n\nexport interface IbTableTotalRowState extends IbTableColumnState {\n  func: string;\n}\n\nexport interface IbTablePaginatorState {\n  pageIndex?: number;\n  pageSize?: number;\n  length?: number;\n}\n\nexport interface IbTableConfigState {\n  filters?: IbTableFilterState[];\n  totals?: IbTableTotalRowState[];\n  sort?: IbTableSortState;\n  paginator?: IbTablePaginatorState;\n  default?: boolean;\n}\n\nexport interface IbTableState {\n  instances: {\n    tableName: string\n    config: IbTableConfigState\n  }[];\n  selectedConfig?: string;\n}\n\nexport const ibTableFeatureInitialState: IbTableState = {\n  instances: []\n};\n\n\nconst reducer = createReducer(\n  ibTableFeatureInitialState,\n\n  on(TableActions.ibTableActionSetTotalRowCell,\n    (state, newTotalRowState) => {\n      if (!newTotalRowState.tableName) {\n        return { ...state };\n      }\n      const instance = state.instances?.find(i => i.tableName === newTotalRowState.tableName);\n      if (!instance) {\n        return formatFieldState(state, newTotalRowState.tableName, null, { totals: [newTotalRowState.state] });\n      }\n      state.instances.splice(state.instances.indexOf(instance), 1);\n      const rowExists = instance.config?.totals.find(t => t.columnName === newTotalRowState.state.columnName);\n      if (!rowExists) {\n        return formatFieldState(state,\n          newTotalRowState.tableName,\n          instance,\n          { totals: [...(instance.config?.totals || []), newTotalRowState.state] });\n      }\n      return formatFieldState(state, newTotalRowState.tableName, instance,\n        {\n          totals: instance.config.totals.map(\n            t => t.columnName === newTotalRowState.state.columnName\n              ? ({ columnName: newTotalRowState.state.columnName, func: newTotalRowState.state.func })\n              : t\n          )\n        });\n    }\n  ),\n\n  on(TableActions.ibTableActionSetConfig, (state, newConfigData) => {\n    if (!newConfigData.config) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === newConfigData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return {\n      ...state,\n      instances: [\n        ...(state.instances || []),\n        {\n          tableName: newConfigData.tableName,\n          config: newConfigData.config.config\n        }\n      ],\n      selectedConfig: `${newConfigData.tableName}/${newConfigData.config.name}`\n    };\n  }),\n\n  on(TableActions.ibTableActionSaveConfig, (state, saveConfigData) => {\n    return { ...state, selectedConfig: `${saveConfigData.tableName}/${saveConfigData.options.data.name}` };\n  }),\n\n  on(TableActions.ibTableActionSelectSortingField, (state, sortData) => {\n    if (!sortData.tableName) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === sortData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return formatFieldState(state, sortData.tableName, instance, { sort: sortData.options });\n  }),\n\n  on(TableActions.ibTableActionAddFilterField,\n    (state, addFilterState) => {\n      if (!addFilterState.tableName) {\n        return { ...state };\n      }\n      const instance = state.instances?.find(i => i.tableName === addFilterState.tableName);\n      if (!instance) {\n        return formatFieldState(state, addFilterState.tableName, null, { filters: [addFilterState.state] });\n      }\n      state.instances.splice(state.instances.indexOf(instance), 1);\n      const rowExists = instance.config?.filters.find(t => t.columnName === addFilterState.state.columnName);\n      if (!rowExists) {\n        return formatFieldState(state,\n          addFilterState.tableName,\n          instance,\n          { filters: [...(instance.config?.filters || []), addFilterState.state] });\n      }\n      return formatFieldState(state, addFilterState.tableName, instance, {\n        filters: instance.config.filters.map(\n          t => t.columnName === addFilterState.state.columnName\n            ? ({ columnName: addFilterState.state.columnName, value: addFilterState.state.value })\n            : t\n        )\n      });\n    }\n  ),\n\n  on(TableActions.ibTableActionSetPaginator, (state, paginatorData) => {\n    if (!paginatorData.tableName) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === paginatorData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return formatFieldState(state, paginatorData.tableName, instance, { paginator: paginatorData.state });\n  }),\n);\n\n\nexport function ibTableFeatureReducer(state: IbTableState = ibTableFeatureInitialState, action: Action) {\n  return reducer(state, action);\n}\n\n\nfunction formatFieldState(state, tableName, instance, newConfig: IbTableConfigState): IbTableState {\n\n  const instanceConfig: { config: IbTableConfigState, tableName } =\n    { config: { totals: [], sort: null, filters: [], paginator: null }, tableName };\n  for (const k of Object.keys(instanceConfig.config)) {\n    instanceConfig.config[k] = !newConfig[k] ? instance?.config[k] || instanceConfig.config[k] : newConfig[k] || instanceConfig.config[k];\n  }\n  return {\n    ...state,\n    instances: [\n      ...(state.instances || []),\n      instanceConfig\n    ]\n  };\n}\n\n\n",
            "properties": [
                {
                    "name": "direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IbTableColumnState"
        },
        {
            "name": "IbTableState",
            "id": "interface-IbTableState-4483ef2cffb9a59d3bea5e96db88fcc4da5a1a28f6c8cbd08432f1a3485b4b3db00a2f88c4775465affef141cd599dc8d545cf15ef34e7412eb118b8cc5aea72",
            "file": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Sort } from '@angular/material/sort';\nimport { Action, createReducer, on } from '@ngrx/store';\nimport * as TableActions from '../actions/table.actions';\n\nexport const ibTableFeatureKey = 'ibTable';\n\nexport interface IbTableColumnState {\n  columnName: string;\n}\n\nexport interface IbTableFilterState extends IbTableColumnState {\n  value: string;\n}\n\nexport interface IbTableSortState extends IbTableColumnState {\n  direction: string;\n}\n\nexport interface IbTableTotalRowState extends IbTableColumnState {\n  func: string;\n}\n\nexport interface IbTablePaginatorState {\n  pageIndex?: number;\n  pageSize?: number;\n  length?: number;\n}\n\nexport interface IbTableConfigState {\n  filters?: IbTableFilterState[];\n  totals?: IbTableTotalRowState[];\n  sort?: IbTableSortState;\n  paginator?: IbTablePaginatorState;\n  default?: boolean;\n}\n\nexport interface IbTableState {\n  instances: {\n    tableName: string\n    config: IbTableConfigState\n  }[];\n  selectedConfig?: string;\n}\n\nexport const ibTableFeatureInitialState: IbTableState = {\n  instances: []\n};\n\n\nconst reducer = createReducer(\n  ibTableFeatureInitialState,\n\n  on(TableActions.ibTableActionSetTotalRowCell,\n    (state, newTotalRowState) => {\n      if (!newTotalRowState.tableName) {\n        return { ...state };\n      }\n      const instance = state.instances?.find(i => i.tableName === newTotalRowState.tableName);\n      if (!instance) {\n        return formatFieldState(state, newTotalRowState.tableName, null, { totals: [newTotalRowState.state] });\n      }\n      state.instances.splice(state.instances.indexOf(instance), 1);\n      const rowExists = instance.config?.totals.find(t => t.columnName === newTotalRowState.state.columnName);\n      if (!rowExists) {\n        return formatFieldState(state,\n          newTotalRowState.tableName,\n          instance,\n          { totals: [...(instance.config?.totals || []), newTotalRowState.state] });\n      }\n      return formatFieldState(state, newTotalRowState.tableName, instance,\n        {\n          totals: instance.config.totals.map(\n            t => t.columnName === newTotalRowState.state.columnName\n              ? ({ columnName: newTotalRowState.state.columnName, func: newTotalRowState.state.func })\n              : t\n          )\n        });\n    }\n  ),\n\n  on(TableActions.ibTableActionSetConfig, (state, newConfigData) => {\n    if (!newConfigData.config) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === newConfigData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return {\n      ...state,\n      instances: [\n        ...(state.instances || []),\n        {\n          tableName: newConfigData.tableName,\n          config: newConfigData.config.config\n        }\n      ],\n      selectedConfig: `${newConfigData.tableName}/${newConfigData.config.name}`\n    };\n  }),\n\n  on(TableActions.ibTableActionSaveConfig, (state, saveConfigData) => {\n    return { ...state, selectedConfig: `${saveConfigData.tableName}/${saveConfigData.options.data.name}` };\n  }),\n\n  on(TableActions.ibTableActionSelectSortingField, (state, sortData) => {\n    if (!sortData.tableName) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === sortData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return formatFieldState(state, sortData.tableName, instance, { sort: sortData.options });\n  }),\n\n  on(TableActions.ibTableActionAddFilterField,\n    (state, addFilterState) => {\n      if (!addFilterState.tableName) {\n        return { ...state };\n      }\n      const instance = state.instances?.find(i => i.tableName === addFilterState.tableName);\n      if (!instance) {\n        return formatFieldState(state, addFilterState.tableName, null, { filters: [addFilterState.state] });\n      }\n      state.instances.splice(state.instances.indexOf(instance), 1);\n      const rowExists = instance.config?.filters.find(t => t.columnName === addFilterState.state.columnName);\n      if (!rowExists) {\n        return formatFieldState(state,\n          addFilterState.tableName,\n          instance,\n          { filters: [...(instance.config?.filters || []), addFilterState.state] });\n      }\n      return formatFieldState(state, addFilterState.tableName, instance, {\n        filters: instance.config.filters.map(\n          t => t.columnName === addFilterState.state.columnName\n            ? ({ columnName: addFilterState.state.columnName, value: addFilterState.state.value })\n            : t\n        )\n      });\n    }\n  ),\n\n  on(TableActions.ibTableActionSetPaginator, (state, paginatorData) => {\n    if (!paginatorData.tableName) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === paginatorData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return formatFieldState(state, paginatorData.tableName, instance, { paginator: paginatorData.state });\n  }),\n);\n\n\nexport function ibTableFeatureReducer(state: IbTableState = ibTableFeatureInitialState, action: Action) {\n  return reducer(state, action);\n}\n\n\nfunction formatFieldState(state, tableName, instance, newConfig: IbTableConfigState): IbTableState {\n\n  const instanceConfig: { config: IbTableConfigState, tableName } =\n    { config: { totals: [], sort: null, filters: [], paginator: null }, tableName };\n  for (const k of Object.keys(instanceConfig.config)) {\n    instanceConfig.config[k] = !newConfig[k] ? instance?.config[k] || instanceConfig.config[k] : newConfig[k] || instanceConfig.config[k];\n  }\n  return {\n    ...state,\n    instances: [\n      ...(state.instances || []),\n      instanceConfig\n    ]\n  };\n}\n\n\n",
            "properties": [
                {
                    "name": "instances",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "selectedConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 42
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IbTableTotalRowState",
            "id": "interface-IbTableTotalRowState-4483ef2cffb9a59d3bea5e96db88fcc4da5a1a28f6c8cbd08432f1a3485b4b3db00a2f88c4775465affef141cd599dc8d545cf15ef34e7412eb118b8cc5aea72",
            "file": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Sort } from '@angular/material/sort';\nimport { Action, createReducer, on } from '@ngrx/store';\nimport * as TableActions from '../actions/table.actions';\n\nexport const ibTableFeatureKey = 'ibTable';\n\nexport interface IbTableColumnState {\n  columnName: string;\n}\n\nexport interface IbTableFilterState extends IbTableColumnState {\n  value: string;\n}\n\nexport interface IbTableSortState extends IbTableColumnState {\n  direction: string;\n}\n\nexport interface IbTableTotalRowState extends IbTableColumnState {\n  func: string;\n}\n\nexport interface IbTablePaginatorState {\n  pageIndex?: number;\n  pageSize?: number;\n  length?: number;\n}\n\nexport interface IbTableConfigState {\n  filters?: IbTableFilterState[];\n  totals?: IbTableTotalRowState[];\n  sort?: IbTableSortState;\n  paginator?: IbTablePaginatorState;\n  default?: boolean;\n}\n\nexport interface IbTableState {\n  instances: {\n    tableName: string\n    config: IbTableConfigState\n  }[];\n  selectedConfig?: string;\n}\n\nexport const ibTableFeatureInitialState: IbTableState = {\n  instances: []\n};\n\n\nconst reducer = createReducer(\n  ibTableFeatureInitialState,\n\n  on(TableActions.ibTableActionSetTotalRowCell,\n    (state, newTotalRowState) => {\n      if (!newTotalRowState.tableName) {\n        return { ...state };\n      }\n      const instance = state.instances?.find(i => i.tableName === newTotalRowState.tableName);\n      if (!instance) {\n        return formatFieldState(state, newTotalRowState.tableName, null, { totals: [newTotalRowState.state] });\n      }\n      state.instances.splice(state.instances.indexOf(instance), 1);\n      const rowExists = instance.config?.totals.find(t => t.columnName === newTotalRowState.state.columnName);\n      if (!rowExists) {\n        return formatFieldState(state,\n          newTotalRowState.tableName,\n          instance,\n          { totals: [...(instance.config?.totals || []), newTotalRowState.state] });\n      }\n      return formatFieldState(state, newTotalRowState.tableName, instance,\n        {\n          totals: instance.config.totals.map(\n            t => t.columnName === newTotalRowState.state.columnName\n              ? ({ columnName: newTotalRowState.state.columnName, func: newTotalRowState.state.func })\n              : t\n          )\n        });\n    }\n  ),\n\n  on(TableActions.ibTableActionSetConfig, (state, newConfigData) => {\n    if (!newConfigData.config) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === newConfigData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return {\n      ...state,\n      instances: [\n        ...(state.instances || []),\n        {\n          tableName: newConfigData.tableName,\n          config: newConfigData.config.config\n        }\n      ],\n      selectedConfig: `${newConfigData.tableName}/${newConfigData.config.name}`\n    };\n  }),\n\n  on(TableActions.ibTableActionSaveConfig, (state, saveConfigData) => {\n    return { ...state, selectedConfig: `${saveConfigData.tableName}/${saveConfigData.options.data.name}` };\n  }),\n\n  on(TableActions.ibTableActionSelectSortingField, (state, sortData) => {\n    if (!sortData.tableName) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === sortData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return formatFieldState(state, sortData.tableName, instance, { sort: sortData.options });\n  }),\n\n  on(TableActions.ibTableActionAddFilterField,\n    (state, addFilterState) => {\n      if (!addFilterState.tableName) {\n        return { ...state };\n      }\n      const instance = state.instances?.find(i => i.tableName === addFilterState.tableName);\n      if (!instance) {\n        return formatFieldState(state, addFilterState.tableName, null, { filters: [addFilterState.state] });\n      }\n      state.instances.splice(state.instances.indexOf(instance), 1);\n      const rowExists = instance.config?.filters.find(t => t.columnName === addFilterState.state.columnName);\n      if (!rowExists) {\n        return formatFieldState(state,\n          addFilterState.tableName,\n          instance,\n          { filters: [...(instance.config?.filters || []), addFilterState.state] });\n      }\n      return formatFieldState(state, addFilterState.tableName, instance, {\n        filters: instance.config.filters.map(\n          t => t.columnName === addFilterState.state.columnName\n            ? ({ columnName: addFilterState.state.columnName, value: addFilterState.state.value })\n            : t\n        )\n      });\n    }\n  ),\n\n  on(TableActions.ibTableActionSetPaginator, (state, paginatorData) => {\n    if (!paginatorData.tableName) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === paginatorData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return formatFieldState(state, paginatorData.tableName, instance, { paginator: paginatorData.state });\n  }),\n);\n\n\nexport function ibTableFeatureReducer(state: IbTableState = ibTableFeatureInitialState, action: Action) {\n  return reducer(state, action);\n}\n\n\nfunction formatFieldState(state, tableName, instance, newConfig: IbTableConfigState): IbTableState {\n\n  const instanceConfig: { config: IbTableConfigState, tableName } =\n    { config: { totals: [], sort: null, filters: [], paginator: null }, tableName };\n  for (const k of Object.keys(instanceConfig.config)) {\n    instanceConfig.config[k] = !newConfig[k] ? instance?.config[k] || instanceConfig.config[k] : newConfig[k] || instanceConfig.config[k];\n  }\n  return {\n    ...state,\n    instances: [\n      ...(state.instances || []),\n      instanceConfig\n    ]\n  };\n}\n\n\n",
            "properties": [
                {
                    "name": "func",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IbTableColumnState"
        },
        {
            "name": "IbUserExample",
            "id": "interface-IbUserExample-4b9b9ba69efb731061de779998ba10e59e12db9bcfb3bf1d9a382df9b6a539ad7763e27159f8e424e8c791a0fd001b0092e83131fba3e7d8558e1110521eef0e",
            "file": "src/app/examples/kai-table-example/users.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IbUserExample {\n  id: string;\n  name: string;\n  fruit: string;\n  number: number;\n  aDate?: Date;\n  aDateString?: string;\n}\n\nconst FRUITS: string[] = [\n  'blueberry',\n  'lychee',\n  'kiwi',\n  'mango',\n  'peach',\n  'lime',\n  'pomegranate',\n  'pineapple',\n  'banana',\n  'apple',\n  'pear',\n  'orange',\n];\nconst NAMES: string[] = [\n  'Maia',\n  'Asher',\n  'Olivia',\n  'Atticus',\n  'Amelia',\n  'Jack',\n  'Charlotte',\n  'Theodore',\n  'Isla',\n  'Oliver',\n  'Isabella',\n  'Jasper',\n  'Cora',\n  'Levi',\n  'Violet',\n  'Arthur',\n  'Mia',\n  'Thomas',\n  'Elizabeth',\n  'Alice'\n];\n\nconst minDate = new Date().setMonth(new Date().getMonth() - 2)\nconst maxDate = new Date().setMonth(new Date().getMonth() + 2)\nexport function createNewUser(id: number): IbUserExample {\n  const name =\n    NAMES[Math.round(Math.random() * (NAMES.length - 1))] +\n    ' ' +\n    NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) +\n    '.';\n\n  return {\n    id: id.toString(),\n    name,\n    fruit: FRUITS[Math.round(Math.random() * (FRUITS.length - 1))],\n    number: Math.round(Math.random() * 22) + 1,\n    aDate: getRandomDate(minDate, maxDate),\n    aDateString: '2023-01-01T12:53:12.000Z'\n  };\n}\n\nfunction getRandomDate(startDate, endDate) {\n  // Convert the start and end dates to milliseconds\n  const startMs = startDate;\n  const endMs = endDate;\n\n  // Generate a random number between startMs and endMs\n  const randomMs = Math.random() * (endMs - startMs) + startMs;\n\n  // Create a new Date object using the random milliseconds\n  const randomDate = new Date(randomMs);\n\n  return randomDate;\n}",
            "properties": [
                {
                    "name": "aDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "aDateString",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "fruit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ICounterState",
            "id": "interface-ICounterState-3a688e4fdd6bcdb5b4d79c8e53fc037d24f306d8a71aecfe0f73b06437a994000bb8d5b6f8312e3d800ce523dd172d333fae121539363e4daa717045b50d1bf4",
            "file": "src/app/examples/redux-example/counter.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Action, createReducer, on} from '@ngrx/store';\nimport { CounterActions } from './counter.action';\n\nconsole.log('CounterActions.increment', CounterActions.increment);\nexport interface ICounterState {\n  number: number;\n}\n\nexport const INITIAL_COUNTER_STATE: ICounterState = {\n  number: 0\n};\n\nconst mainCounterReducer = createReducer(INITIAL_COUNTER_STATE,\n  on(CounterActions.increment, state => ({ ...state, number: state.number + 1 })),\n  on(CounterActions.decrement, state => ({ ...state, number: state.number - 1 })),\n  on(CounterActions.reset, state => ({ ...state, number: 0 })),\n  on(CounterActions.addingNumber, (state, { numberToAdd }) => ({ number: state.number + numberToAdd}))\n);\n\nexport function counterReducer(state: ICounterState = INITIAL_COUNTER_STATE, action: Action) {\n  return mainCounterReducer(state, action);\n}\n",
            "properties": [
                {
                    "name": "number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IExampleState",
            "id": "interface-IExampleState-9c12e96b0bfcfec3d6e8cba320e8228d7522ca980a69c516ef9311c453db5c90728e2b83a12cb9215f07be0e245003601ef471e6b08fe052da7a86b80ae04c82",
            "file": "src/app/examples/lazy-loaded/store/example/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IExampleState{\n    value: string;\n}\n",
            "properties": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ILazyLoadedStore",
            "id": "interface-ILazyLoadedStore-2fed1127404be46ceee1ca65d6169c6ed78c341077b351a9065d0cf481dee2a238e136c4ce5841e9311019c102367b540d9fee5be45343133040b3b4399eccd5",
            "file": "src/app/examples/lazy-loaded/store/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap } from '@ngrx/store';\nimport { IExampleState } from './example/interfaces';\nimport { exampleReducer } from './example/reducers';\nimport { ExampleEffects } from \"./example/effects\";\n\nexport const lazyLoadedFeatureKey = 'lazyLoaded';\n\nexport interface ILazyLoadedStore{\n    example: IExampleState;\n}\n\nexport const lazyLoadedReducers: ActionReducerMap<ILazyLoadedStore> = {\n    example: exampleReducer,\n};\n\nexport const lazyLoadedEffects = [\n    ExampleEffects,\n]\n",
            "properties": [
                {
                    "name": "example",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IExampleState",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ISessionState",
            "id": "interface-ISessionState-a2319396856a14690c7bd188a29a57121b96e8c9f144552586e4228ac0ca1377c44344da7858609d894e06fe1f2eb9c84476d4c3af5161bdcaa14979adebd368",
            "file": "src/app/inobeta-ui/http/auth/redux/session.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {IbSession} from '../session.model';\nimport {Action, createReducer, on} from '@ngrx/store';\nimport * as SessionActions from './session.actions';\n\nexport interface ISessionState {\n  activeSession: IbSession;\n}\n\nexport const INITIAL_SESSION_STATE: ISessionState = {\n  activeSession: null\n};\n\nconst mainSessionReducer = createReducer(INITIAL_SESSION_STATE,\n  on(SessionActions.login, (state, { activeSession }) => ({ activeSession})),\n  on(SessionActions.logout, state => ({ ...state, activeSession: null })),\n  on(SessionActions.changeNameSurname, (state, {name, surname}) => ({ ...state, activeSession: {\n      ...state.activeSession,\n      userData: {\n        ...state.activeSession.userData,\n        name,\n        surname\n      }\n    } }))\n);\n\nexport function ibSessionReducer(state: ISessionState = INITIAL_SESSION_STATE, action: Action) {\n  return mainSessionReducer(state, action);\n}\n",
            "properties": [
                {
                    "name": "activeSession",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbSession",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IStickyColumnData",
            "id": "interface-IStickyColumnData-61948086aa142546bb6d4bf658bf9478aa4b610584423bb2dcba524b22f9eeddc53603e65783f8e8da22401b08b4e5552da0f763a57a4c9d8a083751db9e39b6",
            "file": "src/app/inobeta-ui/ui/table/directives/sticky-area/sticky-area.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IbTableTitles } from \"../../models/titles.model\";\n\ninterface IStickyColumnData {\n  key?: string;\n  sticky?: string | boolean;\n}\n\nexport type StickyColumnData = IStickyColumnData | IbTableTitles;",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "sticky",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ITableFiltersState",
            "id": "interface-ITableFiltersState-c40378f4338a8e9db2b39e01073c32b4f34f96dc29509eecebb0cda93b7de20633b68d30d2510c6961647947c4b7d7f39355c8fa83e2e39bbad7397a76c5ceb1",
            "file": "src/app/inobeta-ui/ui/table/redux/table.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Action, createReducer, on} from '@ngrx/store';\nimport * as TableFiltersActions from './table.action';\n\nexport interface ITableFiltersState {\n  tableFilters: any;\n}\n\nexport const INITIAL_TABLE_FILTERS_STATE: ITableFiltersState = {\n  tableFilters: {}\n};\n\nconst mainTableFiltersReducer = createReducer(INITIAL_TABLE_FILTERS_STATE,\n  on(TableFiltersActions.resetFilters, state => ({...state, tableFilters: {}})),\n  on(TableFiltersActions.addFilterToTable, (state, {tableName, filterName, filterValue}) => {\n    let obj;\n    if (state.tableFilters[tableName]) {\n      if (state.tableFilters[tableName][filterName]) {\n        state.tableFilters[tableName][filterName].value = filterValue;\n      } else {\n        obj = {\n          value: filterValue\n        };\n        state.tableFilters[tableName][filterName] = obj;\n      }\n    } else {\n      obj = {};\n      obj[filterName] = {value: filterValue};\n      state.tableFilters[tableName] = obj;\n    }\n    return {\n      ...state\n    };\n  }),\non(TableFiltersActions.addSortToTable, (state, {tableName, sortType/*, emitChange*/}) => {\n    if (state.tableFilters[tableName]) {\n      state.tableFilters[tableName].sortType = sortType;\n    } else {\n      state.tableFilters[tableName] = {\n        sortType\n      };\n    }\n    return {\n      ...state\n    };\n  }),\n  on(TableFiltersActions.addPaginatorFiltersToTable, (state, {tableName, previousPageIndex, pageIndex, pageSize, lengthP}) => {\n    const obj = {\n      paginatorFilters: {\n        previousPageIndex,\n        pageIndex,\n        pageSize,\n        lengthP\n      }\n    };\n\n    if (state.tableFilters[tableName]) {\n      state.tableFilters[tableName].paginatorFilters = obj.paginatorFilters;\n    } else {\n      state.tableFilters[tableName] = obj;\n    }\n    return {\n      ...state\n    };\n  })\n);\n\nexport function ibTableFiltersReducer(state: ITableFiltersState = INITIAL_TABLE_FILTERS_STATE, action: Action) {\n  return mainTableFiltersReducer(state, action);\n}\n",
            "properties": [
                {
                    "name": "tableFilters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MyCustomTextboxParams",
            "id": "interface-MyCustomTextboxParams-00f665eba68fdadd29f0c81964fecc47747e87e34411b4a05e2e7ac29b7331492251bbdf660bffe116136c2ac8b484cb4083cb7327a5991ca8ca26a08fec7b49",
            "file": "src/app/examples/dynamic-forms-example/my-custom-textbox.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IbFormControlBase, IbFormControlBaseParams, IbFormControlInterface, IbFormControlBaseComponent } from 'src/app/inobeta-ui/ui/forms';\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: '[ib-my-custom-textbox]',\n  template: `\n  <mat-form-field appearance=\"fill\" style=\"width: 100%;\" [formGroup]=\"data.form\">\n    <mat-label>{{data.base.label | translate}} {{data.base.testField}}</mat-label>\n    <input\n      matInput\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      [type]=\"data.base.type\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n    />\n    <mat-icon style=\"cursor:pointer;color:#666;\" matSuffix (click)=\"data.form.controls[data.base.key].reset()\">{{'clear'}}</mat-icon>\n    <mat-error>\n      <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n    </mat-error>\n  </mat-form-field>\n  `\n})\n\nexport class MyCustomTextboxComponent implements IbFormControlInterface {\n  @Input() data: any;\n}\n\n\nexport class MyCustomTextbox extends IbFormControlBase<string>{\n  testField = 'Questa è una prova';\n  constructor(options: MyCustomTextboxParams){\n    super(options)\n    this.testField = options.testField;\n    this.control = new IbFormControlBaseComponent(MyCustomTextboxComponent, {\n      base: this\n    })\n  }\n}\n\nexport interface MyCustomTextboxParams extends IbFormControlBaseParams<string> {\n  testField: string;\n}\n\n\n",
            "properties": [
                {
                    "name": "testField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IbFormControlBaseParams"
        },
        {
            "name": "Navigator",
            "id": "interface-Navigator-8dc58b00d9758de272182c1ccef1792900fce4cd0533b341498f0c3ccbcb033b01755a8ba80681117b85ae389a25b0900ffd252e4bdb1ea65e21a7391bc2aac8",
            "file": "src/app/inobeta-ui/ui/table/table.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "declare global{\n  interface Navigator {\n    msSaveBlob: (blob: Blob, filename: string) => void\n  }\n}\n\nimport { Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { Sort } from '@angular/material/sort';\nimport { IbStickyAreas, IbTableAction, IbTableActionsPosition, IbTableCellAligns, IbTableTitles, IbTableTitlesTypes } from './models/titles.model';\nimport { IbTemplateModel } from './models/template.model';\nimport { Store } from '@ngrx/store';\nimport Papa from 'papaparse';\nimport jsPDF, { jsPDFOptions } from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport * as XLSX from 'xlsx';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IbTableItem } from './models/table-item.model';\nimport { UntypedFormBuilder, UntypedFormControl, UntypedFormGroup } from '@angular/forms';\nimport { formatDate } from '@angular/common';\nimport { ibTableSelectFilters, ibTableSelectPaginator, ibTableSelectSort, ibTableSelectTotalRow } from './store/selectors/table.selectors';\nimport { ibTableActionAddFilterField, ibTableActionLoadConfig, ibTableActionSelectSortingField, ibTableActionSetPaginator } from './store/actions/table.actions';\nimport { Router } from '@angular/router';\nimport { Observable, Subscription } from 'rxjs';\nimport { IbTableTotalRowState } from './store/reducers/table.reducer';\n\n@Component({\n  selector: 'ib-table',\n  template: `\n    <div fxLayout=\"column\" class=\"ib-table\" >\n      <div\n        fxFlex\n        ib-table-actions\n        fxLayout=\"row\"\n        fxLayoutAlign=\"end center\"\n        fxLayoutGap=\"20px\"\n        [structureTemplates]=\"structureTemplates\"\n        [context]=\"this\"\n        [hasAdd]=\"hasAdd\"\n        [hasExport]=\"hasExport\"\n        [selectableRows]=\"selectableRows\"\n        [ngStyle]=\"{\n          'padding-bottom': (actions.length > 0 || hasAdd || hasExport) ? '5px' : '0px'\n        }\"\n        [actions]=\"actions\"\n        *ngIf=\"[ibTableActionsPosition.BOTH, ibTableActionsPosition.TOP].indexOf(actionsPosition) > -1\"\n        (add)=\"add.emit()\"\n        (export)=\"export($event)\"\n      >\n      </div>\n      <div class=\"ib-table-container\"\n        [ngStyle]=\"{\n          'overflow-x': (stickyAreas.length > 0) ? 'unset' : 'auto'\n        }\"\n      >\n        <table\n          matSort\n          (matSortChange)=\"sortData($event)\"\n          [matSortActive]=\"currentSort ? currentSort.active : null\"\n          [matSortDirection]=\"currentSort ? currentSort.direction : null\"\n          style=\"width:100%;\" cellpadding=\"0\" cellspacing=\"0\">\n\n          <!--HEADER-->\n          <thead [class.ib-header-sticky]=\"stickyAreas.includes(ibStickyArea.HEADER)\">\n            <tr class=\"table-header\"\n              ib-table-header\n              [table]=\"this\"\n              [titles]=\"titles\"\n              [selectableRows]=\"selectableRows\"\n              [templateHeaders]=\"templateHeaders\"\n              [templateButtons]=\"templateButtons\"\n              [columnFilter]=\"columnFilter\"\n              [hasEdit]=\"hasEdit\"\n              [hasDelete]=\"hasDelete\"\n              [hasConfig]=\"hasConfig\"\n              [currentSort]=\"currentSort\"\n              (handleSetFilter)=\"setFilter($event.key, $event.value, $event.indexToSet)\"\n              [stickyAreas]=\"stickyAreas\"\n              [tableName]=\"tableName\"\n            ></tr>\n          </thead>\n\n          <!--ROWS-->\n          <tbody\n          >\n            <tr\n              ib-table-row\n              class=\"table-row\"\n              [ngClass]=\"rowClass(item)\"\n              [iconSet]=\"rowIconSet\"\n              *ngFor=\"let item of sortedData\"\n              [item]=\"item\"\n              [titles]=\"titles\"\n              [customItemTemplate]=\"customItemTemplate\"\n              [selectableRows]=\"selectableRows\"\n              [templateButtons]=\"templateButtons\"\n              [formRow]=\"rowForm(item)\"\n              [hasEdit]=\"hasEdit\"\n              [hasDelete]=\"hasDelete\"\n              [deleteConfirm]=\"deleteConfirm\"\n              [stickyAreas]=\"stickyAreas\"\n              (rowChecked)=\"rowChecked.emit($event)\"\n              (click)=\"rowClicked.emit(item)\"\n              (edit)=\"edit.emit($event)\"\n              (delete)=\"delete.emit($event)\"\n            >\n            </tr>\n\n          <tr *ngIf=\"sortedData.length === 0\">\n            <td\n              [attr.colspan]=\"titles.length + templateButtons.length + (selectableRows ? 1 : 0) + (hasEdit ? 1 : 0) + (hasDelete ? 1 : 0) + 1\"\n              style=\"text-align: center;\"\n            >\n              <br><br>{{ 'shared.ibTable.noData' | translate }}<br><br>\n            </td>\n          </tr>\n\n          <tr\n            ib-table-total-row\n            *ngIf=\"hasFooter\"\n            class=\"table-row\"\n            [class.ib-footer-sticky]=\"stickyAreas.includes(ibStickyArea.FOOTER)\"\n            [titles]=\"titles\"\n            [selectableRows]=\"selectableRows\"\n            [templateButtons]=\"templateButtons\"\n            [hasEdit]=\"hasEdit\"\n            [sortedData]=\"sortedData\"\n            [filteredData]=\"filteredData\"\n            [hasDelete]=\"hasDelete\"\n            [totalRowDef]=\"totalRow$ | async\"\n            [tableName]=\"tableName\"\n            ></tr>\n          </tbody>\n        </table>\n      </div>\n      <ng-container\n        *ngTemplateOutlet=\"((structureTemplates['paginatorTemplate'] != null) ? structureTemplates['paginatorTemplate'] : defaultPaginatorTemplate);\n        context: this\"\n      ></ng-container>\n      <ng-template #defaultPaginatorTemplate>\n        <ib-table-paginator\n          *ngIf=\"hasPaginator\"\n          [numOfElements]=\"numOfElements\"\n          [paginationInfo]=\"currentPagination\"\n          (pageChangeHandle)=\"pageChangeHandle($event)\"\n          [elemForPage]=\"currentPagination.pageSize\">\n        </ib-table-paginator>\n      </ng-template>\n      <div\n        fxFlex\n        ib-table-actions\n        fxLayout=\"row\"\n        fxLayoutAlign=\"end center\"\n        fxLayoutGap=\"20px\"\n        [structureTemplates]=\"structureTemplates\"\n        [context]=\"this\"\n        [hasAdd]=\"hasAdd\"\n        [hasExport]=\"hasExport\"\n        [selectableRows]=\"selectableRows\"\n        [actions]=\"actions\"\n        *ngIf=\"[ibTableActionsPosition.BOTH, ibTableActionsPosition.BOTTOM].indexOf(actionsPosition) > -1\"\n        (add)=\"add.emit()\"\n        (export)=\"export($event)\"\n      >\n      </div>\n    </div>\n  `,\n  styleUrls: ['./table.component.css']\n})\nexport class IbTableComponent implements OnChanges, OnInit, OnDestroy {\n\n  // input necessari\n  @Input() customItemTemplate: any;\n  @Input() titles: IbTableTitles[] = [];\n  @Input() items: IbTableItem[] = [];\n\n  /**\n   * @deprecated enableReduxStore will be removed, please use hasConfig instead\n   */\n  @Input() enableReduxStore = false;\n  @Input() currentSort: any = {}; // this input can override redux store. Can we remove it?\n  @Input() selectableRows = true;\n\n  /**\n   * @deprecated hasAdd will be removed, please use actions instead\n   */\n  @Input() hasAdd = false;\n  /**\n   * @deprecated hasEdit will be removed, please use useContextColumn instead\n   */\n  @Input() hasEdit = false;\n  /**\n   * @deprecated hasDelete will be removed, please use useContextColumn instead\n   */\n  @Input() hasDelete = false;\n  @Input() hasExport = false;\n\n  /**\n   * @deprecated hasPaginator will be removed, please use tableDef.paginator.hide instead\n   */\n  @Input() hasPaginator = true;\n  @Input() hasFooter = true;\n  @Input() hasConfig = true;\n  @Input() actions: IbTableAction[] = [];\n  @Input() stickyAreas = [];\n\n  @Input() structureTemplates = {}; // exportTemplate, paginatorTemplate\n  /**\n   * @deprecated templateButtons will be removed, please use useContextColumn instead\n   */\n  @Input() templateButtons: IbTemplateModel[] = [];\n  @Input() templateHeaders: any = {};\n  /** { columnName: TemplateRef } */\n  @Input() tableName = '';\n  @Input() pdfCustomStyles = {};\n  @Input() pdfSetup: jsPDFOptions = {\n    orientation: 'l',\n    unit: null,\n    format: null\n  };\n\n  /**\n   * @deprecated deleteConfirm will be removed, please use useContextColumn instead\n   */\n  @Input() deleteConfirm = true;\n  @Input() actionsPosition = IbTableActionsPosition.BOTH;\n  defaultIconSet = {\n    edit: 'edit',\n    delete: 'delete'\n  };\n\n  /**\n   * @deprecated iconSet will be removed, please use useContextColumn instead\n   */\n  @Input() iconSet = this.defaultIconSet;\n  rowIconSet = Object.assign({}, this.defaultIconSet);\n  // Output necessari\n  @Output() filterChange: EventEmitter<any> = new EventEmitter<any>();\n  /** deprecated\n   * Obsolete, use effects interception instead\n   */\n  @Output() sortChange: EventEmitter<any> = new EventEmitter<any>();\n\n\n  /**\n   * @deprecated add will be removed, please use actions instead\n   */\n  @Output() add: EventEmitter<any> = new EventEmitter<any>();\n  /**\n   * @deprecated edit will be removed, please use useContextColumn instead\n   */\n  @Output() edit: EventEmitter<any> = new EventEmitter<any>();\n  /**\n   * @deprecated delete will be removed, please use useContextColumn instead\n   */\n  @Output() delete: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * @deprecated rowClicked will be removed, please use ibRowClicked instead\n   */\n  @Output() rowClicked: EventEmitter<any> = new EventEmitter<any>();\n  @Output() rowChecked: EventEmitter<any> = new EventEmitter<any>();\n\n  /*objectKeys = Object.keys;*/\n  filterableTitles: IbTableTitles[] = [];\n  typeEnum = IbTableTitlesTypes;\n  alignEnum = IbTableCellAligns;\n  sortedData: IbTableItem[];\n  filteredData: IbTableItem[];\n  currentPagination: any = {};\n  columnFilter = {};\n  numOfElements = 0;\n  rowForms: UntypedFormGroup[] = [];\n  ibTableActionsPosition = IbTableActionsPosition;\n  ibStickyArea = IbStickyAreas;\n  totalRow$ = new Observable<IbTableTotalRowState[]>();\n  private _paginatorSub: Subscription;\n  private _filterSub: Subscription;\n  private _sortSub: Subscription;\n  @Input() rowClass = (item: IbTableItem) => ({});\n\n\n  constructor(\n    private store: Store<any>,\n    private translate: TranslateService,\n    private fb: UntypedFormBuilder,\n    private router: Router\n    ) { }\n\n  ngOnInit() {\n    if(!this.tableName){\n      const fullUrl = this.router['location']._platformLocation?.location.pathname;\n      console.warn(`[ibTable] please set a unique tableName input value or ${fullUrl} will be used as unique key for config storage`);\n      this.tableName = fullUrl;\n    }\n    this.store.dispatch(ibTableActionLoadConfig({ configName: null, tableName: this.tableName }));\n\n    this.totalRow$ = this.store.select(ibTableSelectTotalRow(this.tableName));\n\n    this._paginatorSub = this.store.select(ibTableSelectPaginator(this.tableName)).subscribe(paginator => {\n      this.currentPagination = {\n        pageIndex: paginator?.pageIndex || 0,\n        pageSize: paginator?.pageSize || 10,\n        length: paginator?.length,\n      };\n    });\n\n    this._sortSub = this.store.select(ibTableSelectSort(this.tableName))\n      .subscribe(sort => {\n        this.currentSort = {\n          active: sort?.columnName,\n          direction: sort?.direction,\n        };\n        this._sortData(this.currentSort);\n    });\n\n    this._filterSub = this.store.select(ibTableSelectFilters(this.tableName)).subscribe(data => {\n      if (!data) {\n        return;\n      }\n      this.resetFilters();\n      data.forEach(f => this.setFilter(f.columnName, f.value, this.currentPagination.pageIndex || 0, false, this.tableName));\n      this.pageChangeHandle(this.currentPagination);\n    });\n  }\n\n  ngOnDestroy() {\n    this._paginatorSub.unsubscribe();\n    this._filterSub.unsubscribe();\n    this._sortSub.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.iconSet && changes.iconSet.currentValue){\n      this.rowIconSet = Object.assign({}, this.defaultIconSet, changes.iconSet.currentValue);\n    }\n\n    let triggerRefresh = false;\n    if (changes.items && changes.items.currentValue) {\n      this.items = changes.items.currentValue;\n      this.sortedData = this.items.slice();\n      triggerRefresh = true;\n      this.rowForms = [];\n      for (const i of this.items) {\n        const rowGroup = {\n          isChecked: new UntypedFormControl(i.ibTableItemSelected),\n        };\n        for (const k of this.titles.map(h => h.key)) {\n          rowGroup[k] = new UntypedFormControl(i[k]);\n        }\n        this.rowForms.push(this.fb.group(rowGroup));\n      }\n    }\n\n    if (changes.titles && changes.titles.currentValue) {\n      this.filterableTitles = changes.titles.currentValue.filter(el => el.filterable);\n    }\n\n    if (changes.currentSort && changes.currentSort.currentValue) {\n      this.currentSort = changes.currentSort.currentValue;\n      triggerRefresh = true;\n    }\n\n    if (triggerRefresh) {\n      this.pageChangeHandle(this.currentPagination);\n    }\n  }\n\n  rowForm(item) {\n    return this.rowForms[this.items.indexOf(item)];\n  }\n\n  getFormValues(dataset = 'all') {\n    let filteredData = this.sortedData;\n\n    if (dataset === 'selected') {\n      filteredData = this.getSelectedRows();\n    }\n\n    const rowData = [];\n    for (const i of filteredData) {\n      rowData.push(this.rowForm(i).value);\n    }\n    return rowData;\n  }\n\n  isValidForm() {\n    for (const r of this.rowForms) {\n      if (!r.valid) { return false; }\n    }\n    return true;\n  }\n\n  sortData(sort: Sort, emitChange: boolean = true) {\n    this.store.dispatch(ibTableActionSelectSortingField({\n      tableName: this.tableName,\n      options: {\n        direction: sort.direction,\n        columnName: sort.active\n      }\n    }));\n  }\n\n  _sortData(sort: Sort, emitChange: boolean = true) {\n    if (emitChange) {\n      this.sortChange.emit(sort);\n    }\n    this.currentSort = sort;\n\n    this.sortedData = this.items.slice();\n\n    for (const k in this.columnFilter) {\n      if (!this.columnFilter[k] && this.columnFilter[k] !== false) {\n        delete this.columnFilter[k];\n      }\n    }\n    if (Object.keys(this.columnFilter).length > 0) {\n\n      this.sortedData = this.sortedData.filter(el => {\n        let include = true;\n        // tslint:disable-next-line: forin\n        for (const k in this.columnFilter) {\n          /*TODO INSERT COLUMN TYPE HERE */\n          switch (this.titles.find(t => t.key === k).type) {\n            case IbTableTitlesTypes.ANY:\n              const translated = this.translate.instant(el[k]);\n              if (!(translated && translated.includes && translated.toLowerCase().includes(this.columnFilter[k].toLowerCase()))) {\n                include = false;\n              }\n              break;\n            case IbTableTitlesTypes.STRING:\n            case IbTableTitlesTypes.CUSTOM:\n              if (!(el[k] && el[k].includes && el[k].toLowerCase().includes(this.columnFilter[k].toLowerCase()))) {\n                include = false;\n              }\n              break;\n            case IbTableTitlesTypes.NUMBER:\n            case IbTableTitlesTypes.INPUT_NUMBER:\n              for (const cond of this.columnFilter[k]) {\n                include = eval(`(${el[k]} ${cond.condition} ${cond.value})`);\n                if (!include) {\n                  break;\n                }\n              }\n              break;\n            case IbTableTitlesTypes.DATE:\n              for (const cond of this.columnFilter[k]) {\n                const condDate = new Date(cond.value);\n                const valueDate = new Date(el[k]);\n                // we use formatDate according to format showed on table-row component template.\n                include = eval(`('${formatDate(valueDate, 'yyyy-MM-dd', 'it')}' ${cond.condition} '${formatDate(condDate, 'yyyy-MM-dd', 'it')}')`);\n                if (!include) {\n                  break;\n                }\n              }\n              break;\n            case IbTableTitlesTypes.BOOLEAN:\n              include = (el[k] === this.columnFilter[k]);\n              break;\n            default:\n              include = true;\n          }\n          if (!include) {\n            break;\n          }\n\n        }\n        return include;\n      });\n\n    }\n    this.numOfElements = this.sortedData.length;\n    this.store.dispatch(ibTableActionSetPaginator({\n      state: {\n        length: this.sortedData.length,\n        pageIndex: this.currentPagination.pageIndex,\n        pageSize: this.currentPagination.pageSize\n      },\n      tableName: this.tableName\n    }));\n\n    if (!sort || !sort.active || sort.direction === '') {\n      this.currentSort = {};\n      this.paginationHandle();\n      return;\n    }\n\n    this.sortedData = this.sortedData.sort((a, b) => {\n      const isAsc = sort.direction === 'asc';\n      return compare(a[sort.active], b[sort.active], isAsc);\n    });\n\n    this.paginationHandle();\n  }\n\n  setFilter(key, value, indexToSet = 0, redux = true, tableName = null) {\n    this.columnFilter[key] = value;\n    this.currentPagination.pageIndex = indexToSet;\n    if (redux) {\n      if (!tableName) {\n        if (!tableName && this.tableName === 'default_table_name') {\n          console.warn('[IbTableComponent] missing table name on redux filter call');\n        }\n        tableName = this.tableName;\n      }\n\n      // this.store.dispatch(TableFiltersActions.addFilterToTable({\n      //   tableName,\n      //   filterName: key,\n      //   filterValue: value\n      // }));\n\n      this.pageChangeHandle(this.currentPagination);\n      this.store.dispatch(ibTableActionAddFilterField({\n        state: {\n          columnName: key,\n          value,\n        },\n        tableName\n      }));\n    }\n\n  }\n\n  resetFilters() {\n    this.columnFilter = {};\n  }\n\n  pageChangeHandle(data) {\n    // this.store.dispatch(TableFiltersActions.addPaginatorFiltersToTable({\n    //   tableName: this.tableName,\n    //   previousPageIndex: data.previousPageIndex,\n    //   pageIndex: data.pageIndex,\n    //   pageSize: data.pageSize,\n    //   lengthP: data.length\n    // }));\n\n    this.store.dispatch(ibTableActionSetPaginator({\n      state: {\n        pageIndex: data.pageIndex,\n        pageSize: data.pageSize,\n        length: data.length\n      },\n      tableName: this.tableName\n    }));\n    // this.currentPagination = data;\n    this._sortData(this.currentSort, false);\n  }\n\n  paginationHandle() {\n    /*\n    * all'interno di data ho questo:\n    * {\n    *   length: 15\n        pageIndex: 0\n        pageSize: 5 (elementi per pagina)\n        previousPageIndex: 0\n      }\n    */\n\n    const data = this.currentPagination;\n    const paginatedData = [];\n    // scorro tutte le pagine della tabella\n    for (let i = data.pageIndex * data.pageSize; i < (data.pageIndex + 1) * data.pageSize; i++) {\n      if (i >= this.sortedData.length) {\n        break;\n      }\n      paginatedData.push(this.sortedData[i]);\n    }\n    this.filteredData = this.sortedData.slice();\n    this.sortedData = paginatedData;\n  }\n\n  getSelectedRows() {\n    return this.items.filter(sd => this.rowForm(sd).controls.isChecked.value);\n  }\n\n  async export({ format, dataset }) {\n    const previousPagination = this.currentPagination;\n    if (dataset === 'all') {\n      const pagination = {\n        tableName: this.tableName,\n        previousPageIndex: 0,\n        pageIndex: 0,\n        pageSize: this.items.length,\n        lengthP: this.items.length\n      };\n      // this.store.dispatch(TableFiltersActions.addPaginatorFiltersToTable(pagination));\n\n      this.store.dispatch(ibTableActionSetPaginator({\n        state: {\n          pageIndex: 0,\n          pageSize: this.items.length,\n          length: this.items.length,\n        },\n        tableName: this.tableName\n      }));\n\n\n      this.currentPagination = pagination;\n      this.sortData(this.currentSort, false);\n    }\n\n    const keys = this.titles.map(h => h.key);\n    const getValueFromKey = (row, key) => {\n      const value = row[key];\n      const h = this.titles.find(t => t.key === key);\n      return value;\n    };\n    let filteredData = this.sortedData\n      .map(\n        row => Object.keys(row)\n          .filter(key => keys.includes(key))\n          .reduce((o, key) => ({\n            ...o,\n            [key]: getValueFromKey(row, key)\n          }), {})\n    );\n\n    if (dataset === 'selected') {\n      filteredData = this.getSelectedRows();\n    }\n\n    const translatedHeaders = await Promise.all(this.titles.map(async t => ({\n      value: await this.translate.get(t.value).toPromise(),\n      key: t.key,\n    })));\n\n    if (format === 'csv') {\n      this.csvExport(filteredData, translatedHeaders);\n    }\n\n    if (format === 'pdf') {\n      this.pdfExport(filteredData, translatedHeaders);\n    }\n\n    if (format === 'xlsx') {\n      this.xlsxExport(filteredData, translatedHeaders);\n    }\n\n    if (dataset === 'all') {\n      this.currentPagination = previousPagination;\n      this.sortData(this.currentSort, false);\n    }\n  }\n\n  pdfExport(body, titles) {\n    const columns = titles.map(t => ({ header: t.value, dataKey: t.key }));\n    const doc = new jsPDF(this.pdfSetup.orientation, this.pdfSetup.unit, this.pdfSetup.format);\n    autoTable(doc, {\n      ...this.pdfCustomStyles,\n      body,\n      columns,\n    });\n    doc.save(this.tableName + '.pdf');\n  }\n\n  xlsxExport(filteredData, titles) {\n    const header = titles.reduce((o, t) => ({ ...o, [t.key]: t.value }), {});\n    const data = [header, ...filteredData];\n    const ws = XLSX.utils.json_to_sheet(data, { skipHeader: true });\n    const wb: XLSX.WorkBook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, this.tableName);\n    XLSX.writeFile(wb, this.tableName + '.xlsx');\n  }\n\n  csvExport(filteredData, titles) {\n    const nameFromKey = (key) =>\n      titles.find(t => t.key === key).value;\n    const data = filteredData.map(row => Object.keys(row).reduce((o, key) => ({ ...o, [nameFromKey(key)]: row[key] }), {}));\n    const csv = Papa.unparse(data, {\n      quotes: true,\n      delimiter: ';',\n    });\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n\n    if (navigator.msSaveBlob) { // IE 10+\n      navigator.msSaveBlob(blob, this.tableName + '.csv');\n    } else {\n      const link = document.createElement('a');\n      if (link.download !== undefined) {\n        const url = URL.createObjectURL(blob);\n        link.setAttribute('href', url);\n        link.setAttribute('download', this.tableName + '.csv');\n        link.style.visibility = 'hidden';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      }\n    }\n  }\n}\n\nfunction compare(a, b, isAsc) {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n",
            "properties": [
                {
                    "name": "msSaveBlob",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TotalRowCell",
            "id": "interface-TotalRowCell-5b7881dcab62641449e8c56ef52691f8769e615544cd765ded05443d7e92dd0151527ec137230752261dcd72e3e8b7ff56c40a8db0ba81394f03433643e4289f",
            "file": "src/app/inobeta-ui/ui/table/components/table-total-row/cells/ib-total-row-default-cell/ib-total-row-default-cell.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, ComponentFactoryResolver, ComponentRef, Directive, Input, OnChanges, OnInit, SimpleChanges, Type, ViewChild, ViewContainerRef } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Store } from '@ngrx/store';\nimport { IbTableItem } from '../../../../models/table-item.model';\nimport { IbTableTitles, IbTableTitlesTypes } from '../../../../models/titles.model';\nimport { ibTableActionSetTotalRowCell } from '../../../../store/actions/table.actions';\nimport { IbTableTotalRowApplyDialogComponent } from '../../table-total-row-apply-dialog.component';\nimport { IbTotalRowAddCellComponent } from '../ib-total-row-add-cell/ib-total-row-add-cell.component';\nimport { IbTotalRowBaseCellComponent } from '../ib-total-row-base-cell/ib-total-row-base-cell.component';\n\n@Directive({\n  selector: '[cellHost]',\n})\nexport class IbTableTotalRowCellDirective {\n  constructor(public viewContainerRef: ViewContainerRef) { }\n}\n\nexport interface TotalRowCell {\n  data: any;\n}\n\n@Component({\n  selector: '[ib-total-row-default-cell]',\n  template: '<ng-template cellHost></ng-template>'\n})\nexport class IbTotalRowDefaultCellComponent implements OnInit, OnChanges {\n  @Input() title: IbTableTitles;\n  @Input() sortedData: IbTableItem[];\n  @Input() filteredData: IbTableItem[];\n  @Input() initialCell: Type<any>;\n  @Input() tableName: string;\n\n  @ViewChild(IbTableTotalRowCellDirective, { static: true }) cellHost: IbTableTotalRowCellDirective;\n\n  private componentRef: ComponentRef<IbTotalRowBaseCellComponent>;\n\n  constructor(\n    public dialog: MatDialog,\n    private store: Store,\n    private componentFactoryResolver: ComponentFactoryResolver) { }\n\n  ngOnInit(): void {\n    if (this.initialCell) {\n      return this.loadComponent(this.initialCell);\n    }\n\n    if (this.title.type === IbTableTitlesTypes.NUMBER) {\n      this.loadComponent(IbTotalRowAddCellComponent);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const initialCellChanges = changes.initialCell;\n    const sortedDataChanges = changes.sortedData;\n\n    const shouldChange = this.componentRef && initialCellChanges && !initialCellChanges.isFirstChange();\n    if (shouldChange) {\n      this.loadComponent(this.initialCell);\n    }\n\n    if (sortedDataChanges && !sortedDataChanges.isFirstChange() && this.componentRef) {\n      this.componentRef.instance.data = {\n        ...this.componentRef.instance.data,\n        sortedData: this.sortedData,\n        filteredData: this.filteredData\n      };\n    }\n  }\n\n  loadComponent(component: Type<any>) {\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);\n    const viewContainerRef = this.cellHost.viewContainerRef;\n    viewContainerRef.clear();\n\n    this.componentRef = viewContainerRef.createComponent<any>(componentFactory);\n    this.componentRef.instance.data = {\n      title: this.title,\n      sortedData: this.sortedData,\n      filteredData: this.filteredData,\n    };\n    this.componentRef.instance.addCell.subscribe(this.handleAddCell.bind(this));\n  }\n\n  openDialog() {\n    const dialog = this.dialog.open(IbTableTotalRowApplyDialogComponent, {\n      width: '380px',\n      data: { isSet: Boolean(this.initialCell) }\n    });\n    dialog.afterClosed().subscribe(this.handleDialogClosed.bind(this));\n  }\n\n  private handleAddCell() {\n    this.openDialog();\n  }\n\n  private handleDialogClosed(result: any) {\n    if (!result) {\n      return;\n    }\n    console.log('result', result);\n    // this.loadComponent(result.component);\n    this.store.dispatch(ibTableActionSetTotalRowCell({\n      state: {\n        columnName: this.title.key,\n        func: result.func\n      },\n      tableName: this.tableName\n    }));\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ExampleEffects",
            "id": "injectable-ExampleEffects-2af4592cd5b0f6486c086c1e8ca6415bcd4857f40902974ba944abbed00db13d7ec74bfc73a45b388b94eb0b0fef1e39bdb826576a506dfbd6318e4e81792020",
            "file": "src/app/examples/lazy-loaded/store/example/effects.ts",
            "properties": [
                {
                    "name": "sampleAction$",
                    "defaultValue": "createEffect(():any => {\n    return this.actions$.pipe(\n      ofType(UPDATE),\n      mergeMap((action) => {\n        console.log('DIO FROM FEATURE')\n        return of({}) //a service call\n      })).pipe(\n        map(() => {\n\n        })\n      )\n  }, {\n    dispatch: false\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { UPDATE } from '@ngrx/store';\nimport { of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { exampleActions } from './actions';\n\n@Injectable({providedIn: 'root'})\nexport class ExampleEffects {\n\n  sampleAction$ = createEffect(():any => {\n    return this.actions$.pipe(\n      ofType(UPDATE),\n      mergeMap((action) => {\n        console.log('DIO FROM FEATURE')\n        return of({}) //a service call\n      })).pipe(\n        map(() => {\n\n        })\n      )\n  }, {\n    dispatch: false\n  });\n\n  constructor(\n    private actions$: Actions,\n    ) { }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GithubService",
            "id": "injectable-GithubService-d0d7b11752e7ea4dc6b44d36a83b8224a9e3b0c1c8456ff5c32fd19508c454786850f84dba911cfe6daaf4e4ff2c7fc611f5fd26ca0bd534d26497b88724fcda",
            "file": "src/app/examples/kai-table-example/kai-table-api-example.ts",
            "properties": [
                {
                    "name": "href",
                    "defaultValue": "\"https://api.github.com/search/issues\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [
                {
                    "name": "getRepoIssues",
                    "args": [
                        {
                            "name": "sort",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "order",
                            "type": "SortDirection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<GithubApi>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "order",
                            "type": "SortDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Component, Injectable, ViewChild } from \"@angular/core\";\nimport { useColumn } from \"src/app/inobeta-ui/ui/kai-table/cells\";\nimport { IbTable } from \"src/app/inobeta-ui/ui/kai-table/table.component\";\nimport { IbSelectionColumn } from \"src/app/inobeta-ui/ui/kai-table/selection-column\";\nimport {\n  IbColumnDef,\n  IbTableDef,\n  IbKaiTableState,\n} from \"src/app/inobeta-ui/ui/kai-table\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { SortDirection } from \"@angular/material/sort\";\nimport { Observable } from \"rxjs\";\nimport { IbDataSource } from \"src/app/inobeta-ui/ui/kai-table/table-data-source\";\nimport { formatDate } from \"@angular/common\";\n\n@Injectable({ providedIn: \"root\" })\nclass GithubService {\n  href = \"https://api.github.com/search/issues\";\n\n  constructor(private _httpClient: HttpClient) {}\n\n  getRepoIssues(\n    sort: string,\n    order: SortDirection,\n    page: number\n  ): Observable<GithubApi> {\n    const requestUrl = `${\n      this.href\n    }?q=repo:angular/components&sort=${sort}&order=${order}&page=${page + 1}`;\n\n    console.log(\"getRepoIssues\", \"sort:\", sort, \"order:\", order, \"page:\", page);\n    return this._httpClient.get<GithubApi>(requestUrl);\n  }\n}\n\n@Component({\n  selector: \"ib-kai-table-api-example\",\n  template: `\n    <div style=\"display: flex; gap: 12px\">\n      <button mat-raised-button (click)=\"refresh()\">refresh</button>\n      <button mat-raised-button color=\"warn\" (click)=\"simulateError()\">\n        simulate error\n      </button>\n      <button mat-raised-button (click)=\"setState('loading')\">\n        set to loading\n      </button>\n      <button mat-raised-button (click)=\"setState('idle')\">set to idle</button>\n    </div>\n    <ib-kai-table\n      #table\n      [dataSource]=\"dataSource\"\n      [columns]=\"columns\"\n      [tableDef]=\"tableDef\"\n    ></ib-kai-table>\n  `,\n  styles: [\n    `\n      :host {\n        display: flex;\n        flex-direction: column;\n        padding: 30px;\n        gap: 3em;\n      }\n\n      ib-kai-table ::ng-deep .ib-table-scrollable {\n        max-height: 500px;\n      }\n\n      ib-kai-table .ib-table {\n        --ib-table-header-cell-color: lightgrey;\n        --ib-table-header-cell-background-color: #309933;\n      }\n    `,\n  ],\n})\nexport class IbKaiTableApiExamplePage {\n  @ViewChild(\"table\", { static: true }) kaiTable: IbTable;\n  @ViewChild(IbSelectionColumn, { static: true })\n  selectionColumn: IbSelectionColumn;\n\n  dataSource = new IbDataSource<GithubIssue>();\n  columns: IbColumnDef[] = [\n    {\n      columnDef: \"created\",\n      header: \"Created\",\n      cell: (e) => `${formatDate(e.created_at, \"d MMM YYYY\", \"it-IT\")}`,\n      sort: true,\n    },\n    useColumn(\"state\"),\n    useColumn(\"#\", \"number\", false),\n    useColumn(\"title\"),\n  ];\n  tableDef: IbTableDef = {\n    paginator: {\n      pageSize: 30,\n      pageSizeOptions: [30],\n    },\n  };\n\n  isRateLimitReached = false;\n  resultsLength = 0;\n\n  constructor(private github: GithubService) {}\n\n  ngOnInit() {\n    this.dataSource.fetchData = this.fetchIssues;\n    this.dataSource.mapData = this.mapData;\n    this.dataSource.updatePaginator = (result: GithubApi) => result.total_count;\n  }\n\n  fetchIssues = (sort: string, order: SortDirection, page: number) =>\n    this.github!.getRepoIssues(sort, order, page);\n\n  mapData = (result: GithubApi) => result.items;\n\n  setState(state: string) {\n    if (state === \"loading\") {\n      return (this.kaiTable.state = IbKaiTableState.LOADING);\n    }\n\n    this.kaiTable.state = IbKaiTableState.IDLE;\n  }\n\n  refresh() {\n    this.dataSource.refresh();\n  }\n\n  simulateError() {\n    this.github.href = \"oops\";\n    this.dataSource.refresh();\n    setTimeout(\n      () => (this.github.href = \"https://api.github.com/search/issues\"),\n      1\n    );\n  }\n}\n\ninterface GithubApi {\n  items: GithubIssue[];\n  total_count: number;\n}\n\ninterface GithubIssue {\n  created_at: string;\n  number: string;\n  state: string;\n  title: string;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "_httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HydrationEffects",
            "id": "injectable-HydrationEffects-4a50ac75b85d91534c7ae040fdc6e00daad5b455326f5d10f23d3d74cba37f8c8b4e9d672c886ee33ced5924c9f2c162022fbb6ab2ac203ca2334a5d976065a8",
            "file": "src/app/inobeta-ui/hydration/effects.ts",
            "properties": [
                {
                    "name": "ibReduxPersistKeys",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "ibSessionStorageKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "serialize$",
                    "defaultValue": "createEffect(\n    () =>\n      this.action$.pipe(\n        ofType(\n          HydrationActions.ibHydrate\n        ),\n        switchMap(() => this.store),\n        distinctUntilChanged(),\n        tap((state) => {\n          saveState(HydrationEffects.ibSessionStorageKey, HydrationEffects.ibReduxPersistKeys, state)\n          return state\n        })\n      )\n  , {dispatch: false})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "ngrxOnInitEffects",
                    "args": [],
                    "optional": false,
                    "returnType": "Action",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { Actions, createEffect, ofType, OnInitEffects } from \"@ngrx/effects\";\nimport { Action, Store } from \"@ngrx/store\";\nimport { distinctUntilChanged, map, switchMap, tap } from \"rxjs/operators\";\nimport * as HydrationActions from \"./actions\";\n\n@Injectable()\nexport class HydrationEffects implements OnInitEffects {\n  static ibSessionStorageKey: string\n  static ibReduxPersistKeys: string[]\n\n  serialize$ = createEffect(\n    () =>\n      this.action$.pipe(\n        ofType(\n          HydrationActions.ibHydrate\n        ),\n        switchMap(() => this.store),\n        distinctUntilChanged(),\n        tap((state) => {\n          saveState(HydrationEffects.ibSessionStorageKey, HydrationEffects.ibReduxPersistKeys, state)\n          return state\n        })\n      )\n  , {dispatch: false});\n\n  constructor(\n    private action$: Actions,\n    private store: Store<any>\n    ) {}\n\n  ngrxOnInitEffects(): Action {\n    return HydrationActions.ibHydrate();\n  }\n}\n\n\n\nfunction saveState(ibSessionStorageKey: string, ibReduxPersistKeys: string[], state: any){\n  const storageValue = localStorage.getItem(ibSessionStorageKey);\n  let oldState = {}\n  try {\n    oldState = JSON.parse(storageValue);\n  } catch {\n    console.log('no previous state to resume')\n  }\n  const toSerialize = {\n    ...oldState,\n    ...state\n  }\n  for(let k in toSerialize){\n    if(ibReduxPersistKeys?.indexOf(k) < 0){\n      delete toSerialize[k]\n    }\n  }\n  return localStorage.setItem(ibSessionStorageKey, JSON.stringify(toSerialize))\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "IbAuthService",
            "id": "injectable-IbAuthService-3e2d53f804249697dadc11254476ed5ffd31988ec7fe271c7b8a03bdd79819041f675f84b3badf05f4703247ff69b4a20333e0b3edf668f10e3a257c4e73d341",
            "file": "src/app/inobeta-ui/http/auth/auth.service.ts",
            "properties": [
                {
                    "name": "activeSession",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbSession",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "ibSessionStorageKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "'ibSessionStorageKey'"
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sessionStorageKey",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "SessionStorageKey",
                    "deprecated": true,
                    "deprecationMessage": "Rename SessionStorageKey to ibSessionStorageKey please",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16,
                    "rawdescription": "\n\n",
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "'SessionStorageKey'"
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "pos": 400,
                            "end": 482,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 401,
                                "end": 411,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>Rename SessionStorageKey to ibSessionStorageKey please</p>\n"
                        }
                    ]
                }
            ],
            "methods": [
                {
                    "name": "cookieSession",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "storeSession",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Inject, Injectable, Optional} from '@angular/core';\nimport { IbStorageService, IbStorageTypes } from '../../storage/storage.service';\nimport {IbSession} from './session.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IbAuthService {\n  activeSession: IbSession = null;\n  sessionStorageKey = '';\n\n  constructor(private storage: IbStorageService,\n              /**\n               * @deprecated Rename SessionStorageKey to ibSessionStorageKey please\n               */\n              @Inject('SessionStorageKey') @Optional() public SessionStorageKey?: string,\n              @Inject('ibSessionStorageKey') @Optional() public ibSessionStorageKey?: string\n  ) {\n    if(SessionStorageKey){\n      console.warn('[deprecated] Rename SessionStorageKey to ibSessionStorageKey please');\n    }\n    this.sessionStorageKey = ibSessionStorageKey || SessionStorageKey || '';\n    this.activeSession = this.storage.get(`userData-${this.sessionStorageKey}`, IbStorageTypes.COOKIESTORAGE) as IbSession;\n    if (!this.activeSession) {\n      this.activeSession = this.storage.get(`userData-${this.sessionStorageKey}`, IbStorageTypes.LOCALSTORAGE) as IbSession;\n    }\n  }\n\n  public storeSession() {\n    this.activeSession.valid = true;\n    this.storage.set(`userData-${this.sessionStorageKey}`, this.activeSession, IbStorageTypes.LOCALSTORAGE);\n  }\n\n  public cookieSession() {\n    this.activeSession.valid = true;\n    this.storage.set(`userData-${this.sessionStorageKey}`, this.activeSession, IbStorageTypes.COOKIESTORAGE);\n  }\n\n  public logout() {\n    this.storage.set(`userData-${this.sessionStorageKey}`, null, IbStorageTypes.LOCALSTORAGE);\n    this.storage.set(`userData-${this.sessionStorageKey}`, null, IbStorageTypes.COOKIESTORAGE);\n  }\n\n  public isLoggedIn() {\n    return this.activeSession !== null;\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "IbStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "SessionStorageKey",
                        "type": "string",
                        "deprecated": true,
                        "deprecationMessage": "<p>Rename SessionStorageKey to ibSessionStorageKey please</p>\n",
                        "optional": true
                    },
                    {
                        "name": "ibSessionStorageKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "IbStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "SessionStorageKey",
                        "type": "string",
                        "deprecated": true,
                        "deprecationMessage": "<p>Rename SessionStorageKey to ibSessionStorageKey please</p>\n",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ibSessionStorageKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "IbFormControlService",
            "id": "injectable-IbFormControlService-8dc61f8ad1620d070ce1cf8bf414fe5d939546de32c48b0c0584c260c5620ddb787657e7ea00806122a0aac14c39c61681fe465e348cee97cce9a7a170e194c7",
            "file": "src/app/inobeta-ui/ui/forms/form-control.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "toFormGroup",
                    "args": [
                        {
                            "name": "fields",
                            "type": "IbFormControlBase<any>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "IbFormControlBase<any>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { IbFormControlBase } from './controls/form-control-base';\nimport { UntypedFormControl, Validators, UntypedFormGroup } from '@angular/forms';\n\n@Injectable({providedIn: 'root'})\nexport class IbFormControlService {\n  constructor() {}\n\n  toFormGroup(fields: IbFormControlBase<any>[]) {\n    const group: any = {};\n\n    fields.forEach(field => {\n      if(!field.key) return;\n      const elem = {\n        value: (field.value === undefined) ? null : field.value,\n        disabled: field.disabled\n      }\n      let validators = []\n      if(field.validators && field.validators.length){\n        validators = validators.concat(field.validators)\n      }\n      if(field.required){\n        validators.push(Validators.required)\n      }\n      group[field.key] = new UntypedFormControl(elem, validators);\n\n    });\n\n    return new UntypedFormGroup(group);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "IbHttpClientService",
            "id": "injectable-IbHttpClientService-5c77c882915a7c1450d9067c7dc27d687d5b0c671ee1d11addb6691b52a989fdbb1638eac4aa474555db0ad7418252d9471902886b1e4198f8131e9b83a9d2c9",
            "file": "src/app/inobeta-ui/http/http/http-client.service.ts",
            "properties": [
                {
                    "name": "additionalHeaders",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "authType",
                    "defaultValue": "IbAuthTypes.JWT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "h",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hMobile",
                    "deprecated": true,
                    "deprecationMessage": "Mobile version deprecated, please delete this param",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 36,
                    "rawdescription": "\n\n",
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "'hMobile'"
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "pos": 1112,
                            "end": 1181,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 1113,
                                "end": 1123,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>Mobile version deprecated, please delete this param</p>\n"
                        }
                    ]
                },
                {
                    "name": "httpMode",
                    "defaultValue": "'NORMAL'",
                    "deprecated": true,
                    "deprecationMessage": "Mobile version deprecated, please delete this param",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "rawdescription": "\n\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "pos": 686,
                            "end": 753,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 687,
                                "end": 697,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>Mobile version deprecated, please delete this param</p>\n"
                        }
                    ]
                },
                {
                    "name": "HttpMode",
                    "deprecated": true,
                    "deprecationMessage": "Mobile version deprecated, please delete this param",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 32,
                    "rawdescription": "\n\n",
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "'HttpMode'"
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "pos": 963,
                            "end": 1032,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 964,
                                "end": 974,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>Mobile version deprecated, please delete this param</p>\n"
                        }
                    ]
                },
                {
                    "name": "ibHttpUrlExcludedFromLoader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbHttpRequestDefinition[]",
                    "optional": true,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "'ibHttpUrlExcludedFromLoader'"
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "pendingRequests",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createAuthorizationHeader",
                    "args": [
                        {
                            "name": "req",
                            "type": "IbHttpRequestDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{ url: null, method: null }"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "IbHttpRequestDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{ url: null, method: null }",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "url",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        },
                        {
                            "name": "options",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        },
                        {
                            "name": "options",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getObservableFromMode",
                    "args": [
                        {
                            "name": "method",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "headers",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "method",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "headers",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patch",
                    "args": [
                        {
                            "name": "url",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        },
                        {
                            "name": "options",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "url",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        },
                        {
                            "name": "options",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "url",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        },
                        {
                            "name": "options",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAuthtype",
                    "args": [
                        {
                            "name": "type",
                            "type": "IbAuthTypes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "IbAuthTypes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "turnOffModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "turnOnModal",
                    "args": [
                        {
                            "name": "enableLoader",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "enableLoader",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable, Inject, Optional} from '@angular/core';\nimport {IbResponseHandlerService} from './response-handler.service';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {catchError, finalize, map, tap} from 'rxjs/operators';\nimport {IbAuthService} from '../auth/auth.service';\nimport {IbAuthTypes} from '../auth/session.model';\nimport { from } from 'rxjs';\n\n/*\n  HttpClient with Bearer authentication\n */\n@Injectable({providedIn: 'root'})\nexport class IbHttpClientService {\n\n  public pendingRequests = 0;\n  public showLoading = false;\n  public authType = IbAuthTypes.JWT; // FIXME: this should be private\n  public additionalHeaders: any[] = [];\n\n  /**\n   * @deprecated Mobile version deprecated, please delete this param\n   */\n  public httpMode = 'NORMAL'; // FIXME: this should be private\n\n  constructor(\n    public h: HttpClient,\n    private srvAuth: IbAuthService,\n    private srvResponse: IbResponseHandlerService,\n    /**\n     * @deprecated Mobile version deprecated, please delete this param\n     */\n    @Inject('HttpMode') @Optional() public HttpMode?: string,\n    /**\n     * @deprecated Mobile version deprecated, please delete this param\n     */\n    @Inject('hMobile') @Optional() public hMobile?: any,\n    @Inject('ibHttpUrlExcludedFromLoader') @Optional() public ibHttpUrlExcludedFromLoader?: IbHttpRequestDefinition[],\n    ) {\n      this.httpMode = HttpMode || 'NORMAL';\n      if(this.httpMode !== 'NORMAL') {\n        console.warn('[deprecated] IbHttp Mobile support will be removed');\n      }\n      this.ibHttpUrlExcludedFromLoader = this.ibHttpUrlExcludedFromLoader || [];\n  }\n\n  public setAuthtype(type: IbAuthTypes) {\n    this.authType = type;\n  }\n\n  /*public setAdditionalHeaders(headers: any[] = []) {}*/\n\n  createAuthorizationHeader(req: IbHttpRequestDefinition = { url: null, method: null }) {\n    this.turnOnModal(!this.ibHttpUrlExcludedFromLoader\n                          .find(u => u.url.toUpperCase() === req.url.toUpperCase() && u.method.toUpperCase() === req.method.toUpperCase())\n    );\n    let head = (new HttpHeaders())\n      .set('Content-Type', 'application/json')\n      .set('x-requested-with', 'XMLHttpRequest');\n\n    if (this.additionalHeaders.length) {\n      for (const elem of this.additionalHeaders) {\n        head = head.set(elem.key, elem.value);\n      }\n    }\n    if (!this.srvAuth.activeSession) {\n      return head;\n    }\n    switch (this.httpMode) {\n      case 'MOBILE':\n        const mobileHeaders = {};\n        mobileHeaders['Content-Type'] = 'application/json';\n        mobileHeaders['x-requested-with'] = 'XMLHttpRequest';\n        if (this.authType === IbAuthTypes.BASIC_AUTH) {\n          mobileHeaders['Authorization'] = 'Basic ' + this.srvAuth.activeSession.authToken;\n        } else if (this.authType === IbAuthTypes.JWT) {\n          mobileHeaders['Authorization'] = 'Bearer ' + this.srvAuth.activeSession.authToken;\n        } else {\n          if (this.additionalHeaders.length) {\n            for (const elem of this.additionalHeaders) {\n              mobileHeaders[elem.key] = elem.value;\n            }\n          }\n        }\n        return mobileHeaders;\n      default:\n        if (this.authType === IbAuthTypes.BASIC_AUTH) {\n          return head.set('Authorization', 'Basic ' + this.srvAuth.activeSession.authToken);\n        } else if (this.authType === IbAuthTypes.JWT) {\n          return head.set('Authorization', 'Bearer ' + this.srvAuth.activeSession.authToken);\n        }\n        return head;\n    }\n  }\n\n  get(url, data = null, options = null): any {\n    const headers = this.createAuthorizationHeader({ url, method: 'GET' });\n    return this.getObservableFromMode('get', url, data, headers, options)\n      .pipe(\n        map(val => {\n          if (this.httpMode === 'MOBILE') {\n            return (val['data']) ? JSON.parse(val['data']) : '';\n          }\n          return val;\n        }),\n        map(x => this.srvResponse.handleOK(x)),\n        catchError(x => this.srvResponse.handleKO(x)),\n        finalize(() => this.turnOffModal()),\n        tap(x => x, err => this.srvResponse.displayErrors(err))\n      );\n\n  }\n\n  post(url, data = null, options = null): any {\n    const headers = this.createAuthorizationHeader({ url, method: 'POST' });\n    return this.getObservableFromMode('post', url, data, headers, options)\n      .pipe(\n        map(val => {\n          if (this.httpMode === 'MOBILE') {\n            return (val['data']) ? JSON.parse(val['data']) : '';\n          }\n          return val;\n        }),\n        map(x => this.srvResponse.handleOK(x)),\n        catchError(x => this.srvResponse.handleKO(x)),\n        finalize(() => this.turnOffModal()),\n        tap(x => x, err => this.srvResponse.displayErrors(err))\n      );\n  }\n\n  put(url, data = null, options = null): any {\n    const headers = this.createAuthorizationHeader({ url, method: 'PUT' });\n    return this.getObservableFromMode('put', url, data, headers, options)\n      .pipe(\n        map(val => {\n          if (this.httpMode === 'MOBILE') {\n            return (val['data']) ? JSON.parse(val['data']) : '';\n          }\n          return val;\n        }),\n        map(x => this.srvResponse.handleOK(x)),\n        catchError(x => this.srvResponse.handleKO(x)),\n        finalize(() => this.turnOffModal()),\n        tap(x => x, err => this.srvResponse.displayErrors(err))\n      );\n  }\n\n  patch(url, data = null, options = null): any {\n    const headers = this.createAuthorizationHeader({ url, method: 'PATCH' });\n    return this.getObservableFromMode('patch', url, data, headers, options)\n      .pipe(\n        map(val => {\n          if (this.httpMode === 'MOBILE') {\n            return (val['data']) ? JSON.parse(val['data']) : '';\n          }\n          return val;\n        }),\n        map(x => this.srvResponse.handleOK(x)),\n        catchError(x => this.srvResponse.handleKO(x)),\n        finalize(() => this.turnOffModal()),\n        tap(x => x, err => this.srvResponse.displayErrors(err))\n      );\n  }\n\n  delete(url, data = null, options = null): any {\n    const headers = this.createAuthorizationHeader({ url, method: 'DELETE' });\n    return this.getObservableFromMode('delete', url, data, headers, options)\n      .pipe(\n        map(val => {\n          if (this.httpMode === 'MOBILE') {\n            return (val['data']) ? JSON.parse(val['data']) : '';\n          }\n          return val;\n        }),\n        map(x => this.srvResponse.handleOK(x)),\n        catchError(x => this.srvResponse.handleKO(x)),\n        finalize(() => this.turnOffModal()),\n        tap(x => x, err => this.srvResponse.displayErrors(err))\n      );\n  }\n\n  private getObservableFromMode(method, url, data, headers, options) {\n    let obs = null;\n    switch (this.httpMode) {\n      case 'MOBILE':\n        switch (method) {\n          case 'get': obs = from(this.hMobile.get(url, data, headers)); break;\n          case 'post': obs = from(this.hMobile.post(url, data, headers)); break;\n          case 'put': obs = from(this.hMobile.put(url, data, headers)); break;\n          case 'delete': obs = from(this.hMobile.delete(url, null, headers)); break;\n        }\n        break;\n      default:\n        switch (method) {\n          case 'get': obs = this.h.get(url, {headers, ...options, params: data }); break;\n          case 'post': obs = this.h.post(url, data, {headers, ...options}); break;\n          case 'put': obs = this.h.put(url, data, {headers, ...options}); break;\n          case 'patch': obs = this.h.patch(url, data, {headers, ...options}); break;\n          case 'delete': obs = this.h.delete(url, {headers, ...options}); break;\n        }\n    }\n    return obs;\n  }\n\n\n\n  public turnOnModal(enableLoader = true) {\n    if (this.pendingRequests === 0) {\n      this.showLoading = enableLoader;\n    }\n    this.pendingRequests += 1;\n  }\n\n  public turnOffModal() {\n    this.pendingRequests -= 1;\n    if (this.pendingRequests <= 0) {\n      this.showLoading = false;\n    }\n  }\n}\n\n\nexport interface IbHttpRequestDefinition {\n  url: string;\n  method: string;\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "h",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "srvAuth",
                        "type": "IbAuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "srvResponse",
                        "type": "IbResponseHandlerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "HttpMode",
                        "type": "string",
                        "deprecated": true,
                        "deprecationMessage": "<p>Mobile version deprecated, please delete this param</p>\n",
                        "optional": true
                    },
                    {
                        "name": "hMobile",
                        "type": "any",
                        "deprecated": true,
                        "deprecationMessage": "<p>Mobile version deprecated, please delete this param</p>\n",
                        "optional": true
                    },
                    {
                        "name": "ibHttpUrlExcludedFromLoader",
                        "type": "IbHttpRequestDefinition[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "h",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "srvAuth",
                        "type": "IbAuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "srvResponse",
                        "type": "IbResponseHandlerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "HttpMode",
                        "type": "string",
                        "deprecated": true,
                        "deprecationMessage": "<p>Mobile version deprecated, please delete this param</p>\n",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hMobile",
                        "type": "any",
                        "deprecated": true,
                        "deprecationMessage": "<p>Mobile version deprecated, please delete this param</p>\n",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ibHttpUrlExcludedFromLoader",
                        "type": "IbHttpRequestDefinition[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "IbMatDateAdapter",
            "id": "injectable-IbMatDateAdapter-9f6b010bcf4dd2d53fb0bc06a59221f8d24979fd0e708aa493deaadcadc35f8bc45c7be01e2fce1c3ae05b5c9319bd6cdd492a12d8c494d298fa6861a7837eef",
            "file": "src/app/inobeta-ui/ui/material-forms/intl/datepicker.intl.ts",
            "properties": [],
            "methods": [
                {
                    "name": "deserialize",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date | null",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "format",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "displayFormat",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "displayFormat",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "invalid",
                    "args": [],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isValid",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parse",
                    "args": [
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "displayFormat",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "displayFormat",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Platform } from '@angular/cdk/platform';\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { MAT_DATE_LOCALE, NativeDateAdapter } from '@angular/material/core';\nimport { TranslateService } from '@ngx-translate/core';\n\nexport class IbMatDatepickerI18n {\n\n    constructor(private readonly translate: TranslateService) {}\n\n    getDateFormats() {\n        return {\n          parse: {\n            dateInput: 'DD/MM/YYYY',\n            },\n          display: {\n            dateInput: 'DD/MM/YYYY',\n            monthYearLabel: 'MMMM YYYY',\n            dateA11yLabel: 'DD/MM/YYYY',\n            monthYearA11yLabel: 'MMMM YYYY',\n          }\n        };\n    }\n}\n\n// FIXME: this adapter supports it format only but it is linked to translate service. We must support a dynamic parse and format\n\n@Injectable({providedIn: 'root'})\nexport class IbMatDateAdapter extends NativeDateAdapter {\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super(matDateLocale, platform);\n    super.setLocale(matDateLocale);\n  }\n\n  parse(date: string, displayFormat?: string): Date {\n    if (date === '') {\n      return null;\n    }\n    const dateParts = date.split('/');\n    if (dateParts.length === 3) {\n      return new Date(parseInt(dateParts[2], 10), parseInt(dateParts[1], 10) - 1, parseInt(dateParts[0], 10));\n    }\n    return new Date(NaN);\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('IbMatDateAdapter: Cannot format invalid date.');\n    }\n   // if (displayFormat === 'input') {\n    let day: string = date.getDate().toString();\n    day = +day < 10 ? '0' + day : day;\n    let month: string = (date.getMonth() + 1).toString();\n    month = +month < 10 ? '0' + month : month;\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n   // }\n   // return date.toDateString();\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n  deserialize(value: any): Date | null {\n    if (!value) {\n      return null;\n    }\n    return super.deserialize(value);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "matDateLocale",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "matDateLocale",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "NativeDateAdapter",
            "type": "injectable"
        },
        {
            "name": "IbModalMessageService",
            "id": "injectable-IbModalMessageService-f3d60aa1a551b8d11c5a45e842cefa5a14013503e895c5974876b78911a89c3f18422787ec0f5009bc1ec3f0d67357f5b40cf3d7522354b87735fe393c782af2",
            "file": "src/app/inobeta-ui/ui/modal/modal-message.service.ts",
            "properties": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "data",
                            "type": "IbModalMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "component",
                            "type": "Type<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "IbModalMessageComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "IbModalMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "component",
                            "type": "Type<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "IbModalMessageComponent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Type } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { IbModalMessageComponent } from './modal-message.component';\nimport { IbModalMessage } from './modal-message.model';\n\n@Injectable({providedIn: 'root'})\nexport class IbModalMessageService {\n  constructor(public dialog: MatDialog) { }\n\n  show(data: IbModalMessage, component: Type<any> = IbModalMessageComponent) {\n\n    data.hasYes = (data.hasYes === undefined) ? true : data.hasYes;\n    data.hasNo = (data.hasNo === undefined) ? true : data.hasNo;\n    data.actions = data.actions || [];\n\n    const dialog = this.dialog.open(component, {\n      data\n    });\n\n    return dialog.afterClosed();\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "IbResponseHandlerService",
            "id": "injectable-IbResponseHandlerService-b05edd1581947da3c213fe4d28c9eee8f13d5e98675dfd5a8a146a28298e9256da454ac8369b885af5e0092ac0019ed01685b3625633c184c117a47f504b6b91",
            "file": "src/app/inobeta-ui/http/http/response-handler.service.ts",
            "properties": [
                {
                    "name": "disableGlobalErrors",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "displayErrors",
                    "args": [
                        {
                            "name": "errMsg",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "errMsg",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleKO",
                    "args": [
                        {
                            "name": "res",
                            "type": "HttpEvent<object> | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "HttpEvent<object> | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleOK",
                    "args": [
                        {
                            "name": "res",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Object",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\n// import {NotificationService} from '../../modules/UIKit/components/toastNotification/notification.service';\nimport {Observable, throwError} from 'rxjs';\nimport {HttpEvent} from '@angular/common/http';\n\n@Injectable({providedIn: 'root'})\nexport class IbResponseHandlerService {\n\n  disableGlobalErrors = false;\n\n  constructor(\n  //  private srvNotify: NotificationService\n  ) {}\n\n  handleOK(res: Object) {\n    return res;\n  }\n\n  handleKO(res: HttpEvent<object> | any) {\n    return throwError(res);\n  }\n\n\n  displayErrors(errMsg) {\n//    if(!this.disableGlobalErrors)\n//      this.srvNotify.add({severity: 'error', summary: 'Error', detail: errMsg});\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "IbSessionService",
            "id": "injectable-IbSessionService-7e1a52737e2ba140e5d5b3408aa275821cfbc920e3b1fcb70e0932688da9f734ba771cc7e30afa79903b882953ee183ce92d5ef8640637e79da3c2bf1ba5ef2a",
            "file": "src/app/inobeta-ui/http/auth/session.service.ts",
            "properties": [
                {
                    "name": "authType",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ibHttpGUILoginUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "'ibHttpGUILoginUrl'"
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "u",
                            "type": "IbUserLogin",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "postUrl",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        },
                        {
                            "name": "fieldToSave",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "u",
                            "type": "IbUserLogin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postUrl",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fieldToSave",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [
                        {
                            "name": "makeSnack",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "makeSnack",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAuthtype",
                    "args": [
                        {
                            "name": "type",
                            "type": "IbAuthTypes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "IbAuthTypes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {IbAuthTypes, IbSession, IbUserLogin} from './session.model';\nimport {IbHttpClientService} from '../http/http-client.service';\nimport {IbAuthService} from './auth.service';\nimport {catchError, map} from 'rxjs/operators';\nimport {throwError} from 'rxjs';\nimport {Store} from '@ngrx/store';\nimport * as SessionActions from './redux/session.actions';\nimport {Router} from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Inject } from '@angular/core';\nimport { Optional } from '@angular/core';\n\nconst loginUrl = '/api/auth/login';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IbSessionService {\n  private authType = null /*IbAuthTypes.BASIC_AUTH*/;\n\n  constructor(\n    private srvAuth: IbAuthService,\n    private h: IbHttpClientService,\n    private store: Store<any>,\n    private srvRouter: Router,\n    private snackBar: MatSnackBar,\n    @Inject('ibHttpGUILoginUrl') @Optional() public ibHttpGUILoginUrl?: string\n    ) {\n      this.ibHttpGUILoginUrl = this.ibHttpGUILoginUrl || '/login';\n    }\n\n  public setAuthtype(type: IbAuthTypes) {\n    this.authType = type;\n    this.h.setAuthtype(type);\n  }\n\n  public login( u: IbUserLogin, postUrl = null, fieldToSave = null ) {\n\n    if (u) {\n      this.srvAuth.activeSession = new IbSession();\n      if (this.authType === IbAuthTypes.BASIC_AUTH) {\n        this.srvAuth.activeSession.authToken = window.btoa(u.username + ':' + u.password);\n      }\n      this.srvAuth.activeSession.valid = false;\n      this.srvAuth.activeSession.user = u;\n    }\n    const data = u || {};\n    return this.h.post((postUrl) ? postUrl : loginUrl, data)\n      .pipe(\n        map( x => {\n          if (this.authType === IbAuthTypes.JWT) {\n            this.srvAuth.activeSession.authToken = x['token'];\n          }\n          this.srvAuth.activeSession.user.password = '';\n          this.srvAuth.activeSession.valid = true;\n          this.srvAuth.activeSession.userData = fieldToSave ? x[fieldToSave] : x;\n          console.log('IbSession login ok', this.srvAuth.activeSession);\n          if (this.srvAuth.activeSession.user.rememberMe) {\n            this.srvAuth.storeSession();\n          } else {\n            this.srvAuth.cookieSession();\n          }\n          this.store.dispatch(SessionActions.login({activeSession: this.srvAuth.activeSession}));\n          return x;\n        }),\n        catchError( err => {\n          this.srvAuth.activeSession = null;\n          console.log('IbSession login error', this.srvAuth.activeSession, err);\n          return throwError(err);\n        } )\n      );\n  }\n\n  public logout(makeSnack: boolean = true) {\n    this.srvAuth.activeSession = null;\n    this.store.dispatch(SessionActions.logout());\n    this.srvAuth.logout();\n    this.srvRouter.navigateByUrl(this.ibHttpGUILoginUrl);\n    if (makeSnack) {\n      this.snackBar.open('Logout completed', null, {duration: 2000});\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "srvAuth",
                        "type": "IbAuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "h",
                        "type": "IbHttpClientService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "srvRouter",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ibHttpGUILoginUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "srvAuth",
                        "type": "IbAuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "h",
                        "type": "IbHttpClientService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "srvRouter",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ibHttpGUILoginUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "IbStorageService",
            "id": "injectable-IbStorageService-3a2ffc8ba5fca2fd8be0e386034cd714a047e850801a6a524c973db9a8102a6c5c3baa3a1c21e063b17486598f1901e8d1df9d4e4b2cf4f15dc3974fd7b04b88",
            "file": "src/app/inobeta-ui/storage/storage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "storageType",
                            "type": "IbStorageTypes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "IbStorageTypes.LOCALSTORAGE"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "storageType",
                            "type": "IbStorageTypes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "IbStorageTypes.LOCALSTORAGE",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCookie",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "object",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "storageType",
                            "type": "IbStorageTypes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "IbStorageTypes.LOCALSTORAGE"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "object",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "storageType",
                            "type": "IbStorageTypes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "IbStorageTypes.LOCALSTORAGE",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCookie",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({providedIn: 'root'})\nexport class IbStorageService {\n  constructor() { }\n\n  set(key: string, object: any, storageType: IbStorageTypes = IbStorageTypes.LOCALSTORAGE){\n    switch (storageType){\n      case IbStorageTypes.LOCALSTORAGE:\n        localStorage.setItem(key, JSON.stringify(object));\n        break;\n      case IbStorageTypes.COOKIESTORAGE:\n        this.setCookie(key, JSON.stringify(object));\n        break;\n    }\n  }\n\n  get(key: string, storageType: IbStorageTypes = IbStorageTypes.LOCALSTORAGE): any{\n    let data: string;\n    switch (storageType){\n      case IbStorageTypes.LOCALSTORAGE:\n        data = localStorage.getItem(key);\n        break;\n      case IbStorageTypes.COOKIESTORAGE:\n        data = this.getCookie(key);\n        break;\n    }\n    if (data){\n      return JSON.parse(data);\n    }\n    return null;\n  }\n\n  private setCookie(name: string, val: string) {\n    const date = new Date();\n    const value = val;\n    date.setTime(date.getTime() + (7 * 24 * 60 * 60 * 1000));\n    document.cookie = name + '=' + value + '; expires=' + date.toUTCString() + '; path=/';\n  }\n\n  private getCookie(name: string) {\n    const value = '; ' + document.cookie;\n    const parts = value.split('; ' + name + '=');\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n  }\n\n}\n\nexport enum IbStorageTypes{\n  LOCALSTORAGE, COOKIESTORAGE\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 4
            },
            "type": "injectable"
        },
        {
            "name": "IbTableConfService",
            "id": "injectable-IbTableConfService-a04646b13774dddf73d03ddea5adf11f6e30972fe5fabfc0f3bd6f7d4744f70807e893b10574c40d81bd04902bb88e4a3c15e74d0a3d34987f9e9450e647f1f7",
            "file": "src/app/inobeta-ui/ui/table/services/table-conf.service.ts",
            "properties": [
                {
                    "name": "key",
                    "defaultValue": "`${IB_TABLE_STORAGE_NAME}/${this.user}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "IB_TABLE_ANON_USER",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deleteConfig",
                    "args": [
                        {
                            "name": "tableName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "configName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tableName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "configName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConfigsByTableName",
                    "args": [
                        {
                            "name": "tableName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tableName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadConfig",
                    "args": [
                        {
                            "name": "tableName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "configName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ config: any; name: any; }",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tableName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "configName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadFromStorage",
                    "args": [
                        {
                            "name": "tableName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "configName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "tableName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "configName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveConfig",
                    "args": [
                        {
                            "name": "tableName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tableName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDefault",
                    "args": [
                        {
                            "name": "tableName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "configName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tableName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "configName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { IbAuthService } from '../../../http/auth/auth.service';\nimport { IbStorageService } from '../../../storage/storage.service';\n\nexport const IB_TABLE_STORAGE_NAME = 'ib-table-store';\nexport const IB_TABLE_ANON_USER = 'ib-anon';\n\n\n@Injectable({providedIn: 'root'})\nexport class IbTableConfService {\n  private user = IB_TABLE_ANON_USER;\n  private key = `${IB_TABLE_STORAGE_NAME}/${this.user}`;\n\n  constructor(\n    private storage: IbStorageService,\n    private auth: IbAuthService\n  ) { }\n\n  saveConfig(tableName, options, config){\n    const configName = options.data.name;\n    const [error, stored, instance] = this.loadFromStorage(tableName);\n\n    if (options.data.selector === 'edit'){\n      delete instance[options.selectedConfig];\n    }\n\n    if (options.data.default){\n      for (const name of Object.keys(instance)) {\n        console.log(instance[name])\n        instance[name].default = false;\n      }\n    }\n    config.default = options.data.default || false;\n    config.paginator.pageIndex = 0;\n\n    instance[configName] = config;\n    this.storage.set(this.key, {\n      ...stored,\n      [tableName]: instance\n    });\n  }\n\n  loadConfig(tableName, configName){\n    const [error, stored, instance, config] = this.loadFromStorage(tableName, configName);\n    if (error) {\n      return null;\n    }\n    \n    if (config) {\n      return { config, name: configName };\n    }\n\n    if (instance) {\n      for (const name of Object.keys(instance)){\n        if (instance[name].default) {\n          return {config: instance[name], name};\n        }\n      }\n    }\n    return null;\n  }\n\n  deleteConfig(tableName, configName) {\n    const [error, stored, instance] = this.loadFromStorage(tableName, configName);\n    if (error) {\n      return [true, null];\n    }\n\n    delete instance[configName];\n    this.storage.set(this.key, stored);\n    return [false, instance];\n  }\n\n  toggleDefault(tableName, configName) {\n    const [error, stored, instance, config] = this.loadFromStorage(tableName, configName);\n    if (error) {\n      return [true, null];\n    }\n\n    const previousValue = config.default;\n    Object.values<any>(instance).some(c => c.default && (c.default = false));\n    config.default = !previousValue;\n\n    this.storage.set(this.key, stored);\n    return [false, instance];\n  }\n\n  getConfigsByTableName(tableName) {\n    return this.loadFromStorage(tableName);\n  }\n\n  private loadFromStorage(tableName: string, configName?: string) {\n    if (this.auth.isLoggedIn()) {\n      this.user = this.auth.activeSession.user.username;\n    }\n    const stored = this.storage.get(this.key) || {};\n    \n    const instanceExists = (tableName in stored);\n    if (!instanceExists) {\n      return [true, stored, {}, null];\n    }\n\n    const instance = stored[tableName];\n\n    if (!configName) {\n      return [false, stored, instance, null];\n    }\n    \n    const configExists = (configName in instance);\n    if (!configExists) {\n      return [true, stored, instance, null];\n    }\n    \n    const config = instance[configName];\n    return [false, stored, instance, config];\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "IbStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "IbAuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "IbStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "IbAuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "IbToastNotification",
            "id": "injectable-IbToastNotification-2ba791e2ec0b198f622c4a15e671770b8b235b5e243f9e518f29228bfa29cad7fc4db08fe621af364fcbfd24fb015ad3f3b7984039d55a425ff242e916dd4a1f",
            "file": "src/app/inobeta-ui/ui/toast/toast.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "message",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'success'"
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "5000"
                        },
                        {
                            "name": "horizontalPosition",
                            "type": "MatSnackBarHorizontalPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'end'"
                        },
                        {
                            "name": "verticalPosition",
                            "type": "MatSnackBarVerticalPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'top'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'success'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "5000",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "horizontalPosition",
                            "type": "MatSnackBarHorizontalPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'end'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "verticalPosition",
                            "type": "MatSnackBarVerticalPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'top'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatSnackBar, MatSnackBarHorizontalPosition, MatSnackBarVerticalPosition } from '@angular/material/snack-bar';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Injectable({providedIn: 'root'})\nexport class IbToastNotification {\n  constructor(\n    private translate: TranslateService,\n    private snackBar: MatSnackBar\n    ) { }\n\n  open(\n    message,\n    type = 'success',\n    duration = 5000,\n    horizontalPosition:MatSnackBarHorizontalPosition = 'end',\n    verticalPosition: MatSnackBarVerticalPosition = 'top'\n    ){\n    this.translate.get(message).subscribe(t => {\n      this.snackBar.open(t, null, {\n        duration: duration,\n        horizontalPosition: horizontalPosition,\n        verticalPosition: verticalPosition,\n        panelClass: `ib-toast-${type}`\n      });\n    })\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TableEffects",
            "id": "injectable-TableEffects-064b5750e4feacddfc70f607a33290c5beb35bda887585210a96f2407ac6d6515c0e3487bc3908169cd77cc21fe26c73416e57b5250ed2ebeb8affe0c92cdb61",
            "file": "src/app/inobeta-ui/ui/table/store/effects/table.effects.ts",
            "properties": [
                {
                    "name": "onLoadConfig$",
                    "defaultValue": "createEffect(() => {\n    return this.actions$.pipe(\n      ofType(TableActions.ibTableActionLoadConfig),\n      concatLatestFrom(_ => this.store.select(selectTableState)),\n      concatMap(([action, state]) => {\n        const config = this.tableConf.loadConfig(action.tableName, action.configName);\n        this.store.dispatch(TableActions.ibTableActionSetConfig({config, tableName: action.tableName}));\n        return EMPTY as Observable<{ type: string }>;\n      })\n    );\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "onSaveConfig$",
                    "defaultValue": "createEffect(() => {\n    return this.actions$.pipe(\n      ofType(TableActions.ibTableActionSaveConfig),\n      concatLatestFrom(_ => this.store.select(selectTableState)),\n      concatMap(([action, state]) => {\n        const config = state.instances.find(i => i.tableName === action.tableName)?.config;\n        this.tableConf.saveConfig(action.tableName, action.options, config);\n        return EMPTY as Observable<{ type: string }>;\n      })\n    );\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, concatLatestFrom, createEffect, ofType } from '@ngrx/effects';\n\nimport { concatMap } from 'rxjs/operators';\nimport { Observable, EMPTY } from 'rxjs';\n\nimport * as TableActions from '../actions/table.actions';\nimport { IbTableState } from '../reducers/table.reducer';\nimport { Store } from '@ngrx/store';\nimport { selectTableState } from '../selectors/table.selectors';\nimport { IbAuthService } from '../../../../http/auth/auth.service';\nimport { IbStorageService } from '../../../../storage/storage.service';\nimport { IbTableConfService } from '../../services/table-conf.service';\n\nconst STORAGE_NAME = 'ib-table-store';\nconst ANON_USER = 'ib-anon';\n\n@Injectable({providedIn: 'root'})\nexport class TableEffects {\n\n\n  onSaveConfig$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(TableActions.ibTableActionSaveConfig),\n      concatLatestFrom(_ => this.store.select(selectTableState)),\n      concatMap(([action, state]) => {\n        const config = state.instances.find(i => i.tableName === action.tableName)?.config;\n        this.tableConf.saveConfig(action.tableName, action.options, config);\n        return EMPTY as Observable<{ type: string }>;\n      })\n    );\n  });\n\n\n  onLoadConfig$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(TableActions.ibTableActionLoadConfig),\n      concatLatestFrom(_ => this.store.select(selectTableState)),\n      concatMap(([action, state]) => {\n        const config = this.tableConf.loadConfig(action.tableName, action.configName);\n        this.store.dispatch(TableActions.ibTableActionSetConfig({config, tableName: action.tableName}));\n        return EMPTY as Observable<{ type: string }>;\n      })\n    );\n  });\n\n  constructor(\n    private actions$: Actions,\n    private store: Store<IbTableState>,\n    private tableConf: IbTableConfService,\n    private storage: IbStorageService,\n    private auth: IbAuthService) { }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<IbTableState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tableConf",
                        "type": "IbTableConfService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storage",
                        "type": "IbStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "IbAuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<IbTableState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tableConf",
                        "type": "IbTableConfService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storage",
                        "type": "IbStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "IbAuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TotalRowService",
            "id": "injectable-TotalRowService-3ef9d6f3a7b81c50b0bf1fd0fd0219189f18d91eb6f2078c02f9f1bd2b737e30301672dbe41d457921584cc2834b83c19e09f895bf0bc7fd5d0ec566df9c13f5",
            "file": "src/app/inobeta-ui/ui/table/components/table-total-row/total-row.service.ts",
            "properties": [
                {
                    "name": "components",
                    "defaultValue": "{\n    '_default': IbTotalRowAddCellComponent,\n    sum: IbTotalRowSumCellComponent,\n    avg: IbTotalRowAvgCellComponent\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getComponentByFunctionName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { IbTotalRowAddCellComponent } from './cells/ib-total-row-add-cell/ib-total-row-add-cell.component';\nimport { IbTotalRowAvgCellComponent } from './cells/ib-total-row-avg-cell/ib-total-row-avg-cell.component';\nimport { IbTotalRowSumCellComponent } from './cells/ib-total-row-sum-cell/total-row-sum-cell.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TotalRowService {\n  static components = {\n    '_default': IbTotalRowAddCellComponent,\n    sum: IbTotalRowSumCellComponent,\n    avg: IbTotalRowAvgCellComponent\n  };\n\n  getComponentByFunctionName(name: string) {\n    return TotalRowService.components[name];\n  }\n\n  getDefaultComponent() {\n    return IbTotalRowAddCellComponent;\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "IbAuthGuard",
            "id": "injectable-IbAuthGuard-8ea5280a3030ec38928317c8cba796050268a5134ced999e8bcd3be6b4ec22ac682c917af6f84fd22bc8b0ba4308ea524e2b3e9d07f6cca60a868865edce843b",
            "file": "src/app/inobeta-ui/http/auth/guard.service.ts",
            "properties": [
                {
                    "name": "ibHttpGUILoginUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "'ibHttpGUILoginUrl'"
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "routeData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "routeData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable, Optional } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { IbAuthService } from './auth.service';\n\n@Injectable({providedIn: 'root'})\nexport class IbAuthGuard implements CanActivate {\n  constructor(\n    private authService: IbAuthService,\n    private router: Router,\n    @Inject('ibHttpGUILoginUrl') @Optional() public ibHttpGUILoginUrl?: string,\n  ) {\n    this.ibHttpGUILoginUrl = this.ibHttpGUILoginUrl || '/login';\n  }\n\n  canActivate(routeData): boolean {\n    const isAuth = this.authService.activeSession != null;\n    if (!isAuth) { this.router.navigateByUrl(this.ibHttpGUILoginUrl); }\n    return isAuth;\n  }\n}\n\n@Injectable({providedIn: 'root'})\nexport class IbLoginGuard implements CanActivate {\n  public path = '';\n  constructor(\n    private authService: IbAuthService,\n    private router: Router,\n    @Inject('ibHttpGUIDashboardUrl') @Optional() public ibHttpGUIDashboardUrl?: string,\n    ) {\n      this.ibHttpGUIDashboardUrl = this.ibHttpGUIDashboardUrl || '/dashboard';\n    }\n\n  canActivate(): boolean {\n    const isAuth = this.authService.activeSession != null;\n    if (isAuth) {\n      if (this.path !== '') {\n        this.router.navigateByUrl(this.path);\n      } else {\n        this.router.navigateByUrl(this.ibHttpGUIDashboardUrl);\n      }\n    }\n    return !isAuth;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "IbAuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ibHttpGUILoginUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "IbAuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ibHttpGUILoginUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "IbLoginGuard",
            "id": "injectable-IbLoginGuard-8ea5280a3030ec38928317c8cba796050268a5134ced999e8bcd3be6b4ec22ac682c917af6f84fd22bc8b0ba4308ea524e2b3e9d07f6cca60a868865edce843b",
            "file": "src/app/inobeta-ui/http/auth/guard.service.ts",
            "properties": [
                {
                    "name": "ibHttpGUIDashboardUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "'ibHttpGUIDashboardUrl'"
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "path",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable, Optional } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { IbAuthService } from './auth.service';\n\n@Injectable({providedIn: 'root'})\nexport class IbAuthGuard implements CanActivate {\n  constructor(\n    private authService: IbAuthService,\n    private router: Router,\n    @Inject('ibHttpGUILoginUrl') @Optional() public ibHttpGUILoginUrl?: string,\n  ) {\n    this.ibHttpGUILoginUrl = this.ibHttpGUILoginUrl || '/login';\n  }\n\n  canActivate(routeData): boolean {\n    const isAuth = this.authService.activeSession != null;\n    if (!isAuth) { this.router.navigateByUrl(this.ibHttpGUILoginUrl); }\n    return isAuth;\n  }\n}\n\n@Injectable({providedIn: 'root'})\nexport class IbLoginGuard implements CanActivate {\n  public path = '';\n  constructor(\n    private authService: IbAuthService,\n    private router: Router,\n    @Inject('ibHttpGUIDashboardUrl') @Optional() public ibHttpGUIDashboardUrl?: string,\n    ) {\n      this.ibHttpGUIDashboardUrl = this.ibHttpGUIDashboardUrl || '/dashboard';\n    }\n\n  canActivate(): boolean {\n    const isAuth = this.authService.activeSession != null;\n    if (isAuth) {\n      if (this.path !== '') {\n        this.router.navigateByUrl(this.path);\n      } else {\n        this.router.navigateByUrl(this.ibHttpGUIDashboardUrl);\n      }\n    }\n    return !isAuth;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "IbAuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ibHttpGUIDashboardUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "IbAuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ibHttpGUIDashboardUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "IbAuthInterceptor",
            "id": "injectable-IbAuthInterceptor-7776d56e973e470e4b56845c546685bb802c585aa9be92a2b9ef9cd74466dbf25505d707a99f694e526821aec38f485e268f20f77284c9d10abbc2177f71e7d0",
            "file": "src/app/inobeta-ui/http/http/auth.interceptor.ts",
            "properties": [
                {
                    "name": "ibHttpAPILoginUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "'ibHttpAPILoginUrl'"
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ibHttpEnableInterceptors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "'ibHttpEnableInterceptors'"
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ibHttpToastOnLoginFailure",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "'ibHttpToastOnLoginFailure'"
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { IbToastNotification } from '../../ui/toast/toast.service';\nimport { IbSessionService } from '../auth/session.service';\n\n@Injectable({providedIn: 'root'})\nexport class IbAuthInterceptor implements HttpInterceptor {\n  constructor(\n    private router: Router,\n    private ibToast: IbToastNotification,\n    private session: IbSessionService,\n    @Inject('ibHttpEnableInterceptors') @Optional() public ibHttpEnableInterceptors?: boolean,\n    @Inject('ibHttpAPILoginUrl') @Optional() public ibHttpAPILoginUrl?: string,\n    @Inject('ibHttpToastOnLoginFailure') @Optional() public ibHttpToastOnLoginFailure?: string,\n  ) {\n    this.ibHttpEnableInterceptors = this.ibHttpEnableInterceptors === null ? true : false;\n    this.ibHttpAPILoginUrl = this.ibHttpAPILoginUrl || '/api/login';\n    this.ibHttpToastOnLoginFailure = this.ibHttpToastOnLoginFailure || 'shared.ibHttp.authFailure';\n  }\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(catchError(err => {\n      if (!this.ibHttpEnableInterceptors) {\n        return throwError(err);\n      }\n      if (request.url !== this.ibHttpAPILoginUrl && err.status === 401) {\n        this.ibToast.open(this.ibHttpToastOnLoginFailure, 'warning');\n        this.session.logout(false);\n      }\n      return throwError(err);\n    }));\n\n\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ibToast",
                        "type": "IbToastNotification",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "session",
                        "type": "IbSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ibHttpEnableInterceptors",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "ibHttpAPILoginUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "ibHttpToastOnLoginFailure",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ibToast",
                        "type": "IbToastNotification",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "session",
                        "type": "IbSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ibHttpEnableInterceptors",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ibHttpAPILoginUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ibHttpToastOnLoginFailure",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        },
        {
            "name": "IbErrorInterceptor",
            "id": "injectable-IbErrorInterceptor-22bacc7bd6f5c542b444ee05c73cc3d8b7d5f551316bc5fcfcf7bce4acb88d88b4510c2c51c261bd56052d5825d8a65b4fc02b19e5f860e6799a1f2c102ebd25",
            "file": "src/app/inobeta-ui/http/http/error.interceptor.ts",
            "properties": [
                {
                    "name": "ibHttpEnableInterceptors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "'ibHttpEnableInterceptors'"
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ibHttpToastErrorCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "'ibHttpToastErrorCode'"
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ibHttpToastErrorField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "'ibHttpToastErrorField'"
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ibHttpToastOnGenericFailure",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "'ibHttpToastOnGenericFailure'"
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ibHttpToastOnStatusCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "'ibHttpToastOnStatusCode'"
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { IbToastNotification } from '../../ui/toast/toast.service';\n\n@Injectable({providedIn: 'root'})\nexport class IbErrorInterceptor implements HttpInterceptor {\n  constructor(\n    private ibToast: IbToastNotification,\n    private translate: TranslateService,\n    @Inject('ibHttpEnableInterceptors') @Optional() public ibHttpEnableInterceptors?: boolean,\n    @Inject('ibHttpToastOnGenericFailure') @Optional() public ibHttpToastOnGenericFailure?: string,\n    @Inject('ibHttpToastErrorField') @Optional() public ibHttpToastErrorField?: string,\n    @Inject('ibHttpToastOnStatusCode') @Optional() public ibHttpToastOnStatusCode?: any,\n    @Inject('ibHttpToastErrorCode') @Optional() public ibHttpToastErrorCode?: string,\n  ) {\n    this.ibHttpEnableInterceptors = this.ibHttpEnableInterceptors === null ? true : false;\n    this.ibHttpToastOnGenericFailure = this.ibHttpToastOnGenericFailure || 'shared.ibHttp.genericFailure';\n    this.ibHttpToastOnStatusCode = this.ibHttpToastOnStatusCode || {};\n    this.ibHttpToastErrorCode = this.ibHttpToastErrorCode || null;\n  }\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(catchError(err => {\n      if (!this.ibHttpEnableInterceptors) {\n        return throwError(err);\n      }\n      if ([200, 401].indexOf(err.status) === -1) {\n        let errorMessage = this.ibHttpToastOnGenericFailure;\n\n        if (this.ibHttpToastOnStatusCode[err.status]) {\n          errorMessage = this.ibHttpToastOnStatusCode[err.status];\n        }\n\n        if (this.ibHttpToastErrorField && err.error && err.error[this.ibHttpToastErrorField]) {\n          errorMessage = err.error[this.ibHttpToastErrorField];\n        }\n\n        if (this.ibHttpToastErrorCode && err.error && err.error[this.ibHttpToastErrorCode]) {\n          const codeError = `shared.ibHttp.error${err.error[this.ibHttpToastErrorCode]}`;\n          const instant = this.translate.instant(codeError);\n          if (instant !== `shared.ibHttp.error${err.error[this.ibHttpToastErrorCode]}`) {\n            errorMessage = instant;\n          }\n        }\n        this.ibToast.open(errorMessage, 'error');\n      }\n      return throwError(err);\n    }));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ibToast",
                        "type": "IbToastNotification",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ibHttpEnableInterceptors",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "ibHttpToastOnGenericFailure",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "ibHttpToastErrorField",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "ibHttpToastOnStatusCode",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "ibHttpToastErrorCode",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "ibToast",
                        "type": "IbToastNotification",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ibHttpEnableInterceptors",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ibHttpToastOnGenericFailure",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ibHttpToastErrorField",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ibHttpToastOnStatusCode",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ibHttpToastErrorCode",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "_IbFilterBase",
            "id": "class-_IbFilterBase-141e409d810c3eaa2b5d9e2779c67e09abad44645bf092fdfcd38c9f6881a3c3b7d80a54e5a97453634ef91775064c34939218452e9a64969d65ab3c23b4cc55",
            "file": "src/app/inobeta-ui/ui/kai-filter/filters/base/filter-base.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Directive, Input, ViewChild } from \"@angular/core\";\nimport { IbFilter } from \"../../filter.component\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { IbFilterDef } from \"../../filter.types\";\nimport { IbFilterButton } from \"../../filter-button/filter-button.component\";\n\nexport abstract class _IbFilterBase {\n  button: IbFilterButton;\n\n  name: string;\n  set ibTableColumnName(value) {\n    this.name = value;\n  }\n\n  get isDirty() {\n    return this.searchCriteria.dirty;\n  }\n\n  searchCriteria: FormGroup | FormControl;\n\n  constructor(public filter: IbFilter) {}\n\n  applyFilter() {\n    if (!this.searchCriteria.valid) {\n      this.searchCriteria.markAllAsTouched();\n      return;\n    }\n    this.filter.update();\n    this.closeMenu();\n  }\n\n  clear(update = true) {\n    this.searchCriteria.markAsPristine();\n    this.searchCriteria.clearValidators();\n    this.searchCriteria.reset();\n    update && this.filter.update();\n  }\n\n  closeMenu() {\n    this.button.closeMenu();\n  }\n\n  abstract build: () => IbFilterDef;\n}\n\n@Directive({\n  selector: \"ib-filter-base\",\n})\nexport class IbFilterBase extends _IbFilterBase {\n  @ViewChild(IbFilterButton) button: IbFilterButton;\n\n  @Input() name: string;\n  @Input() set ibTableColumnName(value) {\n    this.name = value;\n  }\n\n  constructor(public filter: IbFilter) {\n    super(filter);\n  }\n\n  ngOnInit() {\n    if (!this.name) {\n      return;\n    }\n\n    this.filter.form.addControl(this.name, this.searchCriteria);\n  }\n\n  build: () => IbFilterDef;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "filter",
                        "type": "IbFilter",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "filter",
                        "type": "IbFilter",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "build",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFilterButton",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFilter",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "searchCriteria",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup | FormControl",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [
                {
                    "name": "applyFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "update",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "update",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "ibTableColumnName": {
                    "name": "ibTableColumnName",
                    "setSignature": {
                        "name": "ibTableColumnName",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 11,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "isDirty": {
                    "name": "isDirty",
                    "getSignature": {
                        "name": "isDirty",
                        "type": "",
                        "returnType": "",
                        "line": 15
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbCheckbox",
            "id": "class-IbCheckbox-90d88f9b502475014401616e042aeeb977d843179ae715c4fb51c95eaa53b6b47fae5bc25e7047445769197fd6281d669fcb504fa9fa848dbcc8000a0086f785",
            "file": "src/app/inobeta-ui/ui/forms/controls/checkbox.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IbFormControlBase } from './form-control-base';\n\nexport class IbCheckbox extends IbFormControlBase<string> {\n  controlType = 'checkbox';\n}\n",
            "properties": [
                {
                    "name": "controlType",
                    "defaultValue": "'checkbox'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlBaseComponent",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "debounceOnChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "setupChangeEvent",
                    "args": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "IbFormControlBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbDataSource",
            "id": "class-IbDataSource-6236b5c91b46d9a6912fee4c54a166cd2ebbe41f74882fefc68b5f2915fd7265669eb3aca639b00d808df6f82c7bc45bd0ef5ea4db41987dfc79596f2fedc462",
            "file": "src/app/inobeta-ui/ui/kai-table/table-data-source.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DataSource } from \"@angular/cdk/collections\";\nimport { MatSort, Sort, SortDirection } from \"@angular/material/sort\";\nimport {\n  MatTableDataSourcePageEvent,\n  MatTableDataSourcePaginator,\n} from \"@angular/material/table\";\nimport {\n  BehaviorSubject,\n  Observable,\n  Subject,\n  Subscription,\n  merge,\n  of,\n} from \"rxjs\";\nimport {\n  catchError,\n  debounceTime,\n  map,\n  skipWhile,\n  startWith,\n  switchMap,\n} from \"rxjs/operators\";\nimport { IbKaiTableState } from \"./table.types\";\n\nexport class IbDataSource<\n  T,\n  P extends MatTableDataSourcePaginator = MatTableDataSourcePaginator\n> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  // private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<any>({});\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  // private readonly _internalPageChanges = new Subject<void>();\n\n  private readonly _refresh = new Subject<void>();\n\n  _renderChangesSubscription: Subscription | null = null;\n\n  get data() {\n    return this._data.value;\n  }\n\n  set data(data: T[]) {\n    data = Array.isArray(data) ? data : [];\n    this._data.next(data);\n  }\n\n  /** MatTableDataSource compat */\n  get filteredData() {\n    return this._data.value;\n  }\n  \n  get sort(): MatSort | null {\n    return this._sort;\n  }\n\n  set sort(sort: MatSort | null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n\n  private _sort: MatSort | null;\n\n  get paginator(): P | null {\n    return this._paginator;\n  }\n\n  set paginator(paginator: P | null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n\n  private _paginator: P | null;\n\n  get state() {\n    return this._state.value;\n  }\n\n  set state(value) {\n    this._state.next(value);\n  }\n\n  _state = new BehaviorSubject<IbKaiTableState>(IbKaiTableState.IDLE);\n\n  get filter() {\n    return this._filter.value;\n  }\n\n  set filter(value) {\n    this._filter.next(value);\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  _updateChangeSubscription() {\n    const sortChange: Observable<Sort | null | void> = this._sort\n      ? (merge(\n          this._sort.sortChange,\n          this._sort.initialized\n        ) as Observable<Sort | void>)\n      : of(null);\n\n    const pageChange: Observable<MatTableDataSourcePageEvent | null | void> =\n      this._paginator\n        ? (merge(\n            this._paginator.page,\n            // this._internalPageChanges,\n            this._paginator.initialized\n          ) as Observable<MatTableDataSourcePageEvent | void>)\n        : of(null);\n\n    if (sortChange && this._paginator) {\n      sortChange.subscribe(() => (this._paginator.pageIndex = 0));\n    }\n\n    const dataChange = merge(this._refresh, sortChange, pageChange).pipe(\n      startWith([]),\n      skipWhile(\n        () => this._sort === undefined || this._paginator === undefined\n      ),\n      debounceTime(0),\n      switchMap(() => {\n        this.state = IbKaiTableState.LOADING;\n        return this.fetchData(\n          this._sort.active,\n          this._sort.direction,\n          this._paginator.pageIndex\n        ).pipe(\n          catchError(() => {\n            this.state = IbKaiTableState.HTTP_ERROR;\n            return of(null);\n          })\n        );\n      }),\n      map((data) => {\n        if (data === null || data === undefined) {\n          return [];\n        }\n\n        this.state = IbKaiTableState.IDLE;\n        this._paginator.length = this.updatePaginator(data);\n        return this.mapData(data);\n      })\n    );\n\n    this._renderChangesSubscription?.unsubscribe();\n    this._renderChangesSubscription = dataChange.subscribe((data) =>\n      this._data.next(data)\n    );\n  }\n\n  connect(): Observable<readonly T[]> {\n    if (!this._renderChangesSubscription) {\n      this._updateChangeSubscription();\n    }\n\n    return this._data;\n  }\n\n  disconnect(): void {\n    this._data?.unsubscribe();\n    this._renderChangesSubscription?.unsubscribe();\n  }\n\n  filterPredicate() {}\n\n  fetchData(sort: string, order: SortDirection, page: number): Observable<any> {\n    return of(this.data);\n  }\n\n  mapData(result: any): T[] {\n    return result;\n  }\n\n  refresh() {\n    this._refresh.next();\n  }\n\n  updatePaginator(result: any): number {\n    return this.mapData(result).length + 1;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "initialData",
                        "type": "T[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    }
                ],
                "line": 97,
                "jsdoctags": [
                    {
                        "name": "initialData",
                        "type": "T[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<T[]>",
                    "optional": false,
                    "description": "<p>Stream that emits when a new data array is set on the data source.</p>\n",
                    "line": 30,
                    "rawdescription": "\nStream that emits when a new data array is set on the data source.",
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "_filter",
                    "defaultValue": "new BehaviorSubject<any>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Stream that emits when a new filter string is set on the data source.</p>\n",
                    "line": 36,
                    "rawdescription": "\nStream that emits when a new filter string is set on the data source.",
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "_paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "P | null",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_refresh",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Used to react to internal changes of the paginator that are made by the data source itself.</p>\n",
                    "line": 41,
                    "rawdescription": "\nUsed to react to internal changes of the paginator that are made by the data source itself.",
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "_renderChangesSubscription",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | null",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "_sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort | null",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_state",
                    "defaultValue": "new BehaviorSubject<IbKaiTableState>(IbKaiTableState.IDLE)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                }
            ],
            "methods": [
                {
                    "name": "_updateChangeSubscription",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "connect",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "disconnect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchData",
                    "args": [
                        {
                            "name": "sort",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "order",
                            "type": "SortDirection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "order",
                            "type": "SortDirection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterPredicate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "mapData",
                    "args": [
                        {
                            "name": "result",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updatePaginator",
                    "args": [
                        {
                            "name": "result",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "DataSource",
            "accessors": {
                "data": {
                    "name": "data",
                    "setSignature": {
                        "name": "data",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "data",
                                "type": "T[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 49,
                        "jsdoctags": [
                            {
                                "name": "data",
                                "type": "T[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "data",
                        "type": "",
                        "returnType": "",
                        "line": 45
                    }
                },
                "filteredData": {
                    "name": "filteredData",
                    "getSignature": {
                        "name": "filteredData",
                        "type": "",
                        "returnType": "",
                        "line": 55,
                        "rawdescription": "\nMatTableDataSource compat",
                        "description": "<p>MatTableDataSource compat</p>\n"
                    }
                },
                "sort": {
                    "name": "sort",
                    "setSignature": {
                        "name": "sort",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "sort",
                                "type": "MatSort | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 63,
                        "jsdoctags": [
                            {
                                "name": "sort",
                                "type": "MatSort | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "sort",
                        "type": "",
                        "returnType": "MatSort | null",
                        "line": 59
                    }
                },
                "paginator": {
                    "name": "paginator",
                    "setSignature": {
                        "name": "paginator",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "paginator",
                                "type": "P | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 74,
                        "jsdoctags": [
                            {
                                "name": "paginator",
                                "type": "P | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "paginator",
                        "type": "",
                        "returnType": "P | null",
                        "line": 70
                    }
                },
                "state": {
                    "name": "state",
                    "setSignature": {
                        "name": "state",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 85,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "",
                        "line": 81
                    }
                },
                "filter": {
                    "name": "filter",
                    "setSignature": {
                        "name": "filter",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 95,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "filter",
                        "type": "",
                        "returnType": "",
                        "line": 91
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbDropdown",
            "id": "class-IbDropdown-ff99150637e9ffdbc579db117933d003e30600daa69618767b09256c9119fb8b67c3eefcca25b273dd24c111ee1c279390f37b33801d121968e7322228110242",
            "file": "src/app/inobeta-ui/ui/forms/controls/dropdown.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IbFormControlBase } from './form-control-base';\n\nexport class IbDropdown extends IbFormControlBase<string> {\n  controlType = 'dropdown';\n}\n",
            "properties": [
                {
                    "name": "controlType",
                    "defaultValue": "'dropdown'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlBaseComponent",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "debounceOnChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "setupChangeEvent",
                    "args": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "IbFormControlBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbFormControlBase",
            "id": "class-IbFormControlBase-7ae5904db3cd9462db3d6b357a0f7599efc7d7faf90a391b06076d28772d35cbb8f157114d418061e7878dced08daeb90974cf3da2e597ce523235f688e0ce15",
            "file": "src/app/inobeta-ui/ui/forms/controls/form-control-base.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { UntypedFormControl, ValidatorFn, Form, UntypedFormGroup, Validators } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { TemplateRef, Type } from '@angular/core';\n\nexport class IbFormControlBase<T> {\n  public value: T;\n  public disabled: boolean;\n  public key: string;\n  public label: string;\n  public required: boolean;\n  public order: number;\n  public controlType: string;\n  public type: string;\n  public validators: ValidatorFn[];\n  public options: {key?: string | number, value: string}[];\n  public change: (c: UntypedFormControl) => void;\n  public width: string;\n  public control: IbFormControlBaseComponent;\n  public cols: number;\n  public rows: number;\n  public debounceOnChange: number;\n\n  constructor(options: IbFormControlBaseParams<T> = {}) {\n\n    this.value = options.value;\n    this.disabled = options.disabled || false;\n    this.key = options.key || '';\n    this.label = options.label || '';\n    this.validators = options.validators || [];\n    this.required = !!options.required;\n    if(this.validators.indexOf(Validators.required) >= 0){\n      this.required = true;\n    }\n    this.order = options.order === undefined ? 1 : options.order;\n    this.controlType = options.controlType || '';\n    this.type = options.type || '';\n    this.options = options.options || [];\n    this.width = options.width || '';\n    this.control = options.control || null;\n    this.cols = options.cols || 1;\n    this.rows = options.rows || 1;\n    this.debounceOnChange = (options.debounceOnChange >= 0) ? options.debounceOnChange : 0;\n    this.setupChangeEvent(options);\n  }\n\n\n  private setupChangeEvent(options) {\n\n    let previousValue = this.value;\n    const changeSubject = new Subject();\n    this.change = (c: UntypedFormControl) => {\n      if (options.change && c.value !== previousValue) { changeSubject.next(c); }\n    };\n    changeSubject.pipe(\n      debounceTime(this.debounceOnChange)\n    ).subscribe((control: UntypedFormControl) => {\n      previousValue = control.value;\n      options.change(control);\n    });\n\n  }\n\n}\n\nexport interface IbFormControlBaseParams<T> {\n  value?: T;\n  disabled?: boolean;\n  key?: string;\n  label?: string;\n  required?: boolean;\n  order?: number;\n  controlType?: string;\n  type?: string;\n  validators?: ValidatorFn[];\n  options?: {key?: string | number, value: string}[];\n  change?: (c: UntypedFormControl) => void;\n  width?: string;\n  control?: IbFormControlBaseComponent;\n  cols?: number;\n  rows?: number;\n  debounceOnChange?: number;\n}\n\nexport interface IbFormControlInterface {\n  data: IbFormControlData;\n}\n\n\nexport class IbFormControlBaseComponent {\n  constructor(public component: Type<any>, public data: IbFormControlData) {}\n}\n\nexport interface IbFormControlData {\n  base: IbFormControlBaseParams<any>;\n  self?: UntypedFormControl;\n  form?: UntypedFormGroup;\n  hasError?: (errorCode: string) => boolean;\n  formControlErrors?: TemplateRef<any>;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IbFormControlBaseParams<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IbFormControlBaseParams<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlBaseComponent",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "debounceOnChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "setupChangeEvent",
                    "args": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbFormControlBaseComponent",
            "id": "class-IbFormControlBaseComponent-7ae5904db3cd9462db3d6b357a0f7599efc7d7faf90a391b06076d28772d35cbb8f157114d418061e7878dced08daeb90974cf3da2e597ce523235f688e0ce15",
            "file": "src/app/inobeta-ui/ui/forms/controls/form-control-base.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { UntypedFormControl, ValidatorFn, Form, UntypedFormGroup, Validators } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { TemplateRef, Type } from '@angular/core';\n\nexport class IbFormControlBase<T> {\n  public value: T;\n  public disabled: boolean;\n  public key: string;\n  public label: string;\n  public required: boolean;\n  public order: number;\n  public controlType: string;\n  public type: string;\n  public validators: ValidatorFn[];\n  public options: {key?: string | number, value: string}[];\n  public change: (c: UntypedFormControl) => void;\n  public width: string;\n  public control: IbFormControlBaseComponent;\n  public cols: number;\n  public rows: number;\n  public debounceOnChange: number;\n\n  constructor(options: IbFormControlBaseParams<T> = {}) {\n\n    this.value = options.value;\n    this.disabled = options.disabled || false;\n    this.key = options.key || '';\n    this.label = options.label || '';\n    this.validators = options.validators || [];\n    this.required = !!options.required;\n    if(this.validators.indexOf(Validators.required) >= 0){\n      this.required = true;\n    }\n    this.order = options.order === undefined ? 1 : options.order;\n    this.controlType = options.controlType || '';\n    this.type = options.type || '';\n    this.options = options.options || [];\n    this.width = options.width || '';\n    this.control = options.control || null;\n    this.cols = options.cols || 1;\n    this.rows = options.rows || 1;\n    this.debounceOnChange = (options.debounceOnChange >= 0) ? options.debounceOnChange : 0;\n    this.setupChangeEvent(options);\n  }\n\n\n  private setupChangeEvent(options) {\n\n    let previousValue = this.value;\n    const changeSubject = new Subject();\n    this.change = (c: UntypedFormControl) => {\n      if (options.change && c.value !== previousValue) { changeSubject.next(c); }\n    };\n    changeSubject.pipe(\n      debounceTime(this.debounceOnChange)\n    ).subscribe((control: UntypedFormControl) => {\n      previousValue = control.value;\n      options.change(control);\n    });\n\n  }\n\n}\n\nexport interface IbFormControlBaseParams<T> {\n  value?: T;\n  disabled?: boolean;\n  key?: string;\n  label?: string;\n  required?: boolean;\n  order?: number;\n  controlType?: string;\n  type?: string;\n  validators?: ValidatorFn[];\n  options?: {key?: string | number, value: string}[];\n  change?: (c: UntypedFormControl) => void;\n  width?: string;\n  control?: IbFormControlBaseComponent;\n  cols?: number;\n  rows?: number;\n  debounceOnChange?: number;\n}\n\nexport interface IbFormControlInterface {\n  data: IbFormControlData;\n}\n\n\nexport class IbFormControlBaseComponent {\n  constructor(public component: Type<any>, public data: IbFormControlData) {}\n}\n\nexport interface IbFormControlData {\n  base: IbFormControlBaseParams<any>;\n  self?: UntypedFormControl;\n  form?: UntypedFormGroup;\n  hasError?: (errorCode: string) => boolean;\n  formControlErrors?: TemplateRef<any>;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "component",
                        "type": "Type<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "IbFormControlData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 90,
                "jsdoctags": [
                    {
                        "name": "component",
                        "type": "Type<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "IbFormControlData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Type<any>",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlData",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbMatAutocompleteControl",
            "id": "class-IbMatAutocompleteControl-4e5e68411c9e9bde39a9d4a2ef833804c983788b3b2485a92730fbe1540992b3f0a16a4e7ee8d6c04b5e8204198cdda6af0910e8f5ba8cf875046ffa3675d630",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/autocomplete.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IbFormControlInterface, IbFormControlBase, IbFormControlBaseParams,\n  IbFormControlBaseComponent, IbFormControlData } from '../../forms/controls/form-control-base';\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: '[ib-mat-autocomplete]',\n  template: `\n  <mat-form-field appearance=\"fill\" style=\"width: 100%;\" [formGroup]=\"data.form\">\n    <mat-label>{{data.base.label | translate}}</mat-label>\n    <input\n      matInput\n      type=\"text\"\n      [formControlName]=\"data.base.key\"\n      #searchBox\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n      (input)=\"onSearchChange($event.target['value'], data.base.options)\"\n      (focus)=\"onSearchChange($event.target['value'], data.base.options)\"\n      [matAutocomplete]=\"auto\"\n      />\n      <mat-icon\n        style=\"cursor:pointer;color:#666;\"\n        matSuffix\n        (click)=\"data.self.reset(); data.base.change(data.self)\"\n      >{{'clear'}}</mat-icon>\n      <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"data.base.change(data.self)\">\n        <mat-option\n          *ngFor=\"let item of autocompleteFiltered\"\n          [value]=\"item.value\"\n          (click)=\"selectedItem = item\"\n          >\n          {{item.value}}\n        </mat-option>\n      </mat-autocomplete>\n    <mat-error>\n      <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n    </mat-error>\n  </mat-form-field>\n  `\n})\n\nexport class IbMatAutocompleteComponent implements IbFormControlInterface {\n  @Input() data: IbFormControlData;\n  autocompleteFiltered = [];\n  selectedItem: any;\n  multiSearchAnd = (text, searchWords) => (\n    searchWords.every((el) => {\n      return text.match(new RegExp(el, 'i'));\n    })\n  )\n  onSearchChange(input: string, values) {\n    this.autocompleteFiltered = values.filter(el =>\n      this.multiSearchAnd((el.value).toLowerCase(),\n        input.toLowerCase().split('%').filter(e => {\n          return e !== '' && e !== ' ';\n        }))\n    );\n  }\n}\n\n\nexport class IbMatAutocompleteControl extends IbFormControlBase<string> {\n  constructor(options: IbFormControlBaseParams<string>) {\n    super(options);\n    this.control = new IbFormControlBaseComponent(IbMatAutocompleteComponent, {\n      base: this\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IbFormControlBaseParams<string>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IbFormControlBaseParams<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlBaseComponent",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "debounceOnChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "setupChangeEvent",
                    "args": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "IbFormControlBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbMatButtonControl",
            "id": "class-IbMatButtonControl-ca2cd37a8a1214d4d35bb5ca49b78fb402315d614e0d0d89071bdaaf2dbaface48c1fbbb17f6642293bf4f656d8f95da8c86fbc0ad0e02db033c74f9527a6fce",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/button.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { UntypedFormGroup } from '@angular/forms';\nimport { IbFormControlBase, IbFormControlBaseComponent, IbFormControlBaseParams, IbFormControlData, IbFormControlInterface } from '../../forms/controls/form-control-base';\nimport { IbModalMessageService } from '../../modal/modal-message.service';\n\n@Component({\n  selector: '[ib-mat-button]',\n  template: `\n<div fxLayout=\"row\" fxLayout=\"space-around center\" style=\"padding-top:5px;padding-bottom:5px;height:45px;\">\n  <button\n    (click)=\"handleActionClick()\"\n    [type]=\"(data.base.key === 'submit') ? 'submit' : 'button'\"\n    [disabled]=\"data.base.disabled || ((data.base.requireValidation) && !data.form.valid)\"\n    mat-raised-button\n    [color]=\"data.base.color\"\n  >{{data.base.label | translate}}</button>\n</div>\n  `\n})\n\nexport class IbMatButtonComponent implements IbFormControlInterface {\n  @Input() data: IbMatButtonData;\n  constructor(private dialog: IbModalMessageService) {\n\n  }\n  handleActionClick() {\n    if (this.data.base.key === 'submit') {\n      return;\n    }\n\n    if (this.data.base.requireConfirmOnDirty && this.data.form && this.data.form.dirty) {\n      return this.dialog.show( {\n        title: 'shared.ibForms.unsavedTitle',\n        message: 'shared.ibForms.unsavedMessage'\n      }).subscribe(result => {\n        if (result) {\n          this.data.base.handler(this.data.form);\n        }\n      });\n    }\n\n    this.data.base.handler(this.data.form);\n  }\n}\n\n\nexport class IbMatButtonControl extends IbFormControlBase<string> {\n  color;\n  handler;\n  requireValidation;\n  requireConfirmOnDirty;\n  constructor(options: IbMatButtonParams) {\n    if (options.key === 'submit') { options.requireValidation = true; }\n    super(options);\n    this.color = options.color || 'primary';\n    this.handler = options.handler;\n    this.requireValidation = options.requireValidation || false;\n    this.requireConfirmOnDirty = options.requireConfirmOnDirty || false;\n    this.control = new IbFormControlBaseComponent(IbMatButtonComponent, {\n      base: this\n    });\n  }\n\n}\n\nexport interface IbMatButtonParams extends IbFormControlBaseParams<string> {\n  color?: string;\n  requireValidation?: boolean;\n  requireConfirmOnDirty?: boolean;\n  handler?: (form: UntypedFormGroup) => void;\n}\n\n\n\nexport interface IbMatButtonData extends IbFormControlData {\n  base: IbMatButtonParams;\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IbMatButtonParams",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IbMatButtonParams",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "handler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "requireConfirmOnDirty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "requireValidation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlBaseComponent",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "debounceOnChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "setupChangeEvent",
                    "args": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "IbFormControlBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbMatCheckboxControl",
            "id": "class-IbMatCheckboxControl-c7d78caaabb34c89a980fdedcd9df1826e3da0fa201ab605afc027e66db4b95f413b1af14b95cf589a674b0292b9479705f4738308731b60a2e2201e919165d2",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/checkbox.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IbFormControlInterface, IbFormControlBase, IbFormControlBaseComponent,\n  IbFormControlBaseParams, IbFormControlData } from '../../forms/controls/form-control-base';\n\n@Component({\n  selector: '[ib-mat-checkbox]',\n  template: `\n  <div style=\"width: 100%;\" [formGroup]=\"data.form\">\n      <mat-checkbox\n        [formControlName]=\"data.base.key\"\n        (change)=\"data.base.change(data.self)\"\n      >{{data.base.label | translate}}{{(data.base.required) ? '*' : ''}}</mat-checkbox>\n    <mat-error>\n      <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n    </mat-error>\n</div>\n  `\n})\n\nexport class IbMatCheckboxComponent implements IbFormControlInterface {\n  @Input() data: IbFormControlData;\n}\n\n\nexport class IbMatCheckboxControl extends IbFormControlBase<boolean | number | string> {\n  constructor(options: IbFormControlBaseParams<boolean | number | string>) {\n    if (!options.value) { options.value = false; }\n    super(options);\n    this.control = new IbFormControlBaseComponent(IbMatCheckboxComponent, {\n      base: this\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IbFormControlBaseParams<boolean | number | string>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IbFormControlBaseParams<boolean | number | string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlBaseComponent",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "debounceOnChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "setupChangeEvent",
                    "args": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "IbFormControlBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbMatDatepickerControl",
            "id": "class-IbMatDatepickerControl-355c58d314f9da53afcd1b44b36c707602424f05fe870e453e75c1e82bc987feae33ed5e4779af54366737ad0c62f926073c6ab3ab344435c3a0beece5e70394",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/datepicker.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { AbstractControl, ValidatorFn } from '@angular/forms';\nimport { DateAdapter } from '@angular/material/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IbFormControlInterface, IbFormControlBase, IbFormControlBaseComponent,\n  IbFormControlBaseParams, IbFormControlData } from '../../forms/controls/form-control-base';\n\n@Component({\n  selector: '[ib-mat-datepicker]',\n  template: `\n  <mat-form-field appearance=\"fill\" style=\"width: 100%;\" [formGroup]=\"data.form\">\n    <mat-label>{{data.base.label | translate}}</mat-label>\n    <input\n      [formControlName]=\"data.base.key\"\n      matInput\n      [matDatepicker]=\"picker\"\n      (dateInput)=\"data.base.change(data.self)\"\n      (dateChange)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n    >\n    <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n    <mat-datepicker #picker></mat-datepicker>\n    <mat-error>\n      <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n    </mat-error>\n  </mat-form-field>\n  `\n})\n\nexport class IbMatDatepickerComponent implements IbFormControlInterface {\n  @Input() data: IbFormControlData;\n  constructor(\n    private adapter: DateAdapter<any>,\n    private translate: TranslateService\n  ) {\n    this.adapter.setLocale(this.translate.currentLang);\n    this.translate.onTranslationChange.subscribe(ev => {\n      this.adapter.setLocale(ev.lang);\n    });\n  }\n}\n\n\nexport class IbMatDatepickerControl extends IbFormControlBase<string | Date> {\n  constructor(options: IbFormControlBaseParams<string | Date>) {\n    if (options.value && typeof options.value === 'string') {\n      options.value = new Date(options.value);\n    }\n    if (!options.value) {\n      options.value = null;\n    }\n    if (options.required) {\n      options.validators = options.validators || [];\n      options.validators.push(dateRequiredValidator());\n    }\n    super(options);\n    this.control = new IbFormControlBaseComponent(IbMatDatepickerComponent, {\n      base: this\n    });\n  }\n}\n\nexport function dateRequiredValidator(): ValidatorFn {\n  return (control: AbstractControl): {[key: string]: any} | null => {\n    if (!control.value || isNaN(control.value.getTime())) {\n      return {\n        required: true\n      };\n    }\n  };\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IbFormControlBaseParams<string | Date>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IbFormControlBaseParams<string | Date>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlBaseComponent",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "debounceOnChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "setupChangeEvent",
                    "args": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "IbFormControlBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbMatDatepickerI18n",
            "id": "class-IbMatDatepickerI18n-9f6b010bcf4dd2d53fb0bc06a59221f8d24979fd0e708aa493deaadcadc35f8bc45c7be01e2fce1c3ae05b5c9319bd6cdd492a12d8c494d298fa6861a7837eef",
            "file": "src/app/inobeta-ui/ui/material-forms/intl/datepicker.intl.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Platform } from '@angular/cdk/platform';\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { MAT_DATE_LOCALE, NativeDateAdapter } from '@angular/material/core';\nimport { TranslateService } from '@ngx-translate/core';\n\nexport class IbMatDatepickerI18n {\n\n    constructor(private readonly translate: TranslateService) {}\n\n    getDateFormats() {\n        return {\n          parse: {\n            dateInput: 'DD/MM/YYYY',\n            },\n          display: {\n            dateInput: 'DD/MM/YYYY',\n            monthYearLabel: 'MMMM YYYY',\n            dateA11yLabel: 'DD/MM/YYYY',\n            monthYearA11yLabel: 'MMMM YYYY',\n          }\n        };\n    }\n}\n\n// FIXME: this adapter supports it format only but it is linked to translate service. We must support a dynamic parse and format\n\n@Injectable({providedIn: 'root'})\nexport class IbMatDateAdapter extends NativeDateAdapter {\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super(matDateLocale, platform);\n    super.setLocale(matDateLocale);\n  }\n\n  parse(date: string, displayFormat?: string): Date {\n    if (date === '') {\n      return null;\n    }\n    const dateParts = date.split('/');\n    if (dateParts.length === 3) {\n      return new Date(parseInt(dateParts[2], 10), parseInt(dateParts[1], 10) - 1, parseInt(dateParts[0], 10));\n    }\n    return new Date(NaN);\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('IbMatDateAdapter: Cannot format invalid date.');\n    }\n   // if (displayFormat === 'input') {\n    let day: string = date.getDate().toString();\n    day = +day < 10 ? '0' + day : day;\n    let month: string = (date.getMonth() + 1).toString();\n    month = +month < 10 ? '0' + month : month;\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n   // }\n   // return date.toDateString();\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n  deserialize(value: any): Date | null {\n    if (!value) {\n      return null;\n    }\n    return super.deserialize(value);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getDateFormats",
                    "args": [],
                    "optional": false,
                    "returnType": "{ parse: { dateInput: string; }; display: { dateInput: string; monthYearLabel: string; dateA11yLabel: string; monthYearA11yLabel: string; }; }",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbMatDropdownControl",
            "id": "class-IbMatDropdownControl-e813c2e7331c0e5fe2fe0af27c33b5dc455c41412c2511d5540ba066e898d8f33274d753dfc39cba954ea819e442370c13faad765402d4407f2644d9cbe4b6e1",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/dropdown.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IbFormControlInterface, IbFormControlBase, IbFormControlBaseComponent, IbFormControlBaseParams, IbFormControlData } from '../../forms/controls/form-control-base';\n\n@Component({\n  selector: '[ib-mat-dropdown]',\n  template: `\n    <mat-form-field appearance=\"fill\" style=\"width: 100%;\"  [formGroup]=\"data.form\">\n      <mat-label>{{data.base.label | translate}}</mat-label>\n      <mat-select\n        [formControlName]=\"data.base.key\"\n        [multiple]=\"data.base.multiple\"\n        (selectionChange)=\"handleSelection($event)\"\n      >\n        <mat-option\n          *ngIf=\"data.base.multiple\"\n          class=\"ib-mat-dropdown-select-all\"\n          disabled\n          (click)=\"selectAll()\"\n        >{{ (this.all ? 'shared.ibDropdown.selectNone' : 'shared.ibDropdown.selectAll') | translate}}</mat-option>\n        <mat-option *ngIf=\"data.base.emptyRow\" [value]=\"data.base.emptyRow.key\">\n          {{data.base.emptyRow.value | translate}}\n        </mat-option>\n        <mat-option *ngFor=\"let opt of data.base.options\" [value]=\"opt.key\">\n          {{opt.value | translate}}\n        </mat-option>\n      </mat-select>\n      <mat-icon\n        matSuffix\n        *ngIf=\"hintMessage\"\n        [matTooltip]=\"hintMessage | translate\"\n      >\n          help_outline\n      </mat-icon>\n      <mat-error>\n        <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n      </mat-error>\n    </mat-form-field>\n\n\n    <!-- TODO: example style with inline search\nhttps://stackblitz.com/edit/angular-ev8r2t?file=src%2Fapp%2Fselect-multiple-example.html\n      <mat-option class=\"select-all\">\n        <input type=\"text\" matInput (click)=\"$event.stopPropagation()\"/>\n      </mat-option>\n      <mat-option class=\"select-all\" (click)=\"selectAll()\">{{ this.all ? 'none' : 'all'}}</mat-option>\n      <div style=\"overflow:auto;height:160px;\">\n      <mat-option *ngFor=\"let t of toppingList\" [value]=\"t.key\">{{t.value}}</mat-option>\n      </div>\n-->\n  `,\n  styles: [`\n      .ib-mat-dropdown-select-all ::ng-deep mat-pseudo-checkbox {\n        display: none;\n      }\n\n      /* TODO(mdc-migration): The following rule targets internal classes of option that may no longer apply for the MDC version. */\n      .ib-mat-dropdown-select-all ::ng-deep .mat-option-text {\n        color: rgba(0, 0, 0, 0.87) !important;\n        cursor: pointer !important;\n      }\n  `]\n})\n\nexport class IbMatDropdownComponent implements IbFormControlInterface {\n  @Input() data: IbDropdownData;\n  all = false;\n  get hintMessage() {\n    return (this.data.base.hintMessage) ? this.data.base.hintMessage() : null;\n  }\n\n  selectAll() {\n    let newValues: any = [];\n    this.all = !this.all;\n    if (this.all) {\n      newValues = this.data.base.options.map(t => t.key);\n    }\n    this.data.self.setValue(newValues);\n    this.data.base.change(this.data.self);\n  }\n\n\n\n  handleSelection(who) {\n    if (this.data.base.multiple) {\n      //if (who.value.length > 0 && who.value[0] === undefined) { return; }\n      const currentValue = this.data.self.value;\n      this.all = currentValue && currentValue.length === this.data.base.options.length;\n    }\n\n    this.data.base.change(this.data.self);\n  }\n\n}\n\n\nexport class IbMatDropdownControl extends IbFormControlBase<string | string[] | number | number[]> {\n  multiple = false;\n  emptyRow = null;\n  hintMessage;\n  constructor(options: IbMatDropdownParams) {\n    super(options);\n    this.multiple = options.multiple || false;\n    this.emptyRow = options.emptyRow || null;\n    this.hintMessage = options.hintMessage || null;\n    this.control = new IbFormControlBaseComponent(IbMatDropdownComponent, {\n      base: this\n    });\n  }\n}\n\n\n\nexport interface IbMatDropdownParams extends IbFormControlBaseParams<string | string[] | number | number[]> {\n  multiple?: boolean;\n  emptyRow?: {key?: string | number, value: string};\n  hintMessage?: () => string;\n}\n\n\nexport interface IbDropdownData extends IbFormControlData {\n  base: IbMatDropdownParams;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IbMatDropdownParams",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 99,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IbMatDropdownParams",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "emptyRow",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "hintMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlBaseComponent",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "debounceOnChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "setupChangeEvent",
                    "args": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "IbFormControlBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbMatLabelControl",
            "id": "class-IbMatLabelControl-72035a4723a9417a493cca622b0bc3e984756a2fa855541e97f658ad53d0567769772e34b1cb13b342786741b5e7fac587bb44c83ac00ab9fdda94665b53d91c",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/label.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IbFormControlInterface, IbFormControlBase, IbFormControlBaseComponent, IbFormControlBaseParams, IbFormControlData } from '../../forms/controls/form-control-base';\n\n@Component({\n  selector: '[ib-mat-label]',\n  template: `\n    <div fxFlex style=\"width:100%;height:50px;;\"  fxLayout=\"row\" fxFlexAlign=\"center\" >\n      <div\n        *ngIf=\"data.base.label\"\n        style=\"padding-right:10px;\"\n        fxLayout=\"row\"\n        fxFlexAlign=\"center\"\n        fxFlex=\"40%\"\n      >{{data.base.label | translate}}: </div>\n      <div\n        *ngIf=\"data.base.value\"\n        style=\"font-weight:bold;\"\n        fxLayout=\"row\"\n        fxFlexAlign=\"center\"\n        fxFlex=\"60%\"\n      >{{ data.base.value }}</div>\n</div>\n  `\n})\n\nexport class IbMatLabelComponent implements IbFormControlInterface {\n  @Input() data: IbFormControlData;\n}\n\n\nexport class IbMatLabelControl extends IbFormControlBase<string>{\n  constructor(options: IbFormControlBaseParams<string>){\n    super(options)\n    this.control = new IbFormControlBaseComponent(IbMatLabelComponent, {\n      base: this\n    })\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IbFormControlBaseParams<string>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IbFormControlBaseParams<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlBaseComponent",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "debounceOnChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "setupChangeEvent",
                    "args": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "IbFormControlBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbMatPaddingControl",
            "id": "class-IbMatPaddingControl-6db82b75ce704e82e78a39b45d0d0c7fbcb4c3afa83cabaab8d61cc5845acce28c13a9831e2e51694e686644e338c3349fb9582f414613b6be055aa56943e81c",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/padding.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IbFormControlBase, IbFormControlBaseComponent, IbFormControlBaseParams, IbFormControlData, IbFormControlInterface } from '../../forms/controls/form-control-base';\n@Component({\n  selector: '[ib-mat-padding]',\n  template: ``\n})\nexport class IbMatPaddingComponent implements IbFormControlInterface {\n  @Input() data: IbFormControlData;\n}\n\nexport class IbMatPaddingControl extends IbFormControlBase<string>{\n  constructor(options: IbFormControlBaseParams<string>){\n    super(options)\n    this.control = new IbFormControlBaseComponent(IbMatPaddingComponent, {\n      base: this\n    })\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IbFormControlBaseParams<string>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IbFormControlBaseParams<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlBaseComponent",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "debounceOnChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "setupChangeEvent",
                    "args": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "IbFormControlBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbMatPaginatorI18n",
            "id": "class-IbMatPaginatorI18n-5b120b96f0168679fc4e91a56591b144bd9fb2118d735744b7859e21c87a29f89186bb3a7bfd384dd2418825ef4511c5bde2d07f15ba3aee380a1c61f46ae49a",
            "file": "src/app/inobeta-ui/ui/table/material-intl/paginator.intl.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { MatPaginatorIntl } from '@angular/material/paginator';\nimport { TranslateService } from '@ngx-translate/core';\n\nexport class IbMatPaginatorI18n {\n\n    constructor(private readonly translate: TranslateService) {}\n\n    getPaginatorIntl(): MatPaginatorIntl {\n        const paginatorIntl = new MatPaginatorIntl();\n        paginatorIntl.itemsPerPageLabel = this.translate.instant('shared.ibTable.paginator.itemsPerPageLabel');\n        paginatorIntl.nextPageLabel = this.translate.instant('shared.ibTable.paginator.nextPageLabel');\n        paginatorIntl.previousPageLabel = this.translate.instant('shared.ibTable.paginator.previousPageLabel');\n        paginatorIntl.firstPageLabel = this.translate.instant('shared.ibTable.paginator.firstPageLabel');\n        paginatorIntl.lastPageLabel = this.translate.instant('shared.ibTable.paginator.lastPageLabel');\n        paginatorIntl.getRangeLabel = this.getRangeLabel.bind(this);\n        return paginatorIntl;\n    }\n\n    private getRangeLabel(page: number, pageSize: number, length: number): string {\n        if (length === 0 || pageSize === 0) {\n            return this.translate.instant('shared.ibTable.paginator.rangeLabel1', { length });\n        }\n        length = Math.max(length, 0);\n        const startIndex = page * pageSize;\n        // If the start index exceeds the list length, do not try and fix the end index to the end.\n        const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n        return this.translate.instant('shared.ibTable.paginator.rangeLabel2', { startIndex: startIndex + 1, endIndex, length });\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getPaginatorIntl",
                    "args": [],
                    "optional": false,
                    "returnType": "MatPaginatorIntl",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRangeLabel",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbMatRadioControl",
            "id": "class-IbMatRadioControl-14f504b1674b1b031eab5e492d01aecab79e4216c655cc9ee341b2f8f35304348c51f21333eec1ef59fa4a3cb162147f10d84e9567510989d65a9b1cca0e71b4",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/radio.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IbFormControlInterface, IbFormControlBase, IbFormControlBaseComponent, IbFormControlBaseParams, IbFormControlData } from '../../forms/controls/form-control-base';\n\n@Component({\n  selector: '[ib-mat-radio]',\n  template: `\n  <div style=\"width: 100%;\" [formGroup]=\"data.form\">\n    <mat-label [attr.for]=\"data.base.key\" style=\"display: block\">{{data.base.label | translate}} {{(data.base.required) ? '*' : ''}}</mat-label>\n        <mat-radio-group\n        [formControlName]=\"data.base.key\"\n        (change)=\"data.base.change(data.self)\"\n        >\n          <mat-radio-button style=\"margin: 5px\" *ngFor=\"let opt of data.base.options\" [value]=\"opt.key\">\n            {{opt.value | translate}}\n          </mat-radio-button>\n        </mat-radio-group>\n    <mat-error>\n      <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n    </mat-error>\n</div>\n  `\n})\n\nexport class IbMatRadioComponent implements IbFormControlInterface {\n  @Input() data: IbFormControlData;\n}\n\n\nexport class IbMatRadioControl extends IbFormControlBase<string>{\n  constructor(options: IbFormControlBaseParams<string>){\n    super(options);\n    this.control = new IbFormControlBaseComponent(IbMatRadioComponent, {\n      base: this\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IbFormControlBaseParams<string>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IbFormControlBaseParams<string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlBaseComponent",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "debounceOnChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "setupChangeEvent",
                    "args": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "IbFormControlBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbMatSlideToggleControl",
            "id": "class-IbMatSlideToggleControl-c55eb1d4bd116ecc2658a0686171193a0d7c1f415447a9b7743ad2b30fbec9dae4435d2e7ea5b76d19de86f408eaa1d50850edd390c60264d23ae7b202ee4e88",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/slide-toggle.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IbFormControlBase, IbFormControlBaseComponent,\n  IbFormControlBaseParams, IbFormControlData, IbFormControlInterface } from '../../forms/controls/form-control-base';\n\n@Component({\n  selector: '[ib-mat-slide-toggle]',\n  template: `\n    <div style=\"width: 100%;\" [formGroup]=\"data.form\">\n        <mat-slide-toggle\n            [formControlName]=\"data.base.key\"\n            (change)=\"data.base.change(data.self)\"\n        >\n            {{data.base.label | translate}}{{(data.base.required) ? '*' : ''}}\n        </mat-slide-toggle>\n        <mat-error>\n            <ng-container\n                *ngTemplateOutlet=\"data.formControlErrors;context: this\">\n            </ng-container>\n        </mat-error>\n    </div>\n  `\n})\n\nexport class IbMatSlideToggleComponent implements IbFormControlInterface {\n  @Input() data: IbFormControlData;\n}\n\n\nexport class IbMatSlideToggleControl extends IbFormControlBase<boolean | number | string> {\n  constructor(options: IbFormControlBaseParams<boolean | number | string>) {\n    if (!options.value) {\n        options.value = false;\n    }\n    super(options);\n    this.control = new IbFormControlBaseComponent(IbMatSlideToggleComponent, {\n      base: this\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IbFormControlBaseParams<boolean | number | string>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IbFormControlBaseParams<boolean | number | string>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlBaseComponent",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "debounceOnChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "setupChangeEvent",
                    "args": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "IbFormControlBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbMatTextareaControl",
            "id": "class-IbMatTextareaControl-4073182fd9f72646cc841615210871243d54b24e09e061dc9760fd7f294c1095fc94903a5595ed4757b4f990a4ea3530caaf32167c9ee74e9bf5584bc9935245",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/textarea.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IbFormControlBase, IbFormControlBaseComponent, IbFormControlBaseParams, IbFormControlData, IbFormControlInterface } from '../../forms/controls/form-control-base';\n\n@Component({\n  selector: '[ib-mat-textarea]',\n  template: `\n  <mat-form-field appearance=\"fill\" style=\"width: 100%;\" [formGroup]=\"data.form\">\n    <mat-label>{{data.base.label | translate}}</mat-label>\n    <textarea\n      matInput\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      [type]=\"data.base.type\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n      [style.height]=\"data.base.height\"\n    ></textarea>\n    <mat-error>\n      <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n    </mat-error>\n  </mat-form-field>\n  `\n})\n\nexport class IbMatTextareaComponent implements IbFormControlInterface {\n  @Input() data: IbMatTextareaData;\n}\n\n\nexport class IbMatTextareaControl extends IbFormControlBase<string>{\n  height = 'auto'\n  constructor(options: IbMatTextareaParams){\n    super(options)\n    this.height = options.height || 'auto';\n    this.control = new IbFormControlBaseComponent(IbMatTextareaComponent, {\n      base: this\n    })\n  }\n}\n\n\nexport interface IbMatTextareaParams extends IbFormControlBaseParams<string>{\n  height?: string;\n}\n\n\nexport interface IbMatTextareaData extends IbFormControlData {\n  base: IbMatTextareaParams;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IbMatTextareaParams",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IbMatTextareaParams",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "height",
                    "defaultValue": "'auto'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlBaseComponent",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "debounceOnChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "setupChangeEvent",
                    "args": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "IbFormControlBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbMatTextboxControl",
            "id": "class-IbMatTextboxControl-bbb6112b823fe6aceab6ad1265e0566b1876d343e0b60779e9ba303d71c37411c8ea4d9454cb189009514e2775815ad3ed0d18709060c56e067d9a1c2722679a",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/textbox.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { AbstractControl, Validators } from '@angular/forms';\nimport { IbFormControlInterface, IbFormControlBase, IbFormControlBaseComponent, IbFormControlBaseParams, IbFormControlData } from '../../forms/controls/form-control-base';\n\n@Component({\n  selector: '[ib-mat-textbox]',\n  template: `\n  <mat-form-field appearance=\"fill\" style=\"width: 100%;\" [formGroup]=\"data.form\">\n    <mat-label>{{data.base.label | translate}}</mat-label>\n    <!--\n      https://github.com/angular/angular/issues/13243\n      type is not dynamic (see angular issue)\n    -->\n    <input\n      matInput\n      *ngIf=\"data.base.type === 'number'\"\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      [min]=\"minValidator\"\n      [max]=\"maxValidator\"\n      type=\"number\"\n      (keyup)=\"data.base.change(data.self)\"\n      (input)=\"data.base.change(data.self)\"\n    />\n    <input\n      matInput\n      *ngIf=\"data.base.type === 'text'\"\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      [maxlength]=\"maxLengthValidator\"\n      type=\"text\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n    />\n    <input\n      matInput\n      *ngIf=\"data.base.type === 'email'\"\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      type=\"email\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n    />\n    <input\n      matInput\n      *ngIf=\"data.base.type === 'password'\"\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      type=\"password\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n    />\n    <input\n      matInput\n      *ngIf=\"data.base.type === 'date'\"\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      type=\"date\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n    />\n    <mat-icon\n      matSuffix\n      *ngIf=\"hintMessage\"\n      [matTooltip]=\"hintMessage | translate\"\n    >\n        help_outline\n    </mat-icon>\n    <mat-error>\n      <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n    </mat-error>\n  </mat-form-field>\n  `\n})\n\nexport class IbMatTextboxComponent implements IbFormControlInterface {\n  @Input() data: IbMatTextboxData;\n  get hintMessage() {\n    return (this.data.base.hintMessage) ? this.data.base.hintMessage() : null;\n  }\n\n  get minValidator() {\n    for (const func of this.data.base.validators) {\n      const validation = func({value: -Infinity} as AbstractControl);\n      if (validation && validation.min) {\n        return validation.min.min;\n      }\n    }\n    return null;\n  }\n\n  get maxValidator() {\n    for (const func of this.data.base.validators) {\n      const validation = func({value: Infinity} as AbstractControl);\n      if (validation && validation.max) {\n        return validation.max.max;\n      }\n    }\n    return null;\n  }\n\n\n  get maxLengthValidator() {\n    for (const func of this.data.base.validators) {\n      const getMethods = (obj) => {\n        let properties = new Set()\n        let currentObj = obj\n        do {\n          Object.getOwnPropertyNames(currentObj).map(item => properties.add(item))\n        } while ((currentObj = Object.getPrototypeOf(currentObj)))\n        return [...properties.keys()].filter((item: any) => typeof obj[item] === 'function') as string[]\n      }\n      const sampleString = this.data.self.value\n      if(!sampleString) return Infinity\n\n      const methods: string[] = getMethods(sampleString)\n      const fakeString: any = {}\n      for(let m of methods){\n        fakeString[m] = sampleString[m].bind(sampleString)\n      }\n      fakeString['length'] = Infinity\n      const validation = func({value: fakeString} as AbstractControl);\n      if (validation && validation.maxlength) {\n        return validation.maxlength.requiredLength;\n      }\n    }\n    return Infinity;\n  }\n}\n\n\nexport class IbMatTextboxControl extends IbFormControlBase<number | string> {\n  hintMessage;\n\n  constructor(options: IbMatTextboxParams) {\n    options.type = options.type || 'text';\n    super(options);\n    this.hintMessage = options.hintMessage || null;\n    this.control = new IbFormControlBaseComponent(IbMatTextboxComponent, {\n      base: this\n    });\n  }\n}\n\n\nexport interface IbMatTextboxParams extends IbFormControlBaseParams<number | string> {\n  hintMessage?: () => string;\n}\n\nexport interface IbMatTextboxData extends IbFormControlData {\n    base: IbMatTextboxParams;\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "IbMatTextboxParams",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 133,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "IbMatTextboxParams",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "hintMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 133
                },
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlBaseComponent",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "debounceOnChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "setupChangeEvent",
                    "args": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "IbFormControlBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbRadio",
            "id": "class-IbRadio-e0c5a4ed3ac8d331fb0e2c2440e9775e9fd4ba1d14cdf64a47e35da6954e9b0c161d5d6e229a85f2001629ddea6be83fdea4f22179f70f41d3ac527c74048140",
            "file": "src/app/inobeta-ui/ui/forms/controls/radio.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IbFormControlBase } from './form-control-base';\n\nexport class IbRadio extends IbFormControlBase<string> {\n  controlType = 'radio';\n}\n",
            "properties": [
                {
                    "name": "controlType",
                    "defaultValue": "'radio'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlBaseComponent",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "debounceOnChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "setupChangeEvent",
                    "args": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "IbFormControlBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbSession",
            "id": "class-IbSession-1aafe96e378fe15cb532334fde3e25a346b213736bdf41ad455b7416cad0c45ba83acd5faddbe3bd023df3e66f1c759396ecb83195c07fd9a12635891942ae1c",
            "file": "src/app/inobeta-ui/http/auth/session.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class IbSession {\n  user: IbUserLogin;\n  userData: any;\n  valid: boolean;\n  authToken: string;\n}\n\nexport class IbUserLogin {\n  username: string;\n  password: string;\n  rememberMe: boolean;\n}\n\nexport enum IbAuthTypes {\n  BASIC_AUTH,\n  JWT\n}\n",
            "properties": [
                {
                    "name": "authToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbUserLogin",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "userData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "valid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbTableAction",
            "id": "class-IbTableAction-a4f4e080752540ce9bd3464e7b534d672fdc7924f9c377963f6fdd0288275bd7a2b555a39964529a14fa2eace72c61fe1d09bb57584e660fc0afc24dbfa6560f",
            "file": "src/app/inobeta-ui/ui/table/models/titles.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ElementRef } from '@angular/core';\nimport { IbTableItem } from './table-item.model';\n\nexport enum IbTableTitlesTypes {\n  ANY = 'any',\n  DATE = 'date',\n  TAG = 'tag', // #FIXME create a filter\n  NUMBER = 'number',\n  HOUR = 'hour', // #FIXME create a filter\n  COMBOBOX = 'combobox', // #FIXME create a filter based on comboOptions\n  BOOLEAN = 'boolean',\n  STRING = 'string',\n  /**\n   * @deprecated do not use this enum type. It will be removed in a future release\n   */\n  INPUT_NUMBER = 'input-number',\n  /**\n   * @deprecated do not use this enum type. It will be removed in a future release\n   */\n  CUSTOM = 'custom'\n}\n\nexport const ibTableSupportedFilters = [\n  IbTableTitlesTypes.ANY,\n  IbTableTitlesTypes.DATE,\n  IbTableTitlesTypes.STRING,\n  IbTableTitlesTypes.BOOLEAN,\n  IbTableTitlesTypes.NUMBER,\n  IbTableTitlesTypes.INPUT_NUMBER\n];\n\nexport enum IbTableCellAligns {\n  LEFT= 'left', CENTER= 'center', RIGHT= 'right'\n}\n\nexport class IbTableComboItem {\n  label: string;\n  value: any;\n}\n\nexport class IbTableTitles {\n  key: string;\n  value: string;\n  type: IbTableTitlesTypes = IbTableTitlesTypes.ANY;\n  filterable = false; // #FIXME change default with true\n  comboOptions?: any; // #FIXME define a model for this\n  /**\n   * @deprecated format will be removed, use cell rendering instead\n   */\n  format?: any;  // #FIXME change default to 1.2-2\n  /**\n   * @deprecated align will be removed, use cell rendering instead\n   */\n  align?: IbTableCellAligns;\n  width = 'auto';\n  /**\n   * @deprecated\n   */\n  showTotalSum? = false;\n  /**\n   * @deprecated do not use this field, it will be removed in a future release\n   */\n  templateHeaderClick?: ElementRef;\n  /**\n   * @deprecated className will be removed, use cell rendering instead\n   */\n  className?: string;\n  /**\n   * @deprecated related to INPUT_NUMBER, this field will be removed\n   */\n  placeHolderInput?: string;\n  /**\n   * @deprecated getClassByCondition will be removed, use cell rendering instead\n   */\n  getClassByCondition?: any;\n  /**\n   * @deprecated related to INPUT_NUMBER, this field will be removed\n   */\n  change?: any;\n  /**\n   * @member\n   * Utilizzare `true` o `start` per \"attaccare\" le colonne a sinistra,\n   * `end`, invece, sulla parte destra.\n   */\n  sticky? = undefined;\n}\n\nexport class IbTableAction {\n  label: string;\n  color?: string;\n  handler: (items: IbTableItem[]) => void;\n}\n\n\nexport enum IbTableActionsPosition {\n  BOTH, TOP, BOTTOM\n}\n\nexport enum IbStickyAreas {\n  HEADER, FOOTER, SELECT, DELETE, EDIT, TEMPLATE, SETTINGS\n}\n\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "handler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 89
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbTableComboItem",
            "id": "class-IbTableComboItem-a4f4e080752540ce9bd3464e7b534d672fdc7924f9c377963f6fdd0288275bd7a2b555a39964529a14fa2eace72c61fe1d09bb57584e660fc0afc24dbfa6560f",
            "file": "src/app/inobeta-ui/ui/table/models/titles.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ElementRef } from '@angular/core';\nimport { IbTableItem } from './table-item.model';\n\nexport enum IbTableTitlesTypes {\n  ANY = 'any',\n  DATE = 'date',\n  TAG = 'tag', // #FIXME create a filter\n  NUMBER = 'number',\n  HOUR = 'hour', // #FIXME create a filter\n  COMBOBOX = 'combobox', // #FIXME create a filter based on comboOptions\n  BOOLEAN = 'boolean',\n  STRING = 'string',\n  /**\n   * @deprecated do not use this enum type. It will be removed in a future release\n   */\n  INPUT_NUMBER = 'input-number',\n  /**\n   * @deprecated do not use this enum type. It will be removed in a future release\n   */\n  CUSTOM = 'custom'\n}\n\nexport const ibTableSupportedFilters = [\n  IbTableTitlesTypes.ANY,\n  IbTableTitlesTypes.DATE,\n  IbTableTitlesTypes.STRING,\n  IbTableTitlesTypes.BOOLEAN,\n  IbTableTitlesTypes.NUMBER,\n  IbTableTitlesTypes.INPUT_NUMBER\n];\n\nexport enum IbTableCellAligns {\n  LEFT= 'left', CENTER= 'center', RIGHT= 'right'\n}\n\nexport class IbTableComboItem {\n  label: string;\n  value: any;\n}\n\nexport class IbTableTitles {\n  key: string;\n  value: string;\n  type: IbTableTitlesTypes = IbTableTitlesTypes.ANY;\n  filterable = false; // #FIXME change default with true\n  comboOptions?: any; // #FIXME define a model for this\n  /**\n   * @deprecated format will be removed, use cell rendering instead\n   */\n  format?: any;  // #FIXME change default to 1.2-2\n  /**\n   * @deprecated align will be removed, use cell rendering instead\n   */\n  align?: IbTableCellAligns;\n  width = 'auto';\n  /**\n   * @deprecated\n   */\n  showTotalSum? = false;\n  /**\n   * @deprecated do not use this field, it will be removed in a future release\n   */\n  templateHeaderClick?: ElementRef;\n  /**\n   * @deprecated className will be removed, use cell rendering instead\n   */\n  className?: string;\n  /**\n   * @deprecated related to INPUT_NUMBER, this field will be removed\n   */\n  placeHolderInput?: string;\n  /**\n   * @deprecated getClassByCondition will be removed, use cell rendering instead\n   */\n  getClassByCondition?: any;\n  /**\n   * @deprecated related to INPUT_NUMBER, this field will be removed\n   */\n  change?: any;\n  /**\n   * @member\n   * Utilizzare `true` o `start` per \"attaccare\" le colonne a sinistra,\n   * `end`, invece, sulla parte destra.\n   */\n  sticky? = undefined;\n}\n\nexport class IbTableAction {\n  label: string;\n  color?: string;\n  handler: (items: IbTableItem[]) => void;\n}\n\n\nexport enum IbTableActionsPosition {\n  BOTH, TOP, BOTTOM\n}\n\nexport enum IbStickyAreas {\n  HEADER, FOOTER, SELECT, DELETE, EDIT, TEMPLATE, SETTINGS\n}\n\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbTableTitles",
            "id": "class-IbTableTitles-a4f4e080752540ce9bd3464e7b534d672fdc7924f9c377963f6fdd0288275bd7a2b555a39964529a14fa2eace72c61fe1d09bb57584e660fc0afc24dbfa6560f",
            "file": "src/app/inobeta-ui/ui/table/models/titles.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ElementRef } from '@angular/core';\nimport { IbTableItem } from './table-item.model';\n\nexport enum IbTableTitlesTypes {\n  ANY = 'any',\n  DATE = 'date',\n  TAG = 'tag', // #FIXME create a filter\n  NUMBER = 'number',\n  HOUR = 'hour', // #FIXME create a filter\n  COMBOBOX = 'combobox', // #FIXME create a filter based on comboOptions\n  BOOLEAN = 'boolean',\n  STRING = 'string',\n  /**\n   * @deprecated do not use this enum type. It will be removed in a future release\n   */\n  INPUT_NUMBER = 'input-number',\n  /**\n   * @deprecated do not use this enum type. It will be removed in a future release\n   */\n  CUSTOM = 'custom'\n}\n\nexport const ibTableSupportedFilters = [\n  IbTableTitlesTypes.ANY,\n  IbTableTitlesTypes.DATE,\n  IbTableTitlesTypes.STRING,\n  IbTableTitlesTypes.BOOLEAN,\n  IbTableTitlesTypes.NUMBER,\n  IbTableTitlesTypes.INPUT_NUMBER\n];\n\nexport enum IbTableCellAligns {\n  LEFT= 'left', CENTER= 'center', RIGHT= 'right'\n}\n\nexport class IbTableComboItem {\n  label: string;\n  value: any;\n}\n\nexport class IbTableTitles {\n  key: string;\n  value: string;\n  type: IbTableTitlesTypes = IbTableTitlesTypes.ANY;\n  filterable = false; // #FIXME change default with true\n  comboOptions?: any; // #FIXME define a model for this\n  /**\n   * @deprecated format will be removed, use cell rendering instead\n   */\n  format?: any;  // #FIXME change default to 1.2-2\n  /**\n   * @deprecated align will be removed, use cell rendering instead\n   */\n  align?: IbTableCellAligns;\n  width = 'auto';\n  /**\n   * @deprecated\n   */\n  showTotalSum? = false;\n  /**\n   * @deprecated do not use this field, it will be removed in a future release\n   */\n  templateHeaderClick?: ElementRef;\n  /**\n   * @deprecated className will be removed, use cell rendering instead\n   */\n  className?: string;\n  /**\n   * @deprecated related to INPUT_NUMBER, this field will be removed\n   */\n  placeHolderInput?: string;\n  /**\n   * @deprecated getClassByCondition will be removed, use cell rendering instead\n   */\n  getClassByCondition?: any;\n  /**\n   * @deprecated related to INPUT_NUMBER, this field will be removed\n   */\n  change?: any;\n  /**\n   * @member\n   * Utilizzare `true` o `start` per \"attaccare\" le colonne a sinistra,\n   * `end`, invece, sulla parte destra.\n   */\n  sticky? = undefined;\n}\n\nexport class IbTableAction {\n  label: string;\n  color?: string;\n  handler: (items: IbTableItem[]) => void;\n}\n\n\nexport enum IbTableActionsPosition {\n  BOTH, TOP, BOTTOM\n}\n\nexport enum IbStickyAreas {\n  HEADER, FOOTER, SELECT, DELETE, EDIT, TEMPLATE, SETTINGS\n}\n\n",
            "properties": [
                {
                    "name": "align",
                    "deprecated": true,
                    "deprecationMessage": "align will be removed, use cell rendering instead",
                    "type": "IbTableCellAligns",
                    "optional": true,
                    "description": "",
                    "line": 54,
                    "rawdescription": "\n\n",
                    "jsdoctags": [
                        {
                            "pos": 1367,
                            "end": 1432,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 1368,
                                "end": 1378,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>align will be removed, use cell rendering instead</p>\n"
                        }
                    ]
                },
                {
                    "name": "change",
                    "deprecated": true,
                    "deprecationMessage": "related to INPUT_NUMBER, this field will be removed",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 79,
                    "rawdescription": "\n\n",
                    "jsdoctags": [
                        {
                            "pos": 2011,
                            "end": 2078,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 2012,
                                "end": 2022,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>related to INPUT_NUMBER, this field will be removed</p>\n"
                        }
                    ]
                },
                {
                    "name": "className",
                    "deprecated": true,
                    "deprecationMessage": "className will be removed, use cell rendering instead",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 67,
                    "rawdescription": "\n\n",
                    "jsdoctags": [
                        {
                            "pos": 1674,
                            "end": 1743,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 1675,
                                "end": 1685,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>className will be removed, use cell rendering instead</p>\n"
                        }
                    ]
                },
                {
                    "name": "comboOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "filterable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "format",
                    "deprecated": true,
                    "deprecationMessage": "format will be removed, use cell rendering instead",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 50,
                    "rawdescription": "\n\n",
                    "jsdoctags": [
                        {
                            "pos": 1236,
                            "end": 1302,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 1237,
                                "end": 1247,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>format will be removed, use cell rendering instead</p>\n"
                        }
                    ]
                },
                {
                    "name": "getClassByCondition",
                    "deprecated": true,
                    "deprecationMessage": "getClassByCondition will be removed, use cell rendering instead",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 75,
                    "rawdescription": "\n\n",
                    "jsdoctags": [
                        {
                            "pos": 1889,
                            "end": 1968,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 1890,
                                "end": 1900,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>getClassByCondition will be removed, use cell rendering instead</p>\n"
                        }
                    ]
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "placeHolderInput",
                    "deprecated": true,
                    "deprecationMessage": "related to INPUT_NUMBER, this field will be removed",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 71,
                    "rawdescription": "\n\n",
                    "jsdoctags": [
                        {
                            "pos": 1779,
                            "end": 1846,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 1780,
                                "end": 1790,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>related to INPUT_NUMBER, this field will be removed</p>\n"
                        }
                    ]
                },
                {
                    "name": "showTotalSum",
                    "defaultValue": "false",
                    "deprecated": true,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 59,
                    "rawdescription": "\n\n",
                    "jsdoctags": [
                        {
                            "pos": 1493,
                            "end": 1508,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 1494,
                                "end": 1504,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "sticky",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "<p>Utilizzare <code>true</code> o <code>start</code> per &quot;attaccare&quot; le colonne a sinistra,\n<code>end</code>, invece, sulla parte destra.</p>\n",
                    "line": 85,
                    "rawdescription": "\n\nUtilizzare `true` o `start` per \"attaccare\" le colonne a sinistra,\n`end`, invece, sulla parte destra.\n",
                    "jsdoctags": [
                        {
                            "pos": 2108,
                            "end": 2231,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 2109,
                                "end": 2115,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "member"
                            },
                            "comment": "<p>Utilizzare <code>true</code> o <code>start</code> per &quot;attaccare&quot; le colonne a sinistra,\n<code>end</code>, invece, sulla parte destra.</p>\n"
                        }
                    ]
                },
                {
                    "name": "templateHeaderClick",
                    "deprecated": true,
                    "deprecationMessage": "do not use this field, it will be removed in a future release",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 63,
                    "rawdescription": "\n\n",
                    "jsdoctags": [
                        {
                            "pos": 1547,
                            "end": 1624,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 1548,
                                "end": 1558,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>do not use this field, it will be removed in a future release</p>\n"
                        }
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "IbTableTitlesTypes.ANY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTableTitlesTypes",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "width",
                    "defaultValue": "'auto'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbTemplateModel",
            "id": "class-IbTemplateModel-2f1dd643548dbfccc754749f0c625881a31509a3aafbe8bd4e2c012378289bfdab8f97196abb70efca7eb38e895fa7eddf7f7f77590d84d5f06ef612f638b6c0",
            "file": "src/app/inobeta-ui/ui/table/models/template.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {TemplateRef} from '@angular/core';\n\nexport class IbTemplateModel {\n  template: TemplateRef<any>;\n  columnName: string;\n}\n",
            "properties": [
                {
                    "name": "columnName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbTextbox",
            "id": "class-IbTextbox-b6416e7f4f008b8b5cbaa2428cc0a2403721a5034f65fe373f04860b45dec03007a5c8ecd073bce01187cb618d7b3b5f0995d098c0707c65a7a487a94f5661db",
            "file": "src/app/inobeta-ui/ui/forms/controls/textbox.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IbFormControlBase } from './form-control-base';\n\nexport class IbTextbox extends IbFormControlBase<string> {\n  controlType = 'textbox';\n}\n",
            "properties": [
                {
                    "name": "controlType",
                    "defaultValue": "'textbox'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlBaseComponent",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "debounceOnChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "setupChangeEvent",
                    "args": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "IbFormControlBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IbUserLogin",
            "id": "class-IbUserLogin-1aafe96e378fe15cb532334fde3e25a346b213736bdf41ad455b7416cad0c45ba83acd5faddbe3bd023df3e66f1c759396ecb83195c07fd9a12635891942ae1c",
            "file": "src/app/inobeta-ui/http/auth/session.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class IbSession {\n  user: IbUserLogin;\n  userData: any;\n  valid: boolean;\n  authToken: string;\n}\n\nexport class IbUserLogin {\n  username: string;\n  password: string;\n  rememberMe: boolean;\n}\n\nexport enum IbAuthTypes {\n  BASIC_AUTH,\n  JWT\n}\n",
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "rememberMe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MyCustomTextbox",
            "id": "class-MyCustomTextbox-00f665eba68fdadd29f0c81964fecc47747e87e34411b4a05e2e7ac29b7331492251bbdf660bffe116136c2ac8b484cb4083cb7327a5991ca8ca26a08fec7b49",
            "file": "src/app/examples/dynamic-forms-example/my-custom-textbox.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IbFormControlBase, IbFormControlBaseParams, IbFormControlInterface, IbFormControlBaseComponent } from 'src/app/inobeta-ui/ui/forms';\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: '[ib-my-custom-textbox]',\n  template: `\n  <mat-form-field appearance=\"fill\" style=\"width: 100%;\" [formGroup]=\"data.form\">\n    <mat-label>{{data.base.label | translate}} {{data.base.testField}}</mat-label>\n    <input\n      matInput\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      [type]=\"data.base.type\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n    />\n    <mat-icon style=\"cursor:pointer;color:#666;\" matSuffix (click)=\"data.form.controls[data.base.key].reset()\">{{'clear'}}</mat-icon>\n    <mat-error>\n      <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n    </mat-error>\n  </mat-form-field>\n  `\n})\n\nexport class MyCustomTextboxComponent implements IbFormControlInterface {\n  @Input() data: any;\n}\n\n\nexport class MyCustomTextbox extends IbFormControlBase<string>{\n  testField = 'Questa è una prova';\n  constructor(options: MyCustomTextboxParams){\n    super(options)\n    this.testField = options.testField;\n    this.control = new IbFormControlBaseComponent(MyCustomTextboxComponent, {\n      base: this\n    })\n  }\n}\n\nexport interface MyCustomTextboxParams extends IbFormControlBaseParams<string> {\n  testField: string;\n}\n\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "MyCustomTextboxParams",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "MyCustomTextboxParams",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "testField",
                    "defaultValue": "'Questa è una prova'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlBaseComponent",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "debounceOnChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "setupChangeEvent",
                    "args": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "IbFormControlBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "IbFormControlBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "IbFilterBase",
            "id": "directive-IbFilterBase-141e409d810c3eaa2b5d9e2779c67e09abad44645bf092fdfcd38c9f6881a3c3b7d80a54e5a97453634ef91775064c34939218452e9a64969d65ab3c23b4cc55",
            "file": "src/app/inobeta-ui/ui/kai-filter/filters/base/filter-base.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, ViewChild } from \"@angular/core\";\nimport { IbFilter } from \"../../filter.component\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { IbFilterDef } from \"../../filter.types\";\nimport { IbFilterButton } from \"../../filter-button/filter-button.component\";\n\nexport abstract class _IbFilterBase {\n  button: IbFilterButton;\n\n  name: string;\n  set ibTableColumnName(value) {\n    this.name = value;\n  }\n\n  get isDirty() {\n    return this.searchCriteria.dirty;\n  }\n\n  searchCriteria: FormGroup | FormControl;\n\n  constructor(public filter: IbFilter) {}\n\n  applyFilter() {\n    if (!this.searchCriteria.valid) {\n      this.searchCriteria.markAllAsTouched();\n      return;\n    }\n    this.filter.update();\n    this.closeMenu();\n  }\n\n  clear(update = true) {\n    this.searchCriteria.markAsPristine();\n    this.searchCriteria.clearValidators();\n    this.searchCriteria.reset();\n    update && this.filter.update();\n  }\n\n  closeMenu() {\n    this.button.closeMenu();\n  }\n\n  abstract build: () => IbFilterDef;\n}\n\n@Directive({\n  selector: \"ib-filter-base\",\n})\nexport class IbFilterBase extends _IbFilterBase {\n  @ViewChild(IbFilterButton) button: IbFilterButton;\n\n  @Input() name: string;\n  @Input() set ibTableColumnName(value) {\n    this.name = value;\n  }\n\n  constructor(public filter: IbFilter) {\n    super(filter);\n  }\n\n  ngOnInit() {\n    if (!this.name) {\n      return;\n    }\n\n    this.filter.form.addControl(this.name, this.searchCriteria);\n  }\n\n  build: () => IbFilterDef;\n}\n",
            "selector": "ib-filter-base",
            "providers": [],
            "inputsClass": [
                {
                    "name": "ibTableColumnName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "build",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFilterButton",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "IbFilterButton"
                        }
                    ],
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFilter",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "searchCriteria",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup | FormControl",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "applyFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "update",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "update",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                }
            ],
            "extends": "_IbFilterBase",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "filter",
                        "type": "IbFilter",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "filter",
                        "type": "IbFilter",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "ibTableColumnName": {
                    "name": "ibTableColumnName",
                    "setSignature": {
                        "name": "ibTableColumnName",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 53,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "IbFormControlDirective",
            "id": "directive-IbFormControlDirective-7804531942de44f0e4f8ec0c8bff1feaaa4e7e1f112126a3edab593dd54b3561cb8e7779bbd075bcf394139d89abc3d829c2b8b2dd55f5f8f002cbccef5c276f",
            "file": "src/app/inobeta-ui/ui/material-forms/material-form-control/material-form-control.component.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Component, OnInit, Directive, ViewContainerRef, ViewChild, ComponentFactoryResolver, TemplateRef, OnChanges, SimpleChanges } from '@angular/core';\nimport { IbDynamicFormControlComponent } from '../../forms/dynamic-form-control/dynamic-form-control.component';\nimport { IbFormControlInterface } from '../../forms/controls/form-control-base';\n\n\n@Directive({\n  selector: '[formControlHost]',\n})\nexport class IbFormControlDirective {\n  constructor(public viewContainerRef: ViewContainerRef) { }\n}\n\n\n@Component({\n  selector: 'ib-material-form-control',\n  templateUrl: './material-form-control.component.html',\n})\nexport class IbMaterialFormControlComponent extends IbDynamicFormControlComponent implements OnInit, OnChanges {\n  @ViewChild(IbFormControlDirective, {static: true}) formControlHost: IbFormControlDirective;\n  @ViewChild('formControlErrors', {static: true}) formControlErrors: TemplateRef<any>;\n\n  componentRef;\n  constructor(private componentFactoryResolver: ComponentFactoryResolver) {\n    super();\n  }\n  ngOnChanges(changes: SimpleChanges): void {\n    const form = changes['form'];\n    if (form && !form.isFirstChange()) {\n      this.componentRef.instance.data = {\n        ...this.componentRef.instance.data,\n        form: form.currentValue\n      };\n    }\n  }\n  ngOnInit(): void {\n    this.loadComponent();\n  }\n\n  loadComponent() {\n    if (!this.base.control) { return; }\n\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.base.control.component);\n\n    const viewContainerRef = this.formControlHost.viewContainerRef;\n\n    viewContainerRef.clear();\n\n    this.componentRef = viewContainerRef.createComponent<IbFormControlInterface>(componentFactory);\n    this.componentRef.instance.data = {\n      ...this.base.control.data,\n      form: this.form,\n      self: this.self,\n      hasError: this.hasError,\n      formControlErrors: this.formControlErrors\n    };\n  }\n\n}\n\n\n",
            "selector": "[formControlHost]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "IbKaiRowGroupDirective",
            "id": "directive-IbKaiRowGroupDirective-4b2f90e31ca300b34bab3da96c0e1d6d936a0ac401806079c6a84bcf2fa63972a650ab72f4465f8a72a907b73395bbfd3aa07c8dc2b36d97e8566b069792b26a",
            "file": "src/app/inobeta-ui/ui/kai-table/rowgroup.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, TemplateRef } from \"@angular/core\";\n\n@Directive({\n  selector: '[ibKaiRowGroup]'\n})\nexport class IbKaiRowGroupDirective {\n  constructor(public templateRef: TemplateRef<unknown>) {}\n}\n",
            "selector": "[ibKaiRowGroup]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "IbStickyColumnDirective",
            "id": "directive-IbStickyColumnDirective-d368c821d7da440bb9f0be872e803aeb336b7c917bd24e8ba01d432dbe96c8967878396c18ae81af476b5e43e240b40b717a901d0ade6ea8624b20ebd3ec1520",
            "file": "src/app/inobeta-ui/ui/table/directives/sticky-area/sticky-column.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { StickyColumnData } from './sticky-area';\n\n@Directive({\n  selector: '[ibStickyColumn]'\n})\nexport class IbStickyColumnDirective {\n  @Input() ibStickyColumn: StickyColumnData = {\n    sticky: false\n  };\n\n  constructor(private el: ElementRef, private renderer: Renderer2) { }\n\n  ngAfterViewChecked() {\n    if (!this.ibStickyColumn.sticky) {\n      return;\n    }\n    \n    const el: HTMLElement = this.el.nativeElement;\n\n    if (el.tagName === 'TH' && !Boolean(el.id)) {\n      el.id = 'th-' + this.ibStickyColumn.key;\n    }\n    \n    if (this.ibStickyColumn.sticky === 'end') {\n      const elements = document.querySelectorAll('th.ib-column-sticky.ib-column-sticky-end');\n      this.renderer.setStyle(el, 'position', 'sticky');\n      this.renderer.setStyle(el, 'right', this.calcOffset(Array.from(elements).reverse()) + 'px');\n      this.renderer.setStyle(el, 'z-index', el.tagName === 'TH' ? '110' : '108');\n      this.renderer.addClass(el, 'ib-column-sticky');\n      this.renderer.addClass(el, 'ib-column-sticky-end');\n      return;\n    }\n    \n    const elements = document.querySelectorAll('th.ib-column-sticky:not(.ib-column-sticky-end)');\n    const offset = this.calcOffset(Array.from(elements));\n    this.renderer.setStyle(el, 'position', 'sticky');\n    this.renderer.setStyle(el, 'left', offset + 'px');\n    this.renderer.setStyle(el, 'z-index', el.tagName === 'TH' ? '110' : '108');\n    this.renderer.addClass(el, 'ib-column-sticky');\n  }\n\n  private calcOffset(elements: Element[]) {\n    let acc = 0;\n    for (const el of elements) {\n      if (el.id.includes(this.ibStickyColumn.key)) {\n        break;\n      }\n      acc += el.getBoundingClientRect().width;\n    }\n    return acc;\n  }\n}\n",
            "selector": "[ibStickyColumn]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "ibStickyColumn",
                    "defaultValue": "{\n    sticky: false\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "StickyColumnData",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "calcOffset",
                    "args": [
                        {
                            "name": "elements",
                            "type": "Element[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "type": "Element[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "IbTableTotalRowCellDirective",
            "id": "directive-IbTableTotalRowCellDirective-5b7881dcab62641449e8c56ef52691f8769e615544cd765ded05443d7e92dd0151527ec137230752261dcd72e3e8b7ff56c40a8db0ba81394f03433643e4289f",
            "file": "src/app/inobeta-ui/ui/table/components/table-total-row/cells/ib-total-row-default-cell/ib-total-row-default-cell.component.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Component, ComponentFactoryResolver, ComponentRef, Directive, Input, OnChanges, OnInit, SimpleChanges, Type, ViewChild, ViewContainerRef } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Store } from '@ngrx/store';\nimport { IbTableItem } from '../../../../models/table-item.model';\nimport { IbTableTitles, IbTableTitlesTypes } from '../../../../models/titles.model';\nimport { ibTableActionSetTotalRowCell } from '../../../../store/actions/table.actions';\nimport { IbTableTotalRowApplyDialogComponent } from '../../table-total-row-apply-dialog.component';\nimport { IbTotalRowAddCellComponent } from '../ib-total-row-add-cell/ib-total-row-add-cell.component';\nimport { IbTotalRowBaseCellComponent } from '../ib-total-row-base-cell/ib-total-row-base-cell.component';\n\n@Directive({\n  selector: '[cellHost]',\n})\nexport class IbTableTotalRowCellDirective {\n  constructor(public viewContainerRef: ViewContainerRef) { }\n}\n\nexport interface TotalRowCell {\n  data: any;\n}\n\n@Component({\n  selector: '[ib-total-row-default-cell]',\n  template: '<ng-template cellHost></ng-template>'\n})\nexport class IbTotalRowDefaultCellComponent implements OnInit, OnChanges {\n  @Input() title: IbTableTitles;\n  @Input() sortedData: IbTableItem[];\n  @Input() filteredData: IbTableItem[];\n  @Input() initialCell: Type<any>;\n  @Input() tableName: string;\n\n  @ViewChild(IbTableTotalRowCellDirective, { static: true }) cellHost: IbTableTotalRowCellDirective;\n\n  private componentRef: ComponentRef<IbTotalRowBaseCellComponent>;\n\n  constructor(\n    public dialog: MatDialog,\n    private store: Store,\n    private componentFactoryResolver: ComponentFactoryResolver) { }\n\n  ngOnInit(): void {\n    if (this.initialCell) {\n      return this.loadComponent(this.initialCell);\n    }\n\n    if (this.title.type === IbTableTitlesTypes.NUMBER) {\n      this.loadComponent(IbTotalRowAddCellComponent);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const initialCellChanges = changes.initialCell;\n    const sortedDataChanges = changes.sortedData;\n\n    const shouldChange = this.componentRef && initialCellChanges && !initialCellChanges.isFirstChange();\n    if (shouldChange) {\n      this.loadComponent(this.initialCell);\n    }\n\n    if (sortedDataChanges && !sortedDataChanges.isFirstChange() && this.componentRef) {\n      this.componentRef.instance.data = {\n        ...this.componentRef.instance.data,\n        sortedData: this.sortedData,\n        filteredData: this.filteredData\n      };\n    }\n  }\n\n  loadComponent(component: Type<any>) {\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);\n    const viewContainerRef = this.cellHost.viewContainerRef;\n    viewContainerRef.clear();\n\n    this.componentRef = viewContainerRef.createComponent<any>(componentFactory);\n    this.componentRef.instance.data = {\n      title: this.title,\n      sortedData: this.sortedData,\n      filteredData: this.filteredData,\n    };\n    this.componentRef.instance.addCell.subscribe(this.handleAddCell.bind(this));\n  }\n\n  openDialog() {\n    const dialog = this.dialog.open(IbTableTotalRowApplyDialogComponent, {\n      width: '380px',\n      data: { isSet: Boolean(this.initialCell) }\n    });\n    dialog.afterClosed().subscribe(this.handleDialogClosed.bind(this));\n  }\n\n  private handleAddCell() {\n    this.openDialog();\n  }\n\n  private handleDialogClosed(result: any) {\n    if (!result) {\n      return;\n    }\n    console.log('result', result);\n    // this.loadComponent(result.component);\n    this.store.dispatch(ibTableActionSetTotalRowCell({\n      state: {\n        columnName: this.title.key,\n        func: result.func\n      },\n      tableName: this.tableName\n    }));\n  }\n}\n",
            "selector": "[cellHost]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-f58781db3bfccc6c392472adb7039bf939ce65d0da506d8015481fba2885c1c9807b95a3e543fb61fcc858118a964bd085e8e273d876c0b4266f6b5f05dfe73a",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-root",
            "styleUrls": [],
            "styles": [],
            "template": "<router-outlet *ngIf=\"translateLoaded\"></router-outlet>\n<ib-spinner-loading></ib-spinner-loading>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "translateLoaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {TranslateService} from '@ngx-translate/core';\n\n@Component({\n  selector: 'ib-root',\n  template: `\n    <router-outlet *ngIf=\"translateLoaded\"></router-outlet>\n    <ib-spinner-loading></ib-spinner-loading>\n  `\n})\nexport class AppComponent implements OnInit {\n  translateLoaded = false;\n  ngOnInit() {}\n\n  constructor(\n    private translateService: TranslateService) {\n    this.translateService.setDefaultLang('it');\n    this.translateService.use('it');\n    this.translateService.reloadLang(this.translateService.currentLang).subscribe(() => {\n      this.translateLoaded = true;\n    })\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-a53fd738b978780d39fb5fcc9ae4cfe0088e57a1f6ce674862d57dab9192140bd1c05548a9910db0469a431142886e658ff2e761f15781b2ad430e58d64724d0",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 786,
                            "end": 799,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 787,
                                "end": 795,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 34,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 48,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 50
                    }
                }
            }
        },
        {
            "name": "DialogExampleComponent",
            "id": "component-DialogExampleComponent-ef35985659e1d73b942cfe47eead32daa3e47b22938c20a0b972809a47edb28d0005b1f101308c20a496db486131367d780384284c143a89c7191b24c8a18d09",
            "file": "src/app/examples/dialog-example/dialog-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-dialog-example",
            "styleUrls": [],
            "styles": [],
            "template": "<button (click)=\"open()\">open dialog</button>\n<div>{{ response }}</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbModalMessageService",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "response",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { IbModalMessageService } from 'src/app/inobeta-ui/ui/modal/modal-message.service';\n\n@Component({\n  selector: 'ib-dialog-example',\n  template: `\n  <button (click)=\"open()\">open dialog</button>\n  <div>{{ response }}</div>\n  `\n})\n\nexport class DialogExampleComponent implements OnInit {\n\n  response = '';\n\n  constructor(public dialog: IbModalMessageService) { }\n\n  ngOnInit() { }\n\n\n  open() {\n    this.dialog.show( {\n        title: 'Titolo',\n        message: 'Messaggio',\n        actions: [\n          { label: 'Accent action', value: 'abc', color: 'accent'},\n          { label: 'Basic action', value: 'basic'}\n        ]\n    }).subscribe(result => {\n      this.response = `Clicked on ${result}`;\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "IbModalMessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "IbModalMessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "DynamicFormsExampleComponent",
            "id": "component-DynamicFormsExampleComponent-7b08290eee4416340e5fa4d917386b206dce3bddc1ea4edc6df3a3796e5783cd95d5ef9d4b85ae3607bf28da0a6bfd61f33f2c4af28d5283a90c1f4e1b35fed5",
            "file": "src/app/examples/dynamic-forms-example/dynamic-forms-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-forms-example",
            "styleUrls": [
                "./dynamic-forms-example.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dynamic-forms-example.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "customForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbMaterialFormComponent",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'customForm', {static: true}"
                        }
                    ]
                },
                {
                    "name": "customFormActions",
                    "defaultValue": "[\n    new IbMatButtonControl({\n      key: 'submit',\n      label: 'Search'\n    }),\n    new IbMatButtonControl({\n      key: 'edit',\n      label: 'Edit',\n      color: 'basic',\n      handler: (form) => form.enable()\n    }),\n    new IbMatButtonControl({\n      key: 'clear',\n      label: 'Clear',\n      color: 'accent',\n      requireConfirmOnDirty: true,\n      handler: (form) => form.reset()\n    })\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 260
                },
                {
                    "name": "customFormFields",
                    "defaultValue": "[\n    new IbMatTextboxControl({\n      key: 'firstName',\n      label: 'First name',\n      width: '50%',\n      cols: 2,\n      rows: 1,\n      required: true,\n      validators: [\n        forceValueValidator('Pluto', 'examples.customErrorMessageExample')\n      ]\n    }),\n    new IbMatTextboxControl({\n      key: 'disabledField',\n      label: 'Disabled Field',\n      width: '50%',\n      cols: 2,\n      rows: 1,\n      disabled: true\n    }),\n\n    new IbMatTextboxControl({\n      key: 'changeValueField',\n      label: 'Change my value',\n      validators: [Validators.minLength(3), Validators.maxLength(5), Validators.required],\n      width: '15%',\n      change: (control) => {\n        console.log('current value', control.value);\n      },\n      hintMessage: () => {\n        return 'write something\\nanother like';\n      }\n    }),\n    new IbMatTextboxControl({\n      type: 'email',\n      key: 'email',\n      label: 'Email',\n      width: '15%',\n      cols: 2,\n      rows: 1,\n      required: true,\n      validators: [Validators.email]\n    }),\n    new IbMatTextboxControl({\n      key: 'length',\n      label: 'MinLength=3, MaxLength=12',\n      width: '35%',\n      cols: 4,\n      rows: 1,\n      required: false,\n      validators: [Validators.minLength(3), Validators.maxLength(12)]\n    }),\n    new IbMatDatepickerControl({\n      type: 'date',\n      key: 'dateTime',\n      width: '35%',\n      label: 'Date',\n      value: '2021-01-pippa',\n      required: true,\n      validators: [Validators.min((new Date('2021-05-12')).getTime())],\n      change: (control) => {\n        if (control.value) {\n          console.log('current value', control.value, control.value.getFullYear());\n        }\n      }\n    }),\n    new IbMatDropdownControl({\n      key: 'options',\n      label: 'Options',\n      width: '22%',\n      value: 'test2',\n      emptyRow: { key: null, value: 'NULL' },\n      options: [\n        { key: 'test1', value: 'value1' },\n        { key: 'test2', value: 'value2' },\n        { key: 'test3', value: 'value3' },\n        { key: 'test4', value: 'value4' }\n      ],\n      change: (control) => {\n        console.log('current value', control.value);\n      }\n    }),\n    new IbMatDropdownControl({\n      key: 'optionsMultiple',\n      label: 'Options Multiple',\n      width: '22%',\n      value: ['test1'],\n      multiple: true,\n      options: [\n        { key: 'test1', value: 'value1' },\n        { key: 'test2', value: 'value2' },\n        { key: 'test3', value: 'value3' },\n        { key: 'test4', value: 'value4' }\n      ],\n      change: (control) => {\n        console.log('current value', control.value);\n      },\n      hintMessage: () => 'Multiple value selection'\n    }),\n\n    new IbMatDropdownControl({\n      key: 'numbers',\n      label: 'With numeric keys',\n      width: '22%',\n      value: 2,\n      emptyRow: {key: null, value: 'shared.ibDropdown.nullLabel'},\n      options: [\n        { key: 1, value: 'value1' },\n        { key: 2, value: 'value2' },\n        { key: 3, value: 'value3' },\n        { key: 4, value: 'value4' }\n      ],\n      change: (control) => {\n        console.log('current value', control.value);\n      }\n    }),\n    new IbMatCheckboxControl({\n      key: 'checked',\n      label: 'check this',\n      width: '12.5%'\n    }),\n    new IbMatSlideToggleControl({\n      key: 'slide',\n      label: 'slide this',\n      width: '12.5%'\n    }),\n\n    new IbMatRadioControl({\n      key: 'food',\n      value: 'test-1',\n      label: 'Scegli qualcosa',\n      width: '33.3%',\n      options: [\n        { key: 'las-1', value: 'Lasagne' },\n        { key: 'macc-2', value: 'Maccheroni' },\n      ]\n    }),\n\n    new IbMatTextboxControl({\n      key: 'disabledField2',\n      label: 'Disabled Field2',\n      width: '50%',\n      disabled: true\n    }),\n    new IbMatPaddingControl({\n      width: '25%',\n      cols: 2,\n      rows: 1,\n    }),\n\n    new IbMatAutocompleteControl({\n      key: 'autocomplete',\n      label: 'Autocomplete',\n      width: '33.3%',\n      cols: 2,\n      rows: 1,\n      options: [\n        { value: 'value1' },\n        { value: 'value2' },\n        { value: 'value3' },\n        { value: 'value4' }\n      ],\n      change: (control) => {\n        console.log('current value', control.value);\n      }\n    }),\n    new IbMatLabelControl({\n      value: 'Static value',\n      label: 'Static label',\n      width: '16.65%'\n    }),\n    new IbMatLabelControl({\n      value: 'Static value2 long text long text long text long text long text long text long text long text',\n      label: 'Static label2 long text long text long text long text',\n      width: '33.3%',\n      cols: 1,\n      rows: 3,\n    }),\n    new IbMatButtonControl({\n      key: 'clear',\n      label: 'Clear button inside form',\n      color: 'accent',\n      width: '16.65%',\n      cols: 3,\n      rows: 1,\n      handler: (form) => form.reset()\n    }),\n    new IbMatTextareaControl({\n      key: 'textarea',\n      label: 'Enter long text',\n      width: '100%',\n      height: '120px',\n      cols: 3,\n      rows: 2,\n    }),\n    new IbMatTextboxControl({\n      key: 'numberValue',\n      label: 'Enter a number',\n      type: 'number',\n      width: '25%',\n      change: (control) => {\n        console.log(control.value)\n      },\n      validators: [Validators.min(3), Validators.max(12)]\n    }),\n    new IbMatDatepickerControl({\n      type: 'date',\n      key: 'dateFrom',\n      width: '25%',\n      label: 'Date from',\n      debounceOnChange: 0,\n      change: (control) => {\n        const dateTo = control.parent.controls['dateTo'];\n        dateTo.updateValueAndValidity();\n      }\n    }),\n    new IbMatDatepickerControl({\n      type: 'date',\n      key: 'dateTo',\n      width: '25%',\n      label: 'Date to',\n      validators: [this.dateValidator(), this.multipleCustomExample()]\n    }),\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlBase<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "defaultFormFields",
                    "defaultValue": "[\n    new IbTextbox({\n      key: 'defaultTextbox',\n      label: 'First name',\n      required: true,\n    })\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlBase<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "emptyForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbMaterialFormComponent",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'emptyForm', {static: true}"
                        }
                    ]
                },
                {
                    "name": "ibMatActionsPosition",
                    "defaultValue": "IbMatActionsPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "loginFormFields",
                    "defaultValue": "[\n    new MyCustomTextbox({\n      key: 'username',\n      label: 'Username',\n      required: true,\n      testField: 'prova',\n      validators: [Validators.minLength(3)]\n    } as MyCustomTextboxParams),\n    new IbMatTextboxControl({\n      key: 'password',\n      label: 'shared.login.password',\n      type: 'password',\n      required: true,\n      validators: [Validators.minLength(8)]\n    })\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 280
                },
                {
                    "name": "noFormActions",
                    "defaultValue": "[\n    new IbMatButtonControl({\n      key: 'submit',\n      label: 'Invia'\n    })\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 305
                },
                {
                    "name": "noFormFields",
                    "defaultValue": "[\n    new IbMatTextboxControl({\n      key: 'existing',\n      label: 'existing IbTextbox',\n      width: '50%'\n    })\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 297
                }
            ],
            "methodsClass": [
                {
                    "name": "dateValidator",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 344,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "multipleCustomExample",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 361,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 325,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 315,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "payload",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 340,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';\nimport { IbFormControlBase } from 'src/app/inobeta-ui/ui/forms/controls/form-control-base';\nimport { IbTextbox } from 'src/app/inobeta-ui/ui/forms/controls/textbox';\nimport { AbstractControl, ValidatorFn, Validators } from '@angular/forms';\nimport { IbMatActionsPosition, IbMaterialFormComponent } from 'src/app/inobeta-ui/ui/material-forms/material-form/material-form.component';\nimport { MyCustomTextbox, MyCustomTextboxParams } from './my-custom-textbox.model';\nimport { IbMatTextboxControl } from 'src/app/inobeta-ui/ui/material-forms/controls/textbox';\nimport { IbMatDropdownControl } from 'src/app/inobeta-ui/ui/material-forms/controls/dropdown';\nimport { IbMatRadioControl } from 'src/app/inobeta-ui/ui/material-forms/controls/radio';\nimport { IbMatCheckboxControl } from 'src/app/inobeta-ui/ui/material-forms/controls/checkbox';\nimport { IbMatDatepickerControl } from 'src/app/inobeta-ui/ui/material-forms/controls/datepicker';\nimport { IbMatAutocompleteControl } from 'src/app/inobeta-ui/ui/material-forms/controls/autocomplete';\nimport { IbMatLabelControl } from 'src/app/inobeta-ui/ui/material-forms/controls/label';\nimport { IbMatTextareaControl } from 'src/app/inobeta-ui/ui/material-forms/controls/textarea';\nimport { IbMatButtonControl } from 'src/app/inobeta-ui/ui/material-forms/controls/button';\nimport { IbMatPaddingControl } from 'src/app/inobeta-ui/ui/material-forms/controls/padding';\nimport { IbMatSlideToggleControl } from 'src/app/inobeta-ui/ui/material-forms/controls/slide-toggle';\n\n@Component({\n  selector: 'app-dynamic-forms-example',\n  templateUrl: './dynamic-forms-example.component.html',\n  styleUrls: ['./dynamic-forms-example.component.css']\n})\nexport class DynamicFormsExampleComponent implements OnInit, AfterViewInit {\n  @ViewChild('customForm', {static: true}) customForm: IbMaterialFormComponent;\n  @ViewChild('emptyForm', {static: true}) emptyForm: IbMaterialFormComponent;\n  ibMatActionsPosition = IbMatActionsPosition;\n  defaultFormFields: IbFormControlBase<string>[] = [\n    new IbTextbox({\n      key: 'defaultTextbox',\n      label: 'First name',\n      required: true,\n    })\n  ];\n\n  customFormFields: IbFormControlBase<any>[] = [\n    new IbMatTextboxControl({\n      key: 'firstName',\n      label: 'First name',\n      width: '50%',\n      cols: 2,\n      rows: 1,\n      required: true,\n      validators: [\n        forceValueValidator('Pluto', 'examples.customErrorMessageExample')\n      ]\n    }),\n    new IbMatTextboxControl({\n      key: 'disabledField',\n      label: 'Disabled Field',\n      width: '50%',\n      cols: 2,\n      rows: 1,\n      disabled: true\n    }),\n\n    new IbMatTextboxControl({\n      key: 'changeValueField',\n      label: 'Change my value',\n      validators: [Validators.minLength(3), Validators.maxLength(5), Validators.required],\n      width: '15%',\n      change: (control) => {\n        console.log('current value', control.value);\n      },\n      hintMessage: () => {\n        return 'write something\\nanother like';\n      }\n    }),\n    new IbMatTextboxControl({\n      type: 'email',\n      key: 'email',\n      label: 'Email',\n      width: '15%',\n      cols: 2,\n      rows: 1,\n      required: true,\n      validators: [Validators.email]\n    }),\n    new IbMatTextboxControl({\n      key: 'length',\n      label: 'MinLength=3, MaxLength=12',\n      width: '35%',\n      cols: 4,\n      rows: 1,\n      required: false,\n      validators: [Validators.minLength(3), Validators.maxLength(12)]\n    }),\n    new IbMatDatepickerControl({\n      type: 'date',\n      key: 'dateTime',\n      width: '35%',\n      label: 'Date',\n      value: '2021-01-pippa',\n      required: true,\n      validators: [Validators.min((new Date('2021-05-12')).getTime())],\n      change: (control) => {\n        if (control.value) {\n          console.log('current value', control.value, control.value.getFullYear());\n        }\n      }\n    }),\n    new IbMatDropdownControl({\n      key: 'options',\n      label: 'Options',\n      width: '22%',\n      value: 'test2',\n      emptyRow: { key: null, value: 'NULL' },\n      options: [\n        { key: 'test1', value: 'value1' },\n        { key: 'test2', value: 'value2' },\n        { key: 'test3', value: 'value3' },\n        { key: 'test4', value: 'value4' }\n      ],\n      change: (control) => {\n        console.log('current value', control.value);\n      }\n    }),\n    new IbMatDropdownControl({\n      key: 'optionsMultiple',\n      label: 'Options Multiple',\n      width: '22%',\n      value: ['test1'],\n      multiple: true,\n      options: [\n        { key: 'test1', value: 'value1' },\n        { key: 'test2', value: 'value2' },\n        { key: 'test3', value: 'value3' },\n        { key: 'test4', value: 'value4' }\n      ],\n      change: (control) => {\n        console.log('current value', control.value);\n      },\n      hintMessage: () => 'Multiple value selection'\n    }),\n\n    new IbMatDropdownControl({\n      key: 'numbers',\n      label: 'With numeric keys',\n      width: '22%',\n      value: 2,\n      emptyRow: {key: null, value: 'shared.ibDropdown.nullLabel'},\n      options: [\n        { key: 1, value: 'value1' },\n        { key: 2, value: 'value2' },\n        { key: 3, value: 'value3' },\n        { key: 4, value: 'value4' }\n      ],\n      change: (control) => {\n        console.log('current value', control.value);\n      }\n    }),\n    new IbMatCheckboxControl({\n      key: 'checked',\n      label: 'check this',\n      width: '12.5%'\n    }),\n    new IbMatSlideToggleControl({\n      key: 'slide',\n      label: 'slide this',\n      width: '12.5%'\n    }),\n\n    new IbMatRadioControl({\n      key: 'food',\n      value: 'test-1',\n      label: 'Scegli qualcosa',\n      width: '33.3%',\n      options: [\n        { key: 'las-1', value: 'Lasagne' },\n        { key: 'macc-2', value: 'Maccheroni' },\n      ]\n    }),\n\n    new IbMatTextboxControl({\n      key: 'disabledField2',\n      label: 'Disabled Field2',\n      width: '50%',\n      disabled: true\n    }),\n    new IbMatPaddingControl({\n      width: '25%',\n      cols: 2,\n      rows: 1,\n    }),\n\n    new IbMatAutocompleteControl({\n      key: 'autocomplete',\n      label: 'Autocomplete',\n      width: '33.3%',\n      cols: 2,\n      rows: 1,\n      options: [\n        { value: 'value1' },\n        { value: 'value2' },\n        { value: 'value3' },\n        { value: 'value4' }\n      ],\n      change: (control) => {\n        console.log('current value', control.value);\n      }\n    }),\n    new IbMatLabelControl({\n      value: 'Static value',\n      label: 'Static label',\n      width: '16.65%'\n    }),\n    new IbMatLabelControl({\n      value: 'Static value2 long text long text long text long text long text long text long text long text',\n      label: 'Static label2 long text long text long text long text',\n      width: '33.3%',\n      cols: 1,\n      rows: 3,\n    }),\n    new IbMatButtonControl({\n      key: 'clear',\n      label: 'Clear button inside form',\n      color: 'accent',\n      width: '16.65%',\n      cols: 3,\n      rows: 1,\n      handler: (form) => form.reset()\n    }),\n    new IbMatTextareaControl({\n      key: 'textarea',\n      label: 'Enter long text',\n      width: '100%',\n      height: '120px',\n      cols: 3,\n      rows: 2,\n    }),\n    new IbMatTextboxControl({\n      key: 'numberValue',\n      label: 'Enter a number',\n      type: 'number',\n      width: '25%',\n      change: (control) => {\n        console.log(control.value)\n      },\n      validators: [Validators.min(3), Validators.max(12)]\n    }),\n    new IbMatDatepickerControl({\n      type: 'date',\n      key: 'dateFrom',\n      width: '25%',\n      label: 'Date from',\n      debounceOnChange: 0,\n      change: (control) => {\n        const dateTo = control.parent.controls['dateTo'];\n        dateTo.updateValueAndValidity();\n      }\n    }),\n    new IbMatDatepickerControl({\n      type: 'date',\n      key: 'dateTo',\n      width: '25%',\n      label: 'Date to',\n      validators: [this.dateValidator(), this.multipleCustomExample()]\n    }),\n  ];\n  customFormActions = [\n    new IbMatButtonControl({\n      key: 'submit',\n      label: 'Search'\n    }),\n    new IbMatButtonControl({\n      key: 'edit',\n      label: 'Edit',\n      color: 'basic',\n      handler: (form) => form.enable()\n    }),\n    new IbMatButtonControl({\n      key: 'clear',\n      label: 'Clear',\n      color: 'accent',\n      requireConfirmOnDirty: true,\n      handler: (form) => form.reset()\n    })\n  ];\n\n  loginFormFields = [\n    new MyCustomTextbox({\n      key: 'username',\n      label: 'Username',\n      required: true,\n      testField: 'prova',\n      validators: [Validators.minLength(3)]\n    } as MyCustomTextboxParams),\n    new IbMatTextboxControl({\n      key: 'password',\n      label: 'shared.login.password',\n      type: 'password',\n      required: true,\n      validators: [Validators.minLength(8)]\n    })\n  ];\n\n  noFormFields = [\n    new IbMatTextboxControl({\n      key: 'existing',\n      label: 'existing IbTextbox',\n      width: '50%'\n    })\n  ];\n\n  noFormActions = [\n    new IbMatButtonControl({\n      key: 'submit',\n      label: 'Invia'\n    })\n  ];\n\n\n  constructor() {}\n\n  ngOnInit() {\n    this.customForm.afterInit().subscribe((form) => {\n      form.disable();\n    });\n    this.emptyForm.afterChanges().subscribe(({ changes, form }) => {\n      console.log('#emptyForm afterChanges()');\n      console.log(changes);\n    });\n  }\n\n  ngAfterViewInit(): void {\n    console.log('customForm', this.customForm.form.getRawValue());\n    setTimeout(() => {\n      this.noFormFields = [\n        ...this.noFormFields,\n        new IbMatTextboxControl({\n          key: 'created',\n          label: 'created IbTextbox',\n          width: '50%',\n          required: true\n        })\n      ];\n    }, 3000);\n  }\n\n  onSubmit(payload) {\n    console.log('example', payload);\n  }\n\n  dateValidator(): ValidatorFn {\n    return (control: AbstractControl): {[key: string]: any} | null => {\n      if (!control.parent) { return; }\n      const dateFrom = control.parent.controls['dateFrom'];\n      const dateTo = control.parent.controls['dateTo'];\n      if (dateFrom.value && dateTo.value && dateFrom.value > dateTo.value) {\n        return {\n          customError: {\n            message: '\"Date from\" non può essere maggiore di \"Date to\"'\n          }\n        };\n      }\n    };\n  }\n\n\n\n  multipleCustomExample(): ValidatorFn {\n    return (control: AbstractControl): {[key: string]: any} | null => {\n      if (control.value && control.value.getTime() < (new Date('2021-04-15')).getTime()) {\n        return {\n          customError: {\n            message: 'Impostare un valore successivo al 15/04/2021'\n          }\n        };\n      }\n    };\n  }\n\n}\n\n\n\nexport function forceValueValidator(forcedValue: string, errorMessage: string): ValidatorFn {\n  return (control: AbstractControl): {[key: string]: any} | null => {\n    if (control.value !== forcedValue) {\n      return {\n        customError: {\n          message: errorMessage,\n          params: {\n            forcedValue\n          }\n        }\n      };\n    }\n  };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "ib-form.ibFormExample {\n  font-family: sans-serif;\n}\n",
                    "styleUrl": "./dynamic-forms-example.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 310
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<h2>Dynamic Forms</h2>\n<div style=\"margin: 2em\">\n  <h3>Default Form</h3>\n  <ib-form [fields]=\"defaultFormFields\" (ibSubmit)=\"onSubmit($event)\"></ib-form>\n</div>\n<mat-card appearance=\"outlined\" style=\"margin: 2em\">\n  <mat-card-header>\n    <mat-card-title>Custom Form</mat-card-title>\n    <mat-card-subtitle>con Angular Material</mat-card-subtitle>\n  </mat-card-header>\n  <mat-card-content>\n    <ib-material-form\n      #customForm\n      [actionsPosition]=\"ibMatActionsPosition.TOP\"\n      [actions]=\"customFormActions\"\n      [fields]=\"customFormFields\"\n      (ibSubmit)=\"onSubmit($event)\"\n    ></ib-material-form>\n  </mat-card-content>\n</mat-card>\n\n<mat-card appearance=\"outlined\" style=\"margin: 2em\">\n  <mat-card-header>\n    <mat-card-title>Custom Form</mat-card-title>\n    <mat-card-subtitle>Grid system</mat-card-subtitle>\n  </mat-card-header>\n  <mat-card-content>\n    <ib-material-form\n      #customForm2\n      [cols]=\"4\"\n      [actions]=\"customFormActions\"\n      [fields]=\"customFormFields\"\n      (ibSubmit)=\"onSubmit($event)\"\n    ></ib-material-form>\n  </mat-card-content>\n</mat-card>\n<mat-card appearance=\"outlined\" style=\"margin: 2em\">\n  <mat-card-header>\n    <mat-card-title>Classic login form</mat-card-title>\n    <mat-card-subtitle>con Angular Material</mat-card-subtitle>\n  </mat-card-header>\n  <mat-card-content>\n    <ib-material-form\n      [fields]=\"loginFormFields\"\n      (ibSubmit)=\"onSubmit($event)\"></ib-material-form>\n  </mat-card-content>\n</mat-card>\n<mat-card appearance=\"outlined\" style=\"margin: 2em\">\n  <mat-card-header>\n    <mat-card-title>Empty Form</mat-card-title>\n  </mat-card-header>\n  <mat-card-content>\n    <ib-material-form\n      #emptyForm\n      [fields]=\"noFormFields\"\n      [actions]=\"noFormActions\"\n      (ibSubmit)=\"onSubmit($event)\"></ib-material-form>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-3d494fd89671305c6be07de00e019efdf08f2e36c2169e5fb75a5acdb2841da927e3ef3cbd21cc18f478373a784b1fb90e8b63b9df4b3498a75b652bd9c37b38",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport type { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HttpExampleComponent",
            "id": "component-HttpExampleComponent-b68786d9bade2eca52a5ffeb82948acb74948de40b3420759ece8fdc9e2dbe0640974a4467406e598896f6e77d9340eaf7833afcc98a68e0c22cf3391bc30a62",
            "file": "src/app/examples/http-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-test",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-grid-list [cols]=\"4\"  class=\"ib-material-form-grid\" rowHeight=\"60px\">\n  <mat-grid-tile [colspan]=\"1\" [rowspan]=\"1\">\n    <button mat-raised-button color=\"primary\" (click)=\"decoratorTest()\">Test decorator (success)</button>\n  </mat-grid-tile>\n  <mat-grid-tile [colspan]=\"1\" [rowspan]=\"1\">\n    <button mat-raised-button color=\"primary\" (click)=\"decoratorTest('some-error')\">Test decorator (error)</button>\n  </mat-grid-tile>\n  <mat-grid-tile [colspan]=\"1\" [rowspan]=\"1\">\n    <button mat-raised-button color=\"primary\" (click)=\"otherTest()\">Test 401</button>\n  </mat-grid-tile>\n  <mat-grid-tile [colspan]=\"1\" [rowspan]=\"1\">\n    <button mat-raised-button color=\"primary\" (click)=\"noSpinner()\">No Spinner test</button>\n  </mat-grid-tile>\n  <mat-grid-tile [colspan]=\"1\" [rowspan]=\"1\">\n    <button mat-raised-button color=\"primary\" (click)=\"getBlobData()\">Test responseType 'blob'</button>\n  </mat-grid-tile>\n</mat-grid-list>\n\n  <pre>\n    {{ loadedData | json }}\n  </pre>\n\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loadedData",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "decoratorTest",
                    "args": [
                        {
                            "name": "wrong",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "wrong",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBlobData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "noSpinner",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "otherTest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "serviceCall",
                    "args": [
                        {
                            "name": "wrong",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        },
                        {
                            "name": "data",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "ibCrudToast",
                            "stringifiedArguments": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "wrong",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { IbHttpClientService } from 'src/app/inobeta-ui/http/http/http-client.service';\nimport { ibCrudToast } from '../inobeta-ui/http/http/messages.decorator';\n\n@Component({\n  selector: 'app-test',\n  template: `\n<mat-grid-list [cols]=\"4\"  class=\"ib-material-form-grid\" rowHeight=\"60px\">\n  <mat-grid-tile [colspan]=\"1\" [rowspan]=\"1\">\n    <button mat-raised-button color=\"primary\" (click)=\"decoratorTest()\">Test decorator (success)</button>\n  </mat-grid-tile>\n  <mat-grid-tile [colspan]=\"1\" [rowspan]=\"1\">\n    <button mat-raised-button color=\"primary\" (click)=\"decoratorTest('some-error')\">Test decorator (error)</button>\n  </mat-grid-tile>\n  <mat-grid-tile [colspan]=\"1\" [rowspan]=\"1\">\n    <button mat-raised-button color=\"primary\" (click)=\"otherTest()\">Test 401</button>\n  </mat-grid-tile>\n  <mat-grid-tile [colspan]=\"1\" [rowspan]=\"1\">\n    <button mat-raised-button color=\"primary\" (click)=\"noSpinner()\">No Spinner test</button>\n  </mat-grid-tile>\n  <mat-grid-tile [colspan]=\"1\" [rowspan]=\"1\">\n    <button mat-raised-button color=\"primary\" (click)=\"getBlobData()\">Test responseType 'blob'</button>\n  </mat-grid-tile>\n</mat-grid-list>\n\n  <pre>\n    {{ loadedData | json }}\n  </pre>\n\n  `\n})\n\nexport class HttpExampleComponent implements OnInit {\n  loadedData: any = {};\n  constructor(\n    private h: IbHttpClientService\n  ) { }\n\n  ngOnInit() {\n    this.h.get('assets/i18n/it.json').subscribe(data => {\n      this.loadedData = data;\n    });\n  }\n\n  @ibCrudToast()\n  serviceCall(wrong = '', data = null) {\n    return this.h.get(`assets/i18n/it.json${wrong}`, data).pipe(\n      map((x) => {\n        console.log('additional map', x);\n        return x;\n      })\n    );\n  }\n\n  decoratorTest(wrong = '') {\n    this.serviceCall(wrong).subscribe(data => {\n      console.log('final data', data);\n    }, err => {\n      console.log('error data', err);\n    });\n  }\n\n  getBlobData() {\n    return this.h.get('assets/i18n/it.json', {provaTest: 'bah'}, { responseType: 'blob'}).subscribe(data => {\n      console.log('blob data', data);\n    });\n  }\n\n  otherTest() {\n    this.h.get('http://ec2-54-170-145-63.eu-west-1.compute.amazonaws.com/auth/admin/users?page=1&size=300').subscribe();\n  }\n  noSpinner() {\n    this.h.get('http://repubblica.it').subscribe();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "h",
                        "type": "IbHttpClientService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "h",
                        "type": "IbHttpClientService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "IbApplyFilterButton",
            "id": "component-IbApplyFilterButton-69e9fea33500f4265620eef8a3a42f61d853cb029aeaa77a46c598666e772ed2e4a8a4fb8e8161c987c9c30afed759e59af76e12c4c337746dcaabce3feae9ee",
            "file": "src/app/inobeta-ui/ui/kai-filter/filter-actions/apply-filter-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-apply-filter-button",
            "styleUrls": [],
            "styles": [],
            "template": "<button mat-button color=\"primary\">   {{ \"shared.ibFilter.update\" | translate }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"ib-apply-filter-button\",\n  template: ` <button mat-button color=\"primary\">\n    {{ \"shared.ibFilter.update\" | translate }}\n  </button>`,\n})\nexport class IbApplyFilterButton {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "IbBreadcrumbComponent",
            "id": "component-IbBreadcrumbComponent-6dd833b5b14b862dfca72ff3a069ed76af2fd0eb079144a534cdc0ea836159dce8452448b3a5e6f836fd05f28fb42249e9504e09a841f20d621a0af7ed669b25",
            "file": "src/app/inobeta-ui/ui/breadcrumb/breadcrumb.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-breadcrumb",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./breadcrumb.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "home",
                    "defaultValue": "{url: '/', icon: 'home'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nModifica l'icona o label per il primo elemento.\n",
                    "description": "<p>Modifica l&#39;icona o label per il primo elemento.</p>\n",
                    "line": 25,
                    "type": "IbBreadcrumbItem",
                    "decorators": []
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "IbBreadcrumbItem[]",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "IbBreadcrumbMode.auto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nModalità per il render delle breadcrumbs.\nDi default, il percorso viene calcolato dalle routes. Per inserire le singole \"briciole\" usare la modalità `static`\n",
                    "description": "<p>Modalità per il render delle breadcrumbs.\nDi default, il percorso viene calcolato dalle routes. Per inserire le singole &quot;briciole&quot; usare la modalità <code>static</code></p>\n",
                    "line": 31,
                    "type": "IbBreadcrumbMode",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ROUTE_DATA_BREADCRUMB",
                    "defaultValue": "'breadcrumb'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createBreadcrumbs",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRoute",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        },
                        {
                            "name": "breadcrumbs",
                            "type": "IbBreadcrumbItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRoute",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "breadcrumbs",
                            "type": "IbBreadcrumbItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { Router, ActivatedRoute, NavigationEnd } from '@angular/router';\nimport { filter } from 'rxjs/operators';\n\ninterface IbBreadcrumbItem {\n  label?: string;\n  url?: string;\n  icon?: string;\n}\n\nenum IbBreadcrumbMode {\n  static = 'static',\n  auto = 'auto',\n}\n\n@Component({\n  selector: 'ib-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n})\nexport class IbBreadcrumbComponent implements OnInit {\n  static readonly ROUTE_DATA_BREADCRUMB = 'breadcrumb';\n  /**\n   * Modifica l'icona o label per il primo elemento.\n   */\n  @Input() home: IbBreadcrumbItem = {url: '/', icon: 'home'};\n  @Input() items: IbBreadcrumbItem[] = [];\n  /**\n   * Modalità per il render delle breadcrumbs.\n   * Di default, il percorso viene calcolato dalle routes. Per inserire le singole \"briciole\" usare la modalità `static`\n   */\n  @Input() mode = IbBreadcrumbMode.auto;\n\n  constructor(private router: Router, private activatedRoute: ActivatedRoute) {}\n\n  ngOnInit() {\n    if (this.mode === IbBreadcrumbMode.static) {\n      return;\n    }\n    this.items = this.createBreadcrumbs(this.activatedRoute.root);\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe(() => this.items = this.createBreadcrumbs(this.activatedRoute.root));\n  }\n\n  private createBreadcrumbs(route: ActivatedRoute, url = '', breadcrumbs: IbBreadcrumbItem[] = []) {\n    const children = route.children;\n\n    if (children.length === 0) {\n      return breadcrumbs;\n    }\n\n    for (const child of children) {\n      const routeURL: string = child.snapshot.url.map(segment => segment.path).join('/');\n      if (routeURL !== '') {\n        url += `/${routeURL}`;\n      }\n\n      const label = child.snapshot.data[IbBreadcrumbComponent.ROUTE_DATA_BREADCRUMB];\n      if (label) {\n        breadcrumbs.push({label, url});\n      }\n\n      return this.createBreadcrumbs(child, url, breadcrumbs);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"ibBreadcrumbs\">\n  <a class=\"ibBreadcrumbs-link\" [routerLink]=\"['/']\">Home</a>\n  <a class=\"ibBreadcrumbs-link\" [routerLink]=\"[item.url]\" *ngFor=\"let item of items\" style=\"margin: 5px;\">{{item.label}}</a>\n</div>"
        },
        {
            "name": "IbCell",
            "id": "component-IbCell-07b3d0b60079370a6cb133bb26f46177038dffd109032f4fd143c5dafdc436b63d10cd18e068cfaa42be48124359676e876a286abe3b85a0154b08cd3d042563",
            "file": "src/app/inobeta-ui/ui/kai-table/cells.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-cell",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"ib-cell-{{this.column.columnDef}}\">{{column.cell(row)}}</div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbCellData",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "IB_CELL_DATA"
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { formatDate, formatNumber } from \"@angular/common\";\nimport { Component, ChangeDetectionStrategy, Inject, Optional } from \"@angular/core\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport { IB_CELL_DATA } from \"./table.component\";\nimport { IbCellData, IbColumnDef } from \"./table.types\";\n\n@Component({\n  selector: 'ib-cell',\n  template: '<div class=\"ib-cell-{{this.column.columnDef}}\">{{column.cell(row)}}</div>',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IbCell {\n  get cell() { return this.data.column.cell(this.data.row) }\n  get column() { return this.data.column }\n  get row() { return this.data.row }\n  get send() { return this.data.send }\n\n  constructor(@Inject(IB_CELL_DATA) @Optional() public data: IbCellData) { }\n}\n\ninterface IbContextAction {\n  /** Unique action type identifier. Used in `IbTableRowEvent.type` */\n  type: string;\n  /** Icon name for the action. Only supports material icons names. */\n  icon?: string;\n}\n\n@Component({\n  selector: 'ib-cell-ctx',\n  template: `<div *ngFor=\"let action of actions\" class=\"action-section ib-action-{{action.type}}\">\n    <button mat-icon-button (click)=\"send({ type: action.type, row: row }); $event.stopPropagation();\">\n      <mat-icon>{{ action?.icon ?? action.type }}</mat-icon>\n    </button>\n</div>`,\n  styles: [`\n  :host {\n    display: flex;\n    gap: 4px;\n    justify-content: flex-end;\n  }\n\n  .button-infos {\n    cursor: pointer;\n    user-select: none;\n  }`],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IbContextActionCell extends IbCell {\n  get actions(): IbContextAction[] { return this.data.column.cell(this.data.row) }\n}\n\n@Component({\n  selector: 'ib-cell-translate',\n  template: `{{text()}}`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IbTranslateCell extends IbCell {\n  text = () => this.translate.instant(this.cell.key, this.cell.params);\n  constructor(\n    @Inject(IB_CELL_DATA) @Optional() public data: IbCellData,\n    public translate: TranslateService) {\n    super(data);\n  }\n}\n\n/**\n *\n * @param {cell} cell - Data accessor. Same as `IbColumnDef.cell`, but returns\n *  an {IbContextAction} array.\n * @returns\n */\nexport const useContextCell = <T>(cell: (e: T) => IbContextAction[]): IbColumnDef => ({\n  component: IbContextActionCell,\n  columnDef: '_ctxActions',\n  header: '',\n  cell,\n})\nexport const useContextColumn = useContextCell;\n\nexport const useColumn = <T>(columnName: string, propertyName?: string, sort?: boolean): IbColumnDef => ({\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => e[propertyName ?? columnName],\n  sort\n});\n\nexport const useDateColumn = <T>(\n  columnName: string,\n  propertyName?: string,\n  sort?: boolean,\n  format: string = 'dd/MM/yyyy HH:mm z',\n  locale: string = 'it'\n): IbColumnDef => ({\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => `${formatDate(e[propertyName ?? columnName], format, locale)}`,\n  sort\n});\n\n\nexport const useNumberColumn = <T>(\n  columnName: string,\n  propertyName?: string,\n  sort?: boolean,\n  format: string = '1.2-2',\n  locale: string = 'it'\n): IbColumnDef => ({\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => `${formatNumber(e[propertyName ?? columnName], locale, format)}`,\n  sort\n});\n\nexport const useTranslateColumn = <T>(\n  columnName: string,\n  propertyName?: string,\n  sort?: boolean,\n  params: any = {},\n): IbColumnDef => ({\n  component: IbTranslateCell,\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => ({ key: e[propertyName ?? columnName], params }),\n  sort\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "IbCellData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "IbCellData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "cell": {
                    "name": "cell",
                    "getSignature": {
                        "name": "cell",
                        "type": "",
                        "returnType": "",
                        "line": 13
                    }
                },
                "column": {
                    "name": "column",
                    "getSignature": {
                        "name": "column",
                        "type": "",
                        "returnType": "",
                        "line": 14
                    }
                },
                "row": {
                    "name": "row",
                    "getSignature": {
                        "name": "row",
                        "type": "",
                        "returnType": "",
                        "line": 15
                    }
                },
                "send": {
                    "name": "send",
                    "getSignature": {
                        "name": "send",
                        "type": "",
                        "returnType": "",
                        "line": 16
                    }
                }
            }
        },
        {
            "name": "IbContextActionCell",
            "id": "component-IbContextActionCell-07b3d0b60079370a6cb133bb26f46177038dffd109032f4fd143c5dafdc436b63d10cd18e068cfaa42be48124359676e876a286abe3b85a0154b08cd3d042563",
            "file": "src/app/inobeta-ui/ui/kai-table/cells.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-cell-ctx",
            "styleUrls": [],
            "styles": [
                "\n  :host {\n    display: flex;\n    gap: 4px;\n    justify-content: flex-end;\n  }\n\n  .button-infos {\n    cursor: pointer;\n    user-select: none;\n  }"
            ],
            "template": "<div *ngFor=\"let action of actions\" class=\"action-section ib-action-{{action.type}}\">    <button mat-icon-button (click)=\"send({ type: action.type, row: row }); $event.stopPropagation();\">\n      <mat-icon>{{ action?.icon ?? action.type }}</mat-icon>\n    </button>\n</div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbCellData",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "IB_CELL_DATA"
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbCell"
                    }
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { formatDate, formatNumber } from \"@angular/common\";\nimport { Component, ChangeDetectionStrategy, Inject, Optional } from \"@angular/core\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport { IB_CELL_DATA } from \"./table.component\";\nimport { IbCellData, IbColumnDef } from \"./table.types\";\n\n@Component({\n  selector: 'ib-cell',\n  template: '<div class=\"ib-cell-{{this.column.columnDef}}\">{{column.cell(row)}}</div>',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IbCell {\n  get cell() { return this.data.column.cell(this.data.row) }\n  get column() { return this.data.column }\n  get row() { return this.data.row }\n  get send() { return this.data.send }\n\n  constructor(@Inject(IB_CELL_DATA) @Optional() public data: IbCellData) { }\n}\n\ninterface IbContextAction {\n  /** Unique action type identifier. Used in `IbTableRowEvent.type` */\n  type: string;\n  /** Icon name for the action. Only supports material icons names. */\n  icon?: string;\n}\n\n@Component({\n  selector: 'ib-cell-ctx',\n  template: `<div *ngFor=\"let action of actions\" class=\"action-section ib-action-{{action.type}}\">\n    <button mat-icon-button (click)=\"send({ type: action.type, row: row }); $event.stopPropagation();\">\n      <mat-icon>{{ action?.icon ?? action.type }}</mat-icon>\n    </button>\n</div>`,\n  styles: [`\n  :host {\n    display: flex;\n    gap: 4px;\n    justify-content: flex-end;\n  }\n\n  .button-infos {\n    cursor: pointer;\n    user-select: none;\n  }`],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IbContextActionCell extends IbCell {\n  get actions(): IbContextAction[] { return this.data.column.cell(this.data.row) }\n}\n\n@Component({\n  selector: 'ib-cell-translate',\n  template: `{{text()}}`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IbTranslateCell extends IbCell {\n  text = () => this.translate.instant(this.cell.key, this.cell.params);\n  constructor(\n    @Inject(IB_CELL_DATA) @Optional() public data: IbCellData,\n    public translate: TranslateService) {\n    super(data);\n  }\n}\n\n/**\n *\n * @param {cell} cell - Data accessor. Same as `IbColumnDef.cell`, but returns\n *  an {IbContextAction} array.\n * @returns\n */\nexport const useContextCell = <T>(cell: (e: T) => IbContextAction[]): IbColumnDef => ({\n  component: IbContextActionCell,\n  columnDef: '_ctxActions',\n  header: '',\n  cell,\n})\nexport const useContextColumn = useContextCell;\n\nexport const useColumn = <T>(columnName: string, propertyName?: string, sort?: boolean): IbColumnDef => ({\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => e[propertyName ?? columnName],\n  sort\n});\n\nexport const useDateColumn = <T>(\n  columnName: string,\n  propertyName?: string,\n  sort?: boolean,\n  format: string = 'dd/MM/yyyy HH:mm z',\n  locale: string = 'it'\n): IbColumnDef => ({\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => `${formatDate(e[propertyName ?? columnName], format, locale)}`,\n  sort\n});\n\n\nexport const useNumberColumn = <T>(\n  columnName: string,\n  propertyName?: string,\n  sort?: boolean,\n  format: string = '1.2-2',\n  locale: string = 'it'\n): IbColumnDef => ({\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => `${formatNumber(e[propertyName ?? columnName], locale, format)}`,\n  sort\n});\n\nexport const useTranslateColumn = <T>(\n  columnName: string,\n  propertyName?: string,\n  sort?: boolean,\n  params: any = {},\n): IbColumnDef => ({\n  component: IbTranslateCell,\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => ({ key: e[propertyName ?? columnName], params }),\n  sort\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n  :host {\n    display: flex;\n    gap: 4px;\n    justify-content: flex-end;\n  }\n\n  .button-infos {\n    cursor: pointer;\n    user-select: none;\n  }\n",
            "extends": "IbCell",
            "accessors": {
                "actions": {
                    "name": "actions",
                    "getSignature": {
                        "name": "actions",
                        "type": "[]",
                        "returnType": "IbContextAction[]",
                        "line": 49
                    }
                }
            }
        },
        {
            "name": "IbDateFilter",
            "id": "component-IbDateFilter-e49f638fa725be1b1336382d2cb385a43800f0bd786c83813d8841d587a9aa3ea4f7c636c4b6b44703a0a16177d82ddc141ca7585cb4f04cce9795afbb2fa691",
            "file": "src/app/inobeta-ui/ui/kai-filter/filters/date/filter-date.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: IbFilterBase, useExisting: forwardRef(() => IbDateFilter) }"
                }
            ],
            "selector": "ib-filter-date, ib-date-filter",
            "styleUrls": [
                "./filter-date.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "filter-date.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ibTableColumnName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "IbFilterBase"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "IbFilterBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "build",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 265,
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "moreThanPeriodOptions",
                    "defaultValue": "[\n    {\n      displayValue: \"shared.ibFilter.date.minutesAgo\",\n      value: IbDateFilterPeriod.MINUTES,\n    },\n    {\n      displayValue: \"shared.ibFilter.date.hoursAgo\",\n      value: IbDateFilterPeriod.HOURS,\n    },\n    {\n      displayValue: \"shared.ibFilter.date.daysAgo\",\n      value: IbDateFilterPeriod.DAYS,\n    },\n    {\n      displayValue: \"shared.ibFilter.date.weeksAgo\",\n      value: IbDateFilterPeriod.WEEKS,\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "multipliers",
                    "defaultValue": "{\n    [IbDateFilterPeriod.MINUTES]: 60_000,\n    [IbDateFilterPeriod.HOURS]: 60_000 * 60,\n    [IbDateFilterPeriod.DAYS]: 60_000 * 60 * 24,\n    [IbDateFilterPeriod.WEEKS]: 60_000 * 60 * 24 * 7,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "searchCriteria",
                    "defaultValue": "new FormGroup({\n    categorySelected: new FormControl(null, [Validators.required]),\n    within: new FormGroup({\n      value: new FormControl(null, [Validators.min(1)]),\n      period: new FormControl(IbDateFilterPeriod.MINUTES),\n    }),\n    moreThan: new FormGroup({\n      value: new FormControl(null, [Validators.min(1)]),\n      period: new FormControl(IbDateFilterPeriod.MINUTES),\n    }),\n    range: new FormGroup({\n      start: new FormControl(null),\n      end: new FormControl(null),\n    }),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "withinPeriodOptions",
                    "defaultValue": "[\n    {\n      displayValue: \"shared.ibFilter.date.minutes\",\n      value: IbDateFilterPeriod.MINUTES,\n    },\n    {\n      displayValue: \"shared.ibFilter.date.hours\",\n      value: IbDateFilterPeriod.HOURS,\n    },\n    {\n      displayValue: \"shared.ibFilter.date.days\",\n      value: IbDateFilterPeriod.DAYS,\n    },\n    {\n      displayValue: \"shared.ibFilter.date.weeks\",\n      value: IbDateFilterPeriod.WEEKS,\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFilterButton",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "IbFilterButton"
                        }
                    ],
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFilter",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "applyFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "buildMoreThanCategory",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "buildRangeCategory",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 255,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "buildWithinCategory",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "update",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "update",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "clearFilter",
                    "args": [
                        {
                            "name": "patchValue",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "patchValue",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOffsetTime",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "category",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "category",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "category",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "IbFilterBase"
                    }
                },
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { formatDate } from \"@angular/common\";\nimport { Component, forwardRef, ViewEncapsulation } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { IbFilterDef } from \"../../filter.types\";\nimport { and, gte, lte, none } from \"../../filters\";\nimport { IbFilterBase } from \"../base/filter-base\";\n\nenum IbDateFilterCriteriaCategory {\n  WITHIN = \"within\",\n  MORE_THAN = \"moreThan\",\n  RANGE = \"range\",\n}\n\nenum IbDateFilterPeriod {\n  MINUTES = 1,\n  HOURS,\n  DAYS,\n  WEEKS,\n}\n\n@Component({\n  selector: \"ib-filter-date, ib-date-filter\",\n  templateUrl: \"filter-date.component.html\",\n  styleUrls: [\"./filter-date.component.scss\"],\n  providers: [\n    { provide: IbFilterBase, useExisting: forwardRef(() => IbDateFilter) },\n  ],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class IbDateFilter extends IbFilterBase {\n  searchCriteria = new FormGroup({\n    categorySelected: new FormControl(null, [Validators.required]),\n    within: new FormGroup({\n      value: new FormControl(null, [Validators.min(1)]),\n      period: new FormControl(IbDateFilterPeriod.MINUTES),\n    }),\n    moreThan: new FormGroup({\n      value: new FormControl(null, [Validators.min(1)]),\n      period: new FormControl(IbDateFilterPeriod.MINUTES),\n    }),\n    range: new FormGroup({\n      start: new FormControl(null),\n      end: new FormControl(null),\n    }),\n  });\n\n  withinPeriodOptions = [\n    {\n      displayValue: \"shared.ibFilter.date.minutes\",\n      value: IbDateFilterPeriod.MINUTES,\n    },\n    {\n      displayValue: \"shared.ibFilter.date.hours\",\n      value: IbDateFilterPeriod.HOURS,\n    },\n    {\n      displayValue: \"shared.ibFilter.date.days\",\n      value: IbDateFilterPeriod.DAYS,\n    },\n    {\n      displayValue: \"shared.ibFilter.date.weeks\",\n      value: IbDateFilterPeriod.WEEKS,\n    },\n  ];\n\n  moreThanPeriodOptions = [\n    {\n      displayValue: \"shared.ibFilter.date.minutesAgo\",\n      value: IbDateFilterPeriod.MINUTES,\n    },\n    {\n      displayValue: \"shared.ibFilter.date.hoursAgo\",\n      value: IbDateFilterPeriod.HOURS,\n    },\n    {\n      displayValue: \"shared.ibFilter.date.daysAgo\",\n      value: IbDateFilterPeriod.DAYS,\n    },\n    {\n      displayValue: \"shared.ibFilter.date.weeksAgo\",\n      value: IbDateFilterPeriod.WEEKS,\n    },\n  ];\n\n  private multipliers = {\n    [IbDateFilterPeriod.MINUTES]: 60_000,\n    [IbDateFilterPeriod.HOURS]: 60_000 * 60,\n    [IbDateFilterPeriod.DAYS]: 60_000 * 60 * 24,\n    [IbDateFilterPeriod.WEEKS]: 60_000 * 60 * 24 * 7,\n  };\n\n  get isDirty() {\n    if (this.getSelected()?.invalid) {\n      return false;\n    }\n\n    if (this.isSelected(IbDateFilterCriteriaCategory.WITHIN)) {\n      return !!this.searchCriteria.value.within.value;\n    }\n\n    if (this.isSelected(IbDateFilterCriteriaCategory.MORE_THAN)) {\n      return !!this.searchCriteria.value.moreThan.value;\n    }\n\n    if (this.isSelected(IbDateFilterCriteriaCategory.RANGE)) {\n      return (\n        this.searchCriteria.value.range.start &&\n        this.searchCriteria.value.range.end\n      );\n    }\n  }\n\n  get displayValue() {\n    if (this.isSelected(IbDateFilterCriteriaCategory.WITHIN)) {\n      return this.searchCriteria.value.within.value;\n    }\n\n    if (this.isSelected(IbDateFilterCriteriaCategory.MORE_THAN)) {\n      return this.searchCriteria.value.moreThan.value;\n    }\n\n    if (this.isSelected(IbDateFilterCriteriaCategory.RANGE)) {\n      if (\n        !this.searchCriteria.value.range.start ||\n        !this.searchCriteria.value.range.end\n      ) {\n        return;\n      }\n      const start = formatDate(\n        this.searchCriteria.value.range.start,\n        \"dd/MM/YYYY\",\n        \"en\"\n      );\n      const end = formatDate(\n        this.searchCriteria.value.range.end,\n        \"dd/MM/YYYY\",\n        \"en\"\n      );\n      return `${start} - ${end}`;\n    }\n\n    return;\n  }\n\n  get displayPeriod() {\n    if (this.isSelected(IbDateFilterCriteriaCategory.WITHIN)) {\n      return this.withinPeriodOptions.find(\n        (o) => o.value === this.searchCriteria.value.within.period\n      )?.displayValue;\n    }\n\n    if (this.isSelected(IbDateFilterCriteriaCategory.MORE_THAN)) {\n      return this.moreThanPeriodOptions.find(\n        (o) => o.value === this.searchCriteria.value.moreThan.period\n      )?.displayValue;\n    }\n\n    return;\n  }\n\n  get displayCondition() {\n    if (this.isSelected(IbDateFilterCriteriaCategory.WITHIN)) {\n      return \"shared.ibFilter.date.withinTheLast\";\n    }\n\n    if (this.isSelected(IbDateFilterCriteriaCategory.MORE_THAN)) {\n      return \"shared.ibFilter.date.moreThan\";\n    }\n\n    if (this.isSelected(IbDateFilterCriteriaCategory.RANGE)) {\n      return \"shared.ibFilter.date.between\";\n    }\n  }\n\n  isSelected(category) {\n    return this.searchCriteria.value.categorySelected === category;\n  }\n\n  getSelected() {\n    return this.searchCriteria?.get(this.searchCriteria.value.categorySelected);\n  }\n\n  applyFilter(): void {\n    this.searchCriteria.updateValueAndValidity();\n    if (this.getSelected()?.invalid) {\n      this.searchCriteria.markAllAsTouched();\n      return;\n    }\n\n    const categorySelected = this.searchCriteria?.value.categorySelected;\n    const patch = {\n      [categorySelected]: this.getSelected()?.value,\n      categorySelected,\n    };\n\n    this.clearFilter(patch);\n    this.filter.update();\n    this.button.closeMenu();\n  }\n\n  clearFilter(patchValue = {}) {\n    const defaultPeriod = {\n      period: IbDateFilterPeriod.MINUTES,\n      value: null,\n    };\n    this.searchCriteria.reset({\n      within: defaultPeriod,\n      moreThan: defaultPeriod,\n      ...patchValue,\n    });\n  }\n\n  clear(update = true): void {\n    this.clearFilter();\n    update && this.filter.update();\n  }\n\n  private getOffsetTime(value: number, category) {\n    const now = new Date();\n    const then = new Date();\n    const multiplier = this.multipliers[category.period];\n\n    then.setTime(now.getTime() - value * multiplier);\n    return [then, now];\n  }\n\n  private buildWithinCategory() {\n    const value = this.searchCriteria.value.within.value;\n    if (!value) {\n      return none();\n    }\n\n    const [then, now] = this.getOffsetTime(\n      value,\n      this.searchCriteria.value.within\n    );\n\n    return and([gte(then), lte(now)]);\n  }\n\n  private buildMoreThanCategory() {\n    const value = this.searchCriteria.value.moreThan.value;\n    if (!value) {\n      return none();\n    }\n\n    const [then] = this.getOffsetTime(\n      value,\n      this.searchCriteria.value.moreThan\n    );\n\n    return lte(then);\n  }\n\n  private buildRangeCategory() {\n    const start = this.searchCriteria.value.range.start;\n    const end = this.searchCriteria.value.range.end;\n    if (!start || !end) {\n      return none();\n    }\n\n    return and([gte(start), lte(end)]);\n  }\n\n  build = (): IbFilterDef => {\n    if (this.getSelected()?.invalid) {\n      return none();\n    }\n\n    if (this.isSelected(IbDateFilterCriteriaCategory.WITHIN)) {\n      return this.buildWithinCategory();\n    }\n\n    if (this.isSelected(IbDateFilterCriteriaCategory.MORE_THAN)) {\n      return this.buildMoreThanCategory();\n    }\n\n    if (this.isSelected(IbDateFilterCriteriaCategory.RANGE)) {\n      return this.buildRangeCategory();\n    }\n\n    return none();\n  };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"@angular/material\" as mat;\n\n.ib-filter-date {  \n  mat-radio-group {\n    display: flex;\n    flex-direction: column;\n  }\n\n  section {\n    margin-left: 32px;\n    margin-bottom: 8px;\n\n  }\n\n  .ib-filter-date__form {\n    @include mat.form-field-density(-5);\n    display: grid;\n    gap: 16px;\n    grid-template-columns: 8ch auto;\n\n    .mat-mdc-form-field {\n      padding-bottom: 0;\n    }\n\n    input[type=number] {\n      appearance: textfield;\n    }\n  }\n\n  .ib-filter-date__form--hidden {\n    display: none;\n  }\n  \n  .ib-filter-date__range {\n    input {\n      font-size: 12px;\n    }\n  }\n}\n",
                    "styleUrl": "./filter-date.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "IbFilterBase",
            "accessors": {
                "isDirty": {
                    "name": "isDirty",
                    "getSignature": {
                        "name": "isDirty",
                        "type": "",
                        "returnType": "",
                        "line": 92
                    }
                },
                "displayValue": {
                    "name": "displayValue",
                    "getSignature": {
                        "name": "displayValue",
                        "type": "",
                        "returnType": "",
                        "line": 113
                    }
                },
                "displayPeriod": {
                    "name": "displayPeriod",
                    "getSignature": {
                        "name": "displayPeriod",
                        "type": "",
                        "returnType": "",
                        "line": 145
                    }
                },
                "displayCondition": {
                    "name": "displayCondition",
                    "getSignature": {
                        "name": "displayCondition",
                        "type": "",
                        "returnType": "",
                        "line": 161
                    }
                }
            },
            "templateData": "<ib-filter-button>\n  <span ib-filter-name><ng-content></ng-content></span>\n  <span ib-filter-value *ngIf=\"isDirty\">\n    {{ displayCondition | translate | lowercase }} {{ displayValue }} {{ displayPeriod | translate }}\n  </span>\n\n  <section [formGroup]=\"filter?.form\" style=\"padding: 0.5em 1em 0 1em\">\n    <section [formGroupName]=\"name\" class=\"ib-filter-date\">\n      <mat-radio-group formControlName=\"categorySelected\">\n        <mat-radio-button [value]=\"'within'\">{{ 'shared.ibFilter.date.withinTheLast' | translate }}</mat-radio-button>\n        <section [class.ib-filter-date__form--hidden]=\"!isSelected('within')\" formGroupName=\"within\" class=\"ib-filter-date__form\">\n          <mat-form-field style=\"width: 100%\" appearance=\"outline\">\n            <input type=\"number\" matInput formControlName=\"value\" />\n          </mat-form-field>\n\n          <mat-form-field style=\"width: 100%\">\n            <mat-select formControlName=\"period\">\n              <mat-option\n                *ngFor=\"let option of withinPeriodOptions\"\n                [value]=\"option.value\">\n                  {{ option.displayValue | translate }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </section>\n\n        <mat-radio-button [value]=\"'moreThan'\">{{ 'shared.ibFilter.date.moreThan' | translate }}</mat-radio-button>\n        <section [class.ib-filter-date__form--hidden]=\"!isSelected('moreThan')\" formGroupName=\"moreThan\" class=\"ib-filter-date__form\">\n          <mat-form-field style=\"width: 100%\" appearance=\"outline\">\n            <input type=\"number\" matInput formControlName=\"value\" />\n          </mat-form-field>\n\n          <mat-form-field style=\"width: 100%\">\n            <mat-select formControlName=\"period\">\n              <mat-option\n                *ngFor=\"let option of moreThanPeriodOptions\"\n                [value]=\"option.value\">\n                  {{ option.displayValue | translate }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </section>\n        \n        <mat-radio-button [value]=\"'range'\">{{ 'shared.ibFilter.date.between' | translate }}</mat-radio-button>\n        <section [class.ib-filter-date__form--hidden]=\"!isSelected('range')\" formGroupName=\"range\" class=\"ib-filter-date__range\">\n          <mat-form-field style=\"width: 100%\">\n            <mat-label>{{ 'shared.ibFilter.date.dateRangeLabel' | translate }}</mat-label>\n            <mat-date-range-input [rangePicker]=\"picker\">\n              <input matStartDate formControlName=\"start\" placeholder=\"dd/mm/yyyy\">\n              <input matEndDate formControlName=\"end\" placeholder=\"dd/mm/yyyy\">\n            </mat-date-range-input>\n            <mat-datepicker-toggle matIconSuffix [for]=\"picker\"></mat-datepicker-toggle>\n            <mat-date-range-picker #picker></mat-date-range-picker>\n            <mat-error>{{ 'shared.ibFilter.date.dateRangeInvalid' | translate }}</mat-error>\n          </mat-form-field>\n        </section>\n        \n      </mat-radio-group>\n    </section>\n  </section>\n\n  <ib-filter-actions>\n    <ib-apply-filter-button (click)=\"applyFilter()\"></ib-apply-filter-button>\n    <button mat-button (click)=\"clear()\" [disabled]=\"!isDirty\">\n      {{ \"shared.ibFilter.clear\" | translate }}\n    </button>\n  </ib-filter-actions>\n</ib-filter-button>\n"
        },
        {
            "name": "IbDynamicFormComponent",
            "id": "component-IbDynamicFormComponent-af6d90b26a2012701fb52b83bbabab9428d11e92cf95f3843e5766740379d27a12bd186b8a75933d4bd80546d38d8447caa721a19b95d57f3882d82c08da9806",
            "file": "src/app/inobeta-ui/ui/forms/dynamic-form/dynamic-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dynamic-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actions",
                    "defaultValue": "[\n    { key: 'submit', label: 'Save' }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "IbFormAction[]",
                    "decorators": []
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "disabledOnInit",
                    "defaultValue": "false",
                    "deprecated": true,
                    "deprecationMessage": "this input will be removed in a future release.\nUtilizzare una subscription ad `afterInit()` per eseguire codice immediatamente dopo aver\ninizializzato il `FormGroup` (come `form.disable()`)",
                    "jsdoctags": [
                        {
                            "pos": 928,
                            "end": 1149,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 929,
                                "end": 939,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>this input will be removed in a future release.\nUtilizzare una subscription ad <code>afterInit()</code> per eseguire codice immediatamente dopo aver\ninizializzato il <code>FormGroup</code> (come <code>form.disable()</code>)</p>\n"
                        }
                    ],
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "fields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "IbFormControlBase<string>[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "ibSubmit",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UntypedFormGroup",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "onChangesSubject",
                    "defaultValue": "new Subject<IbFormOnChanges>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "onInitSubject",
                    "defaultValue": "new Subject<UntypedFormGroup>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "afterChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IbFormOnChanges>",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "afterInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UntypedFormGroup>",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleActionClick",
                    "args": [
                        {
                            "name": "source",
                            "type": "IbFormAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "IbFormAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';\nimport { IbFormControlBase } from '../controls/form-control-base';\nimport { UntypedFormGroup } from '@angular/forms';\nimport { IbFormControlService } from '../form-control.service';\nimport { Observable, Subject } from 'rxjs';\n\nexport interface IbFormAction {\n  key?: string;\n  label: string;\n  handler?: (form: UntypedFormGroup) => void;\n  options?: any;\n  requireConfirmOnDirty?: boolean;\n}\n\ninterface IbFormOnChanges {\n  changes: SimpleChanges;\n  form: UntypedFormGroup;\n}\n\n@Component({\n  selector: 'ib-form',\n  templateUrl: './dynamic-form.component.html',\n})\nexport class IbDynamicFormComponent implements OnInit, OnChanges, OnDestroy {\n  @Input() fields: IbFormControlBase<string>[] = [];\n  @Input() actions: IbFormAction[] = [\n    { key: 'submit', label: 'Save' }\n  ];\n  @Input() cols: number;\n  /**\n   * @deprecated\n   * this input will be removed in a future release.\n   * Utilizzare una subscription ad `afterInit()` per eseguire codice immediatamente dopo aver\n   * inizializzato il `FormGroup` (come `form.disable()`)\n   */\n  @Input() disabledOnInit = false;\n  @Output() ibSubmit = new EventEmitter<any>();\n  form: UntypedFormGroup;\n\n  private readonly onInitSubject = new Subject<UntypedFormGroup>();\n\n  private readonly onChangesSubject = new Subject<IbFormOnChanges>();\n\n  constructor(private cs: IbFormControlService) {}\n\n  ngOnInit() {\n    this.form = this.cs.toFormGroup(this.fields);\n    this.onInitSubject.next(this.form);\n    if (this.disabledOnInit) {\n      this.form.disable();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const fields = changes.fields;\n    if (fields && !fields.isFirstChange()) {\n      this.form = this.cs.toFormGroup(fields.currentValue);\n    }\n    for (const prop of Object.values(changes)) {\n      if (!prop.isFirstChange()) {\n        this.onChangesSubject.next({changes, form: this.form});\n        break;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.onInitSubject.unsubscribe();\n    this.onChangesSubject.unsubscribe();\n  }\n\n  onSubmit() {\n    this.ibSubmit.emit(this.form.getRawValue());\n  }\n\n  handleActionClick(source: IbFormAction) {\n    if (source.key === 'submit') {\n      return;\n    }\n    source.handler(this.form);\n  }\n\n  afterInit(): Observable<UntypedFormGroup> {\n    return this.onInitSubject;\n  }\n\n  afterChanges(): Observable<IbFormOnChanges> {\n    return this.onChangesSubject;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cs",
                        "type": "IbFormControlService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "cs",
                        "type": "IbFormControlService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ],
            "templateData": "<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\" class=\"ibForm\">\n\n  <ib-dynamic-form-control *ngFor=\"let field of fields\" class=\"ibFormRow\" [base]=\"field\" [form]=\"form\"></ib-dynamic-form-control>\n\n  <div class=\"ibFormRow ibFormActions\">\n    <button type=\"submit\" [disabled]=\"!form.valid\">Save</button>\n  </div>\n</form>"
        },
        {
            "name": "IbDynamicFormControlComponent",
            "id": "component-IbDynamicFormControlComponent-e43313f63c0a76f3714ede24c3f1bf331c2a61335b4a7897905cbfba4311802253a4eb69cf1a37e8958ff71147ffbd1ec125a4a17ffd7ffeaa994238482d985e",
            "file": "src/app/inobeta-ui/ui/forms/dynamic-form-control/dynamic-form-control.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-dynamic-form-control",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dynamic-form-control.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "base",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "IbFormControlBase<any>",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "UntypedFormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { IbFormControlBase } from '../controls/form-control-base';\nimport { UntypedFormGroup, UntypedFormControl } from '@angular/forms';\n\n@Component({\n  selector: 'ib-dynamic-form-control',\n  templateUrl: './dynamic-form-control.component.html',\n  host: {\n    class: 'ibFormControl'\n  },\n})\n/**\n * @deprecated Do not use this component. It will be removed in a future release\n */\nexport class IbDynamicFormControlComponent {\n  @Input() base: IbFormControlBase<any>;\n  @Input() form: UntypedFormGroup;\n\n  get self(): UntypedFormControl { return this.form.get(this.base.key) as UntypedFormControl; }\n\n  hasError(e) {\n    return this.self.hasError(e);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "self": {
                    "name": "self",
                    "getSignature": {
                        "name": "self",
                        "type": "",
                        "returnType": "UntypedFormControl",
                        "line": 19
                    }
                }
            },
            "templateData": "<div [formGroup]=\"form\">\n  <label [attr.for]=\"base.key\" class=\"ibFormControl-label\">{{base.label}}</label>\n\n  <div [ngSwitch]=\"base.controlType\">\n\n    <input\n      [ngSwitch]=\"base.controlType\"\n      *ngSwitchCase=\"'textbox'\"\n      [formControlName]=\"base.key\"\n      [id]=\"base.key\"\n      [type]=\"base.type\"\n      (keyup)=\"base.change(self)\"\n    >\n\n    <select\n      [id]=\"base.key\"\n      *ngSwitchCase=\"'dropdown'\"\n      [formControlName]=\"base.key\"\n      (change)=\"base.change(self)\"\n    >\n      <option *ngFor=\"let opt of base.options\" [value]=\"opt.key\">{{opt.value}}</option>\n    </select>\n\n  </div>\n\n  <div class=\"ibFormControl-errorMessage\" *ngIf=\"self.invalid && self.dirty\">{{base.label}} is required</div>\n</div>\n"
        },
        {
            "name": "IbFilter",
            "id": "component-IbFilter-db01ab480471ee811149e17e4b64c53268ddf36adb4cce27b4453a465a9bfe3db3fb6a2c304fdc24b966c08d4594cea231303c1a61e3304d6ad7ddf436241e4a",
            "file": "src/app/inobeta-ui/ui/kai-filter/filter.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-filter",
            "styleUrls": [
                "./filter.component.scss"
            ],
            "styles": [],
            "template": "<mat-form-field style=\"width: 100%; padding-bottom: 0\">\n  <mat-icon matPrefix>search</mat-icon>\n  <input\n    matInput\n    [(ngModel)]=\"searchBar\"\n    (ngModelChange)=\"update()\"\n    [placeholder]=\"'shared.ibFilter.search' | translate\"\n  />\n  <mat-icon\n    matSuffix\n    matBadgeSize=\"small\"\n    (click)=\"showFilters = !showFilters; $event.stopPropagation()\"\n    >filter_list</mat-icon\n  >\n</mat-form-field>\n<section class=\"ib-filter-list\" [class.ib-filter-list__show]=\"showFilters\">\n  <ng-content></ng-content>\n</section>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "ibFilterUpdated",
                    "defaultValue": "new EventEmitter<IbFilterSyntax>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "evaluateCrossColumnFilter",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "filter",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFilterSyntax",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "filterPredicate",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "filters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<IbFilterBase>",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "undefined"
                        }
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup<Record<string, any>>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "ibTable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTable",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "rawFilter",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | any>",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "searchBar",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "showFilters",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                }
            ],
            "methodsClass": [
                {
                    "name": "buildFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "update",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  forwardRef,\n} from \"@angular/core\";\nimport { applyFilter, contains } from \"./filters\";\nimport { FormGroup } from \"@angular/forms\";\nimport { IbTable } from \"../kai-table/table.component\";\nimport { IbFilterBase } from \"./filters/base/filter-base\";\nimport { IbFilterSyntax } from \"./filter.types\";\n\n@Component({\n  selector: \"ib-filter\",\n  template: `\n    <mat-form-field style=\"width: 100%; padding-bottom: 0\">\n      <mat-icon matPrefix>search</mat-icon>\n      <input\n        matInput\n        [(ngModel)]=\"searchBar\"\n        (ngModelChange)=\"update()\"\n        [placeholder]=\"'shared.ibFilter.search' | translate\"\n      />\n      <mat-icon\n        matSuffix\n        matBadgeSize=\"small\"\n        (click)=\"showFilters = !showFilters; $event.stopPropagation()\"\n        >filter_list</mat-icon\n      >\n    </mat-form-field>\n    <section class=\"ib-filter-list\" [class.ib-filter-list__show]=\"showFilters\">\n      <ng-content></ng-content>\n    </section>\n  `,\n  styleUrls: [\"./filter.component.scss\"],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class IbFilter {\n  @ContentChildren(forwardRef(() => IbFilterBase))\n  filters: QueryList<IbFilterBase>;\n\n  @Input()\n  set value(value) {\n    // as indicated in NG01000\n    setTimeout(() => {\n      this.form.patchValue(value);\n      Object.keys(value).forEach((key) => this.form.get(key).markAsDirty());\n      this.update();\n    });\n  }\n  @Output() ibFilterUpdated = new EventEmitter<IbFilterSyntax>();\n\n  form: FormGroup = new FormGroup<Record<string, any>>({});\n\n  showFilters = true;\n  searchBar = \"\";\n\n  rawFilter: Record<string, any> = {};\n  filter: IbFilterSyntax = {};\n\n  constructor(@Optional() public ibTable: IbTable) {}\n\n  update() {\n    this.rawFilter = this.form.value;\n    this.filter = this.buildFilter();\n    this.ibFilterUpdated.emit(this.filter);\n  }\n\n  private reset() {\n    this.ibFilterUpdated.emit({});\n  }\n\n  // where the **** should i put this...\n  filterPredicate = (data: any, filter: IbFilterSyntax | any) => {\n    return Object.entries(data).every(([key, value]) => {\n      const condition = filter[key];\n      return (\n        applyFilter(condition, value) &&\n        this.evaluateCrossColumnFilter(data, filter)\n      );\n    });\n  };\n\n  buildFilter() {\n    let output = {};\n    const filters = this.filters.toArray();\n\n    if (this.searchBar) {\n      output = {\n        __crossColumnFilter: contains(this.searchBar),\n      };\n    }\n\n    for (const key of Object.keys(this.rawFilter)) {\n      const filter = filters.find((f) => f.name === key);\n      // if (filter.searchCriteria.invalid) {\n      //   filter.clear(false);\n      //   continue;\n      // }\n      output = { ...output, [key]: filter.build() };\n    }\n\n    return output;\n  }\n\n  private evaluateCrossColumnFilter = (\n    data: any,\n    filter: Record<string, any>\n  ) => {\n    if (!(\"__crossColumnFilter\" in filter)) {\n      return true;\n    }\n\n    if (!filter?.__crossColumnFilter) {\n      return true;\n    }\n\n    const dataStr = Object.keys(data as unknown as Record<string, any>)\n      .reduce((currentTerm: string, key: string) => {\n        // https://github.com/angular/components/blob/main/src/material/table/table-data-source.ts#L247\n        return (\n          currentTerm + (data as unknown as Record<string, any>)[key] + \"◬\"\n        );\n      }, \"\")\n      .toLowerCase();\n\n    return applyFilter(filter.__crossColumnFilter, dataStr);\n  };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"@angular/material\" as mat;\n\nsection.ib-filter-list {\n  height: 0;\n  padding: 0;\n  opacity: 0;\n  display: flex;\n  flex-wrap: wrap;\n\n  gap: 0.4em;\n  @include mat.button-density(-1);\n  transition: all 220ms cubic-bezier(0.16, 1, 0.3, 1), opacity 60ms ease-out;\n\n  &.ib-filter-list__show {\n    height: max-content;\n    padding: 12px 0 12px 12px;\n    opacity: 1;\n    transition: all 220ms cubic-bezier(0.16, 1, 0.3, 1);\n  }\n\n  .ib-filter-button,\n  .ib-add-filter-button {\n    font-size: 12px;\n    border-radius: 20px;\n  }\n\n  .ib-add-column-filter-button\n    .mdc-evolution-chip__cell--primary\n    .mdc-evolution-chip__action {\n    padding-left: 0;\n  }\n}\n\n.cdk-overlay-container .mat-mdc-menu-panel {\n  overflow-x: hidden;\n  border-radius: 8px;\n  margin-top: 8px;\n}\n",
                    "styleUrl": "./filter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ibTable",
                        "type": "IbTable",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 64,
                "jsdoctags": [
                    {
                        "name": "ibTable",
                        "type": "IbTable",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 48,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "IbFilterActions",
            "id": "component-IbFilterActions-5938608b32da76b1b09f414d21bfc3bb6f008143f21e8d0c3a4085780e2e60ee83bf934171c2330be9bb3e39a7b46f56a6c74e0f7642b1664cd2484d9c492bd5",
            "file": "src/app/inobeta-ui/ui/kai-filter/filter-actions/filter-actions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-filter-actions",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-divider></mat-divider>\n<section style=\"margin-left: 1em; margin-top: 0.5em\">\n  <ng-content></ng-content>\n</section>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"ib-filter-actions\",\n  template: `\n    <mat-divider></mat-divider>\n    <section style=\"margin-left: 1em; margin-top: 0.5em\">\n      <ng-content></ng-content>\n    </section>\n  `,\n})\nexport class IbFilterActions {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "IbFilterButton",
            "id": "component-IbFilterButton-72ae4d9faff6d7982b893fd4ca3e631e47902ff7237624ccead7d441b0b701c0763284e73fe6b08e69d67c20eed984455d0ecfe6cd63c54cbcb714a2dc2cae40",
            "file": "src/app/inobeta-ui/ui/kai-filter/filter-button/filter-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-filter-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "filter-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "trigger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatMenuTrigger",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatMenuTrigger"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild } from \"@angular/core\";\nimport { MatMenuTrigger } from \"@angular/material/menu\";\n\n@Component({\n  selector: \"ib-filter-button\",\n  templateUrl: \"filter-button.component.html\",\n})\nexport class IbFilterButton {\n  @ViewChild(MatMenuTrigger) trigger: MatMenuTrigger;\n\n  closeMenu() {\n    this.trigger.closeMenu();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<button class=\"ib-filter-button\" [matMenuTriggerFor]=\"menu\" mat-stroked-button>\n  <section>\n    <ng-content select=\"[ib-filter-name]\"></ng-content>\n    <ng-content select=\"[ib-filter-value]\"></ng-content>\n  </section>\n  <mat-icon  iconPositionEnd>arrow_drop_down</mat-icon>\n</button>\n\n<mat-menu #menu=\"matMenu\">\n  <section (click)=\"$event.stopPropagation();\" style=\"width: 280px\">\n    <ng-content></ng-content>\n    <ng-content select=\"ib-filter-actions\"></ng-content>\n  </section>\n</mat-menu>"
        },
        {
            "name": "IbKaiTableApiExamplePage",
            "id": "component-IbKaiTableApiExamplePage-d0d7b11752e7ea4dc6b44d36a83b8224a9e3b0c1c8456ff5c32fd19508c454786850f84dba911cfe6daaf4e4ff2c7fc611f5fd26ca0bd534d26497b88724fcda",
            "file": "src/app/examples/kai-table-example/kai-table-api-example.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-kai-table-api-example",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: flex;\n        flex-direction: column;\n        padding: 30px;\n        gap: 3em;\n      }\n\n      ib-kai-table ::ng-deep .ib-table-scrollable {\n        max-height: 500px;\n      }\n\n      ib-kai-table .ib-table {\n        --ib-table-header-cell-color: lightgrey;\n        --ib-table-header-cell-background-color: #309933;\n      }\n    "
            ],
            "template": "<div style=\"display: flex; gap: 12px\">\n  <button mat-raised-button (click)=\"refresh()\">refresh</button>\n  <button mat-raised-button color=\"warn\" (click)=\"simulateError()\">\n    simulate error\n  </button>\n  <button mat-raised-button (click)=\"setState('loading')\">\n    set to loading\n  </button>\n  <button mat-raised-button (click)=\"setState('idle')\">set to idle</button>\n</div>\n<ib-kai-table\n  #table\n  [dataSource]=\"dataSource\"\n  [columns]=\"columns\"\n  [tableDef]=\"tableDef\"\n></ib-kai-table>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columns",
                    "defaultValue": "[\n    {\n      columnDef: \"created\",\n      header: \"Created\",\n      cell: (e) => `${formatDate(e.created_at, \"d MMM YYYY\", \"it-IT\")}`,\n      sort: true,\n    },\n    useColumn(\"state\"),\n    useColumn(\"#\", \"number\", false),\n    useColumn(\"title\"),\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbColumnDef[]",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "dataSource",
                    "defaultValue": "new IbDataSource<GithubIssue>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "fetchIssues",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "isRateLimitReached",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "kaiTable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTable",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'table', {static: true}"
                        }
                    ]
                },
                {
                    "name": "mapData",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "resultsLength",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "selectionColumn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbSelectionColumn",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "IbSelectionColumn, {static: true}"
                        }
                    ]
                },
                {
                    "name": "tableDef",
                    "defaultValue": "{\n    paginator: {\n      pageSize: 30,\n      pageSizeOptions: [30],\n    },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTableDef",
                    "optional": false,
                    "description": "",
                    "line": 93
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "state",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "simulateError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injectable, ViewChild } from \"@angular/core\";\nimport { useColumn } from \"src/app/inobeta-ui/ui/kai-table/cells\";\nimport { IbTable } from \"src/app/inobeta-ui/ui/kai-table/table.component\";\nimport { IbSelectionColumn } from \"src/app/inobeta-ui/ui/kai-table/selection-column\";\nimport {\n  IbColumnDef,\n  IbTableDef,\n  IbKaiTableState,\n} from \"src/app/inobeta-ui/ui/kai-table\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { SortDirection } from \"@angular/material/sort\";\nimport { Observable } from \"rxjs\";\nimport { IbDataSource } from \"src/app/inobeta-ui/ui/kai-table/table-data-source\";\nimport { formatDate } from \"@angular/common\";\n\n@Injectable({ providedIn: \"root\" })\nclass GithubService {\n  href = \"https://api.github.com/search/issues\";\n\n  constructor(private _httpClient: HttpClient) {}\n\n  getRepoIssues(\n    sort: string,\n    order: SortDirection,\n    page: number\n  ): Observable<GithubApi> {\n    const requestUrl = `${\n      this.href\n    }?q=repo:angular/components&sort=${sort}&order=${order}&page=${page + 1}`;\n\n    console.log(\"getRepoIssues\", \"sort:\", sort, \"order:\", order, \"page:\", page);\n    return this._httpClient.get<GithubApi>(requestUrl);\n  }\n}\n\n@Component({\n  selector: \"ib-kai-table-api-example\",\n  template: `\n    <div style=\"display: flex; gap: 12px\">\n      <button mat-raised-button (click)=\"refresh()\">refresh</button>\n      <button mat-raised-button color=\"warn\" (click)=\"simulateError()\">\n        simulate error\n      </button>\n      <button mat-raised-button (click)=\"setState('loading')\">\n        set to loading\n      </button>\n      <button mat-raised-button (click)=\"setState('idle')\">set to idle</button>\n    </div>\n    <ib-kai-table\n      #table\n      [dataSource]=\"dataSource\"\n      [columns]=\"columns\"\n      [tableDef]=\"tableDef\"\n    ></ib-kai-table>\n  `,\n  styles: [\n    `\n      :host {\n        display: flex;\n        flex-direction: column;\n        padding: 30px;\n        gap: 3em;\n      }\n\n      ib-kai-table ::ng-deep .ib-table-scrollable {\n        max-height: 500px;\n      }\n\n      ib-kai-table .ib-table {\n        --ib-table-header-cell-color: lightgrey;\n        --ib-table-header-cell-background-color: #309933;\n      }\n    `,\n  ],\n})\nexport class IbKaiTableApiExamplePage {\n  @ViewChild(\"table\", { static: true }) kaiTable: IbTable;\n  @ViewChild(IbSelectionColumn, { static: true })\n  selectionColumn: IbSelectionColumn;\n\n  dataSource = new IbDataSource<GithubIssue>();\n  columns: IbColumnDef[] = [\n    {\n      columnDef: \"created\",\n      header: \"Created\",\n      cell: (e) => `${formatDate(e.created_at, \"d MMM YYYY\", \"it-IT\")}`,\n      sort: true,\n    },\n    useColumn(\"state\"),\n    useColumn(\"#\", \"number\", false),\n    useColumn(\"title\"),\n  ];\n  tableDef: IbTableDef = {\n    paginator: {\n      pageSize: 30,\n      pageSizeOptions: [30],\n    },\n  };\n\n  isRateLimitReached = false;\n  resultsLength = 0;\n\n  constructor(private github: GithubService) {}\n\n  ngOnInit() {\n    this.dataSource.fetchData = this.fetchIssues;\n    this.dataSource.mapData = this.mapData;\n    this.dataSource.updatePaginator = (result: GithubApi) => result.total_count;\n  }\n\n  fetchIssues = (sort: string, order: SortDirection, page: number) =>\n    this.github!.getRepoIssues(sort, order, page);\n\n  mapData = (result: GithubApi) => result.items;\n\n  setState(state: string) {\n    if (state === \"loading\") {\n      return (this.kaiTable.state = IbKaiTableState.LOADING);\n    }\n\n    this.kaiTable.state = IbKaiTableState.IDLE;\n  }\n\n  refresh() {\n    this.dataSource.refresh();\n  }\n\n  simulateError() {\n    this.github.href = \"oops\";\n    this.dataSource.refresh();\n    setTimeout(\n      () => (this.github.href = \"https://api.github.com/search/issues\"),\n      1\n    );\n  }\n}\n\ninterface GithubApi {\n  items: GithubIssue[];\n  total_count: number;\n}\n\ninterface GithubIssue {\n  created_at: string;\n  number: string;\n  state: string;\n  title: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: flex;\n        flex-direction: column;\n        padding: 30px;\n        gap: 3em;\n      }\n\n      ib-kai-table ::ng-deep .ib-table-scrollable {\n        max-height: 500px;\n      }\n\n      ib-kai-table .ib-table {\n        --ib-table-header-cell-color: lightgrey;\n        --ib-table-header-cell-background-color: #309933;\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "github",
                        "type": "GithubService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 101,
                "jsdoctags": [
                    {
                        "name": "github",
                        "type": "GithubService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "IbKaiTableContextActionExamplePage",
            "id": "component-IbKaiTableContextActionExamplePage-cd9a47083e7b48c1adccc991d3cd54e6d0ecfaec4c772aa9201e55a6fed8002de0837fc6fbaa96225533753ce7dab2ada0b7b01f04bf58373c496e93eafae75b",
            "file": "src/app/examples/kai-table-example/kai-table-context-action-example.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-kai-table-context-action-example",
            "styleUrls": [],
            "styles": [
                "\n  :host {\n    display: flex;\n    flex-direction: column;\n    padding: 30px;\n  }\n  "
            ],
            "template": "\n<section class=\"mat-typografy\">\n  <h1>\n    <mat-icon>warning</mat-icon>\n    Deprecation warning!\n  </h1>\n  <p>\n    Al completamento di Kai Table l'attuale implementazione delle azioni\n    per riga verrà deprecato (o comunque sia sconsigliato.)\n  </p>\n</section>\n\n<ib-kai-table\n  [columns]=\"columns\"\n  [dataSource]=\"dataSource\"\n  (ibRowClicked)=\"handleRowClicked($event)\"\n  class=\"mat-elevation-z8\"\n></ib-kai-table>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columns",
                    "defaultValue": "[\n    useColumn('name'),\n    useColumn('fruit'),\n    useColumn('number', 'number', true),\n    useContextColumn(() => [{type: 'view', icon: 'chevron_right'}])\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbColumnDef<IbUserExample>[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTableDataSource<IbUserExample>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "handleRowClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "IbTableRowEvent<IbUserExample>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IbTableRowEvent<IbUserExample>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { useColumn, useContextColumn } from 'src/app/inobeta-ui/ui/kai-table/cells';\nimport { IbColumnDef, IbTableRowEvent } from 'src/app/inobeta-ui/ui/kai-table/table.types';\nimport { createNewUser, IbUserExample } from './users';\n\n@Component({\n  selector: 'ib-kai-table-context-action-example',\n  template: `\n\n  <section class=\"mat-typografy\">\n    <h1>\n      <mat-icon>warning</mat-icon>\n      Deprecation warning!\n    </h1>\n    <p>\n      Al completamento di Kai Table l'attuale implementazione delle azioni\n      per riga verrà deprecato (o comunque sia sconsigliato.)\n    </p>\n  </section>\n\n  <ib-kai-table\n    [columns]=\"columns\"\n    [dataSource]=\"dataSource\"\n    (ibRowClicked)=\"handleRowClicked($event)\"\n    class=\"mat-elevation-z8\"\n  ></ib-kai-table>\n  `,\n  styles: [`\n  :host {\n    display: flex;\n    flex-direction: column;\n    padding: 30px;\n  }\n  `]\n})\n\nexport class IbKaiTableContextActionExamplePage implements OnInit {\n  dataSource = new MatTableDataSource<IbUserExample>();\n  columns: IbColumnDef<IbUserExample>[] = [\n    useColumn('name'),\n    useColumn('fruit'),\n    useColumn('number', 'number', true),\n    useContextColumn(() => [{type: 'view', icon: 'chevron_right'}])\n  ];\n\n  ngOnInit() {\n    const users = Array.from({ length: 1000 }, (_, k) => createNewUser(k + 1))\n    this.dataSource.data = users;\n  }\n\n  handleRowClicked(event: IbTableRowEvent<IbUserExample>) {\n    if (event.type === 'view') {\n      alert(`${event.row.name} has ${event.row.number} ${event.row.fruit}(s)`);\n      // do the thing\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n  :host {\n    display: flex;\n    flex-direction: column;\n    padding: 30px;\n  }\n  \n",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "IbKaiTableExamplePage",
            "id": "component-IbKaiTableExamplePage-e32a6c3b0cac84ea72c85d0ac9256b578927e5a21d77b5cc79dc99e2876ba685fe66eeba537a8ab32c1e2f476d8fc465ab64404f5d2339da72288d10489c3495",
            "file": "src/app/examples/kai-table-example/kai-table-example.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-kai-table-example",
            "styleUrls": [],
            "styles": [
                "\n  :host {\n    display: flex;\n    flex-direction: column;\n    padding: 30px;\n  }\n\n  ib-kai-table >>> .ib-cell-number{\n    text-align: right;\n    padding-right: 20px;\n  }\n\n  ib-kai-table >>> .ib-action-the-search-key{\n    color: purple;\n    font-weight: bold;\n  }\n\n  ib-kai-table >>> table th:first-of-type{\n    border-top-left-radius: 20px;\n  }\n\n  ib-kai-table >>> table th:last-of-type{\n    border-top-right-radius: 20px;\n  }\n  ib-kai-table >>> .ib-table-scrollable{\n    height: 450px;\n  }\n  "
            ],
            "templateUrl": [
                "kai-table-example.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columns",
                    "defaultValue": "[\n    useColumn('name', 'name'),\n    useColumn('Frutta','fruit', true),\n    useNumberColumn('number', 'number', true),\n    useDateColumn('My Date', 'aDate', true),\n    useDateColumn('My Date String', 'aDateString', true, 'dd/MMM/yyyy HH:mm'),\n    useContextColumn(() => [{type: 'the-search-key', icon: 'search'}])\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTableDataSource<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "tableDef",
                    "defaultValue": "{\n    /*paginator: {\n      hide: true\n    },*/\n    initialSort: {\n      active: 'fruit',\n      direction: 'asc'\n    }\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTableDef",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "testClick",
                    "args": [
                        {
                            "name": "ev",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {  Component } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { useColumn, useContextColumn, useDateColumn, useNumberColumn } from 'src/app/inobeta-ui/ui/kai-table/cells';\nimport { IbTableDef } from 'src/app/inobeta-ui/ui/kai-table/table.types';\nimport { createNewUser } from './users';\n\n@Component({\n  selector: 'ib-kai-table-example',\n  templateUrl: 'kai-table-example.html',\n  styles: [`\n  :host {\n    display: flex;\n    flex-direction: column;\n    padding: 30px;\n  }\n\n  ib-kai-table >>> .ib-cell-number{\n    text-align: right;\n    padding-right: 20px;\n  }\n\n  ib-kai-table >>> .ib-action-the-search-key{\n    color: purple;\n    font-weight: bold;\n  }\n\n  ib-kai-table >>> table th:first-of-type{\n    border-top-left-radius: 20px;\n  }\n\n  ib-kai-table >>> table th:last-of-type{\n    border-top-right-radius: 20px;\n  }\n  ib-kai-table >>> .ib-table-scrollable{\n    height: 450px;\n  }\n  `]\n})\nexport class IbKaiTableExamplePage {\n  dataSource = new MatTableDataSource<any>();\n  columns = [\n    useColumn('name', 'name'),\n    useColumn('Frutta','fruit', true),\n    useNumberColumn('number', 'number', true),\n    useDateColumn('My Date', 'aDate', true),\n    useDateColumn('My Date String', 'aDateString', true, 'dd/MMM/yyyy HH:mm'),\n    useContextColumn(() => [{type: 'the-search-key', icon: 'search'}])\n  ];\n\n  tableDef: IbTableDef = {\n    /*paginator: {\n      hide: true\n    },*/\n    initialSort: {\n      active: 'fruit',\n      direction: 'asc'\n    }\n  }\n\n  ngOnInit() {\n    const users = Array.from({ length: 1000 }, (_, k) => createNewUser(k + 1))\n    this.dataSource.data = users\n  }\n\n  testClick(ev){\n    console.log('ev', ev)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n  :host {\n    display: flex;\n    flex-direction: column;\n    padding: 30px;\n  }\n\n  ib-kai-table >>> .ib-cell-number{\n    text-align: right;\n    padding-right: 20px;\n  }\n\n  ib-kai-table >>> .ib-action-the-search-key{\n    color: purple;\n    font-weight: bold;\n  }\n\n  ib-kai-table >>> table th:first-of-type{\n    border-top-left-radius: 20px;\n  }\n\n  ib-kai-table >>> table th:last-of-type{\n    border-top-right-radius: 20px;\n  }\n  ib-kai-table >>> .ib-table-scrollable{\n    height: 450px;\n  }\n  \n",
            "templateData": "<ib-kai-table\n  [dataSource]=\"dataSource\"\n  [columns]=\"columns\"\n  [tableDef]=\"tableDef\"\n  (ibRowClicked)=\"testClick($event)\"\n  >\n  <ng-template ibKaiRowGroup let-row=\"row\">\n    row data: {{row | json}}\n  </ng-template>\n</ib-kai-table>\n"
        },
        {
            "name": "IbKaiTableFullExamplePage",
            "id": "component-IbKaiTableFullExamplePage-98b06ae9bc916c935d5ddbc6cadafeaa1bceeaef1f803261dfdee8097628266d0a669c193a11329ed1968f4a2ac6e985d913c8d7da5dd12dda3ff89c50c88b7b",
            "file": "src/app/examples/kai-table-example/kai-table-full-example.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-kai-table-full-example",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: flex;\n        flex-direction: column;\n        padding: 30px;\n        gap: 3em;\n      }\n\n      ib-kai-table .ib-table {\n        --ib-table-header-cell-color: lightgrey;\n        --ib-table-header-cell-background-color: #309933;\n      }\n    "
            ],
            "template": "<div style=\"display: flex; gap: 12px\">\n  <button\n    (click)=\"getSelection()\"\n    [disabled]=\"selectionColumn?.selection.selected.length === 0\"\n    mat-raised-button\n  >\n    get selection\n  </button>\n</div>\n<ib-kai-table #table [columns]=\"columns\" [dataSource]=\"dataSource\">\n  <ib-filter [value]=\"initialValue\">\n    <ib-text-filter ibTableColumnName=\"name\">Name</ib-text-filter>\n    <ib-tag-filter ibTableColumnName=\"fruit\">Fruit</ib-tag-filter>\n    <ib-number-filter ibTableColumnName=\"number\">Amount</ib-number-filter>\n    <ib-filter-date ibTableColumnName=\"aDate\">Purchased</ib-filter-date>\n  </ib-filter>\n  <ib-selection-column\n    (ibRowSelectionChange)=\"selectionChange($event)\"\n  ></ib-selection-column>\n</ib-kai-table>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columns",
                    "defaultValue": "[\n    useColumn(\"Name\", \"name\"),\n    useColumn(\"Fruit\", \"fruit\"),\n    useColumn(\"Amount\", \"number\", true),\n    useDateColumn(\"Purchased\", \"aDate\", true),\n    useContextColumn(() => [{ type: \"view\", icon: \"chevron_right\" }]),\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTableDataSource<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "initialValue",
                    "defaultValue": "{ fruit: [\"apple\", \"banana\"], number: { min: 5, max: 10 } }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "kaiTable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTable",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'table', {static: true}"
                        }
                    ]
                },
                {
                    "name": "selectionColumn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbSelectionColumn",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "IbSelectionColumn, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getSelection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectionChange",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { MatTableDataSource } from \"@angular/material/table\";\nimport {\n  useColumn,\n  useContextColumn,\n  useDateColumn,\n} from \"src/app/inobeta-ui/ui/kai-table/cells\";\nimport { IbTable } from \"src/app/inobeta-ui/ui/kai-table/table.component\";\nimport { createNewUser } from \"./users\";\nimport { IbSelectionColumn } from \"src/app/inobeta-ui/ui/kai-table/selection-column\";\n\n@Component({\n  selector: \"ib-kai-table-full-example\",\n  template: `\n    <div style=\"display: flex; gap: 12px\">\n      <button\n        (click)=\"getSelection()\"\n        [disabled]=\"selectionColumn?.selection.selected.length === 0\"\n        mat-raised-button\n      >\n        get selection\n      </button>\n    </div>\n    <ib-kai-table #table [columns]=\"columns\" [dataSource]=\"dataSource\">\n      <ib-filter [value]=\"initialValue\">\n        <ib-text-filter ibTableColumnName=\"name\">Name</ib-text-filter>\n        <ib-tag-filter ibTableColumnName=\"fruit\">Fruit</ib-tag-filter>\n        <ib-number-filter ibTableColumnName=\"number\">Amount</ib-number-filter>\n        <ib-filter-date ibTableColumnName=\"aDate\">Purchased</ib-filter-date>\n      </ib-filter>\n      <ib-selection-column\n        (ibRowSelectionChange)=\"selectionChange($event)\"\n      ></ib-selection-column>\n    </ib-kai-table>\n  `,\n  styles: [\n    `\n      :host {\n        display: flex;\n        flex-direction: column;\n        padding: 30px;\n        gap: 3em;\n      }\n\n      ib-kai-table .ib-table {\n        --ib-table-header-cell-color: lightgrey;\n        --ib-table-header-cell-background-color: #309933;\n      }\n    `,\n  ],\n})\nexport class IbKaiTableFullExamplePage {\n  @ViewChild(\"table\", { static: true }) kaiTable: IbTable;\n  @ViewChild(IbSelectionColumn, { static: true })\n  selectionColumn: IbSelectionColumn;\n\n  initialValue = { fruit: [\"apple\", \"banana\"], number: { min: 5, max: 10 } };\n  dataSource = new MatTableDataSource<any>();\n  columns = [\n    useColumn(\"Name\", \"name\"),\n    useColumn(\"Fruit\", \"fruit\"),\n    useColumn(\"Amount\", \"number\", true),\n    useDateColumn(\"Purchased\", \"aDate\", true),\n    useContextColumn(() => [{ type: \"view\", icon: \"chevron_right\" }]),\n  ];\n\n  ngOnInit() {\n    const users = Array.from({ length: 1000 }, (_, k) =>\n      createNewUser(k + 1)\n    ).map((u) => ({ ...u, select: false }));\n    this.dataSource.data = users;\n  }\n\n  selectionChange(data) {\n    console.log(\"selection change\", data);\n  }\n\n  getSelection() {\n    console.log(\"selection\", this.selectionColumn?.selection.selected);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: flex;\n        flex-direction: column;\n        padding: 30px;\n        gap: 3em;\n      }\n\n      ib-kai-table .ib-table {\n        --ib-table-header-cell-color: lightgrey;\n        --ib-table-header-cell-background-color: #309933;\n      }\n    \n"
        },
        {
            "name": "IbLoginComponent",
            "id": "component-IbLoginComponent-8da6f08719a615a44c60b832fd6bcb167d8f0248b66fa9baf77862e3040e5d1dded30aea7cfe3ba755481aa32245c98158fa8be7886e90dbcf56d213eb5d28d8",
            "file": "src/app/inobeta-ui/http/pages/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-login",
            "styleUrls": [],
            "styles": [],
            "template": "<form [formGroup]=\"this.form\" class=\"form-horizontal\" role=\"form\" (submit)=\"doLogin(path)\">\n  <div class=\"form-group\">\n    <div class=\"col-sm-2\">\n      <label class=\"control-label\">{{ 'login.username' | translate}}</label>\n    </div>\n    <div class=\"col-sm-10\">\n      <input type=\"text\" class=\"form-control\" formControlName=\"username\" placeholder=\"{{ 'login.username' | translate}}\">\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <div class=\"col-sm-2\">\n      <label class=\"control-label\">{{ 'login.password' | translate}}</label>\n    </div>\n    <div class=\"col-sm-10\">\n      <input type=\"password\" class=\"form-control\" formControlName=\"password\" placeholder=\"{{ 'login.password' | translate}}\">\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <div class=\"col-sm-offset-2 col-sm-10\">\n      <button type=\"submit\" class=\"btn btn-primary\">{{ 'login.do' | translate}}</button>\n    </div>\n  </div>\n</form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UntypedFormGroup",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "doLogin",
                    "args": [
                        {
                            "name": "path",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {UntypedFormBuilder, UntypedFormGroup, UntypedFormControl, Validators} from '@angular/forms';\nimport {Router} from '@angular/router';\nimport {IbSessionService} from '../auth/session.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n// TODO angular2-toaster eliminato da package.json, quindi qui ci sono vari commenti per far partire l'app\n\n@Component({\n  selector: 'ib-login',\n  template: `\n    <form [formGroup]=\"this.form\" class=\"form-horizontal\" role=\"form\" (submit)=\"doLogin(path)\">\n      <div class=\"form-group\">\n        <div class=\"col-sm-2\">\n          <label class=\"control-label\">{{ 'login.username' | translate}}</label>\n        </div>\n        <div class=\"col-sm-10\">\n          <input type=\"text\" class=\"form-control\" formControlName=\"username\" placeholder=\"{{ 'login.username' | translate}}\">\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <div class=\"col-sm-2\">\n          <label class=\"control-label\">{{ 'login.password' | translate}}</label>\n        </div>\n        <div class=\"col-sm-10\">\n          <input type=\"password\" class=\"form-control\" formControlName=\"password\" placeholder=\"{{ 'login.password' | translate}}\">\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n          <button type=\"submit\" class=\"btn btn-primary\">{{ 'login.do' | translate}}</button>\n        </div>\n      </div>\n    </form>\n  `\n})\nexport class IbLoginComponent {\n\n  @Input() path;\n  form: UntypedFormGroup;\n\n  constructor(\n    private srvSession: IbSessionService,\n    private srvFormBuilder: UntypedFormBuilder,\n    private srvRouter: Router,\n    private snackBar: MatSnackBar) {\n    this.form = this.srvFormBuilder.group({\n      username: new UntypedFormControl('', Validators.required),\n      password: new UntypedFormControl('', Validators.required),\n      rememberMe: new UntypedFormControl(false)\n    });\n  }\n\n  doLogin(path) {\n    this.srvSession.login(this.form.value).subscribe(\n      () => {\n        this.snackBar.open('Login success', null, {duration: 2000});\n        this.srvRouter.navigateByUrl(path);\n      },\n      () => {\n        this.snackBar.open('Login error', null, {duration: 2000});\n      }\n    );\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "srvSession",
                        "type": "IbSessionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "srvFormBuilder",
                        "type": "UntypedFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "srvRouter",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "srvSession",
                        "type": "IbSessionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "srvFormBuilder",
                        "type": "UntypedFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "srvRouter",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "IbMainMenuBarComponent",
            "id": "component-IbMainMenuBarComponent-448b74cbb1844e77c8660488f1739fb982f9055344fea44f614fc115ae6407d0874265117e8f5d3d3221e06bb62c6f4b64e911fc69b1c7b0933a7adb0e53f3e0",
            "file": "src/app/inobeta-ui/ui/main-menu/components/main-menu-bar/main-menu-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-main-menu-bar",
            "styleUrls": [
                "./main-menu-bar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./main-menu-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "barIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDichiara l'icona da utilizzare per la menu bar principale, ovvero quella che al click apre il menu in forma estesa.\nUsed to declare the icon that must be used for the main menu bar, i.e the one that on click event opens the actual menu.\n",
                    "description": "<p>Dichiara l&#39;icona da utilizzare per la menu bar principale, ovvero quella che al click apre il menu in forma estesa.\nUsed to declare the icon that must be used for the main menu bar, i.e the one that on click event opens the actual menu.</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "navBottomLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDichiara i dati per il bottone del menu che viene visualizzato in basso a sinistra, e che viene utilizzato per il tasto di assistenza.\nUsed to declare data for the button displayed on the bottom left  of the menu, which can be used as a 'get help' button.\n",
                    "description": "<p>Dichiara i dati per il bottone del menu che viene visualizzato in basso a sinistra, e che viene utilizzato per il tasto di assistenza.\nUsed to declare data for the button displayed on the bottom left  of the menu, which can be used as a &#39;get help&#39; button.</p>\n",
                    "line": 50,
                    "type": "IbMainMenuButton",
                    "decorators": []
                },
                {
                    "name": "navButtonBottomRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDichiara una stringa che sarà visualizzata in basso a destra, e che viene utilizzata per indicare il copyright.\nUsed to declare a string which will be displayed on the bottom right, which can be used to declare the copyright.\n",
                    "description": "<p>Dichiara una stringa che sarà visualizzata in basso a destra, e che viene utilizzata per indicare il copyright.\nUsed to declare a string which will be displayed on the bottom right, which can be used to declare the copyright.</p>\n",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "navButtonsUpRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDichiara i dati per i 2 bottoni del menu che vengono visualizzati in alto a destra.\nUsed to declare data for the 2 buttons displayed on the up right of the menu.\n",
                    "description": "<p>Dichiara i dati per i 2 bottoni del menu che vengono visualizzati in alto a destra.\nUsed to declare data for the 2 buttons displayed on the up right of the menu.</p>\n",
                    "line": 40,
                    "type": "IbMainMenuButton[]",
                    "decorators": []
                },
                {
                    "name": "navButtonTopCenter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDichiara i dati per il bottone del menu che viene visualizzato in alto al centro, e che viene utilizzato per il ritorno alla pagina principale (home)\nUsed to declare data for the button displayed in the top center of the menu, which is used to go to the home page.\n",
                    "description": "<p>Dichiara i dati per il bottone del menu che viene visualizzato in alto al centro, e che viene utilizzato per il ritorno alla pagina principale (home)\nUsed to declare data for the button displayed in the top center of the menu, which is used to go to the home page.</p>\n",
                    "line": 30,
                    "type": "IbMainMenuButton",
                    "decorators": []
                },
                {
                    "name": "navData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDichiara i dati per popolare le sezioni dei menu di primo livello e di secondo livello.\nUsed to declare data to initialize the first and second level menu sections.\n",
                    "description": "<p>Dichiara i dati per popolare le sezioni dei menu di primo livello e di secondo livello.\nUsed to declare data to initialize the first and second level menu sections.</p>\n",
                    "line": 35,
                    "type": "IbMainMenuData[]",
                    "decorators": []
                },
                {
                    "name": "navTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDichiara il titolo dell'applicazione che viene visualizzato in alto a sinistra.\nUsed to declare the application title displayed on the up left of the menu.\n",
                    "description": "<p>Dichiara il titolo dell&#39;applicazione che viene visualizzato in alto a sinistra.\nUsed to declare the application title displayed on the up left of the menu.</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "action",
                    "defaultValue": "new EventEmitter<IbMainMenuButton>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSegnala il click avvenuto su un pulsante di menu che non ha l'attributo link definito.\nReports any click event happened on a menu button that doesn't have the link attribute set.\n",
                    "description": "<p>Segnala il click avvenuto su un pulsante di menu che non ha l&#39;attributo link definito.\nReports any click event happened on a menu button that doesn&#39;t have the link attribute set.</p>\n",
                    "line": 55,
                    "type": "EventEmitter<IbMainMenuButton>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "temporaryWrapper",
                    "defaultValue": "this.renderer.createElement('div')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 57
                }
            ],
            "methodsClass": [
                {
                    "name": "addBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, Renderer2 } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { IbMainMenuButton } from '../../models/main-menu-button.model';\nimport { IbMainMenuData } from '../../models/main-menu-data.model';\nimport { IbMainMenuDialogComponent } from '../main-menu-dialog/main-menu-dialog.component';\n\n\n\n@Component({\n  selector: 'ib-main-menu-bar',\n  templateUrl: './main-menu-bar.component.html',\n  styleUrls: ['./main-menu-bar.component.css']\n})\nexport class IbMainMenuBarComponent  {\n/**\n * Dichiara l'icona da utilizzare per la menu bar principale, ovvero quella che al click apre il menu in forma estesa.\n * Used to declare the icon that must be used for the main menu bar, i.e the one that on click event opens the actual menu.\n */\n  @Input() barIcon: string;\n\n  /**\n   * Dichiara il titolo dell'applicazione che viene visualizzato in alto a sinistra.\n   * Used to declare the application title displayed on the up left of the menu.\n   */\n  @Input() navTitle: string;\n  /**\n   * Dichiara i dati per il bottone del menu che viene visualizzato in alto al centro, e che viene utilizzato per il ritorno alla pagina principale (home)\n   * Used to declare data for the button displayed in the top center of the menu, which is used to go to the home page.\n   */\n  @Input() navButtonTopCenter: IbMainMenuButton;\n  /**\n   * Dichiara i dati per popolare le sezioni dei menu di primo livello e di secondo livello.\n   * Used to declare data to initialize the first and second level menu sections.\n   */\n   @Input() navData: IbMainMenuData[];\n  /**\n   * Dichiara i dati per i 2 bottoni del menu che vengono visualizzati in alto a destra.\n   * Used to declare data for the 2 buttons displayed on the up right of the menu.\n   */\n  @Input() navButtonsUpRight: IbMainMenuButton[];\n  /**\n   * Dichiara una stringa che sarà visualizzata in basso a destra, e che viene utilizzata per indicare il copyright.\n   * Used to declare a string which will be displayed on the bottom right, which can be used to declare the copyright.\n   */\n  @Input() navButtonBottomRight: string;\n  /**\n   * Dichiara i dati per il bottone del menu che viene visualizzato in basso a sinistra, e che viene utilizzato per il tasto di assistenza.\n   * Used to declare data for the button displayed on the bottom left  of the menu, which can be used as a 'get help' button.\n   */\n  @Input() navBottomLeft: IbMainMenuButton;\n  /**\n   * Segnala il click avvenuto su un pulsante di menu che non ha l'attributo link definito.\n   * Reports any click event happened on a menu button that doesn't have the link attribute set.\n  */\n  @Output() action: EventEmitter<IbMainMenuButton> = new EventEmitter<IbMainMenuButton>();\n\n  temporaryWrapper: HTMLElement = this.renderer.createElement('div');\n\n\n  constructor(\n    public dialog: MatDialog,\n    private renderer: Renderer2) {\n      this.renderer.addClass(this.temporaryWrapper, 'blur-effect');\n      this.renderer.appendChild(document.body, this.temporaryWrapper);\n    }\n\n  openDialog() {\n    const dialogOpened = this.dialog.open(IbMainMenuDialogComponent, {\n      maxWidth: '100vw',\n      maxHeight: '100vh',\n      height: '100%',\n      width: '100%',\n      data: {\n        title: this.navTitle,\n        topCenter: this.navButtonTopCenter,\n        upRight: this.navButtonsUpRight,\n        navData: this.navData,\n        bottomLeft: this.navBottomLeft,\n        bottomRight: this.navButtonBottomRight\n      },\n      panelClass: 'mat-dialog-container-for-ib-main-menu'\n    });\n\n\n    this.addBlur();\n\n    dialogOpened.afterClosed()\n    .subscribe(result => {\n      if(result) {\n        this.action.emit(result);\n      }\n      this.removeBlur();\n    })\n  }\n\n  addBlur() {\n    this.temporaryWrapper.style.display = 'block';\n    Array.prototype.slice.call(document.body.children).map( x => {\n      x.classList.value === 'cdk-overlay-container' ||\n      x.classList.value === 'blur-effect' ?\n      null : this.renderer.appendChild(this.temporaryWrapper,x);\n    });\n  }\n\n  removeBlur() {\n    this.temporaryWrapper.style.display = 'none';\n    Array.prototype.slice.call(this.temporaryWrapper.children).map( x => {\n      this.renderer.appendChild(document.body,x);\n      })\n  }\n}\n\n\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#ib-main-menu-box {\n  height:32px;\n  width: 32px;\n  margin: 0px;\n  text-align: center;\n}\n\n#ib-main-menu-box button {\n  width: 32px;\n  min-width: 28px;\n  height:32px;\n  margin: 0px;\n  padding: 0px;\n  border-radius: 50%;\n}\n\n#ib-main-menu-box button mat-icon {\n  width: 26px;\n  height: 26px;\n  font-size: 26px;\n  margin: -3px 3px 3px 3px;\n}\n\n",
                    "styleUrl": "./main-menu-bar.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "  <div id=\"ib-main-menu-box\" >\n    <button mat-button (click)=\"openDialog()\">\n      <mat-icon>{{barIcon}}</mat-icon>\n    </button>\n  </div>\n"
        },
        {
            "name": "IbMainMenuDialogComponent",
            "id": "component-IbMainMenuDialogComponent-6f3adb90fcba40e976b26f9702e50eec25647738771fa693071f61cebd22078d9e8e6b25438cbb02770f1b3b7c915e01e116fa14e1eb0b55e09e2a63018acc90",
            "file": "src/app/inobeta-ui/ui/main-menu/components/main-menu-dialog/main-menu-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-main-menu-dialog",
            "styleUrls": [
                "./main-menu-dialog.component.css"
            ],
            "styles": [],
            "template": "<mat-dialog-content (click)=\"this.dialogRef.close()\">\n  <ib-main-menu-expanded\n    [navDataSet]=\"data\"\n    (actionDo)=\"actionDo($event)\"\n    >\n  </ib-main-menu-expanded >\n</mat-dialog-content>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbMainMenuDataSet",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<IbMainMenuDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "actionDo",
                    "args": [
                        {
                            "name": "element",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA, _closeDialogVia } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { IbMainMenuDataSet } from '../../models/main-menu-data-set.model';\n\n@Component({\n  selector: 'ib-main-menu-dialog',\n  template: `\n    <mat-dialog-content (click)=\"this.dialogRef.close()\">\n      <ib-main-menu-expanded\n        [navDataSet]=\"data\"\n        (actionDo)=\"actionDo($event)\"\n        >\n      </ib-main-menu-expanded >\n    </mat-dialog-content>\n  `,\n  styleUrls: ['./main-menu-dialog.component.css']\n})\nexport class IbMainMenuDialogComponent {\n  constructor(\n    public dialogRef: MatDialogRef<IbMainMenuDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: IbMainMenuDataSet,\n    private router: Router) {}\n\n  actionDo(element){\n\n    this.dialogRef.close(element);\n    if (element.link !== undefined) { this.router.navigate([element.link]); }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "::-webkit-scrollbar {\n  width: 10px;\n}\n::-webkit-scrollbar-track {\n  background: #40404000;\n}\n::-webkit-scrollbar-thumb {\n  background: #888;\n  border-radius: 8px;\n}\n::-webkit-scrollbar-thumb:hover {\n  background: #555;\n}\n/* Set new class for Dialog */\n",
                    "styleUrl": "./main-menu-dialog.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<IbMainMenuDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "IbMainMenuDataSet",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<IbMainMenuDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "IbMainMenuDataSet",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "IbMainMenuExampleComponent",
            "id": "component-IbMainMenuExampleComponent-44d2891380f6d7146b2e7de570a0cb5e63ff74785bed555738a79f012a161a6950b597506ee354eeb17b517df136f4892b5b8247e4e10f34a4e95c6ecbe4a642",
            "file": "src/app/examples/main-menu-example/main-menu-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-main-menu-example",
            "styleUrls": [],
            "styles": [],
            "template": "<ib-main-menu-bar\n  [barIcon]=\"exMenuIconBar\"\n  [navTitle]=\"exAppTitle\"\n  [navButtonTopCenter]=\"exNavTopCenter\"\n  [navButtonsUpRight]=\"exNavUpRight\"\n  [navData]=\"exNavData\"\n  [navBottomLeft]=\"exNavBottomLeft\"\n  [navButtonBottomRight]=\"exNavBottomRight\"\n  (action)=\"handleMenuClick($event)\"\n></ib-main-menu-bar>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "exAppTitle",
                    "defaultValue": "'examples.ibMainMenu.title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "exMenuIconBar",
                    "defaultValue": "'apps'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "exNavBottomLeft",
                    "defaultValue": "{\n    label: \"examples.ibMainMenu.getHelp\",\n    icon: {label:\"help_outline\", type:\"\"},\n    link: \"home/forms\"\n\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbMainMenuButton",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "exNavBottomRight",
                    "defaultValue": "'examples.ibMainMenu.copyright'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "exNavData",
                    "defaultValue": "(mainMenuData as any).default",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbMainMenuData[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "exNavTopCenter",
                    "defaultValue": "{\n    label: 'shared.ibMainMenu.returnToDash',\n    link: 'home/table/redux',\n    icon: {label:'dashboard',type:'filled'}\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbMainMenuButton",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "exNavUpRight",
                    "defaultValue": "[{\n      label: \"examples.ibMainMenu.settings\",\n      icon: {label: \"settings\", type:\"two-tone\"},\n      link: \"home/forms\"\n    },\n    {\n      label: \"examples.ibMainMenu.logout\",\n      icon: {label:\"exit_to_app\", type: \"two-tone\"}\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbMainMenuButton[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "handleMenuClick",
                    "args": [
                        {
                            "name": "who",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "who",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { IbMainMenuButton } from 'src/app/inobeta-ui/ui/main-menu/models/main-menu-button.model';\nimport { IbMainMenuData } from 'src/app/inobeta-ui/ui/main-menu/models/main-menu-data.model';\nimport * as mainMenuData from './main-menu-data.json';\n\n@Component({\n  selector: 'ib-main-menu-example',\n  template: `\n    <ib-main-menu-bar\n      [barIcon]=\"exMenuIconBar\"\n      [navTitle]=\"exAppTitle\"\n      [navButtonTopCenter]=\"exNavTopCenter\"\n      [navButtonsUpRight]=\"exNavUpRight\"\n      [navData]=\"exNavData\"\n      [navBottomLeft]=\"exNavBottomLeft\"\n      [navButtonBottomRight]=\"exNavBottomRight\"\n      (action)=\"handleMenuClick($event)\"\n    ></ib-main-menu-bar>`\n})\nexport class IbMainMenuExampleComponent {\n\n  exMenuIconBar: string = 'apps';\n\n  exAppTitle: string = 'examples.ibMainMenu.title';\n\n  exNavTopCenter: IbMainMenuButton = {\n    label: 'shared.ibMainMenu.returnToDash',\n    link: 'home/table/redux',\n    icon: {label:'dashboard',type:'filled'}\n  };\n\n  exNavData: IbMainMenuData[] = (mainMenuData as any).default;\n\n  exNavUpRight: IbMainMenuButton[] = [{\n      label: \"examples.ibMainMenu.settings\",\n      icon: {label: \"settings\", type:\"two-tone\"},\n      link: \"home/forms\"\n    },\n    {\n      label: \"examples.ibMainMenu.logout\",\n      icon: {label:\"exit_to_app\", type: \"two-tone\"}\n    }\n  ];\n\n  exNavBottomLeft: IbMainMenuButton = {\n    label: \"examples.ibMainMenu.getHelp\",\n    icon: {label:\"help_outline\", type:\"\"},\n    link: \"home/forms\"\n\n  };\n\n  exNavBottomRight: string = 'examples.ibMainMenu.copyright'\n\n  constructor() { }\n\n  handleMenuClick(who){\n    //switch(who.label){\n    //  case 'examples.ibMainMenu.logout': console.log('Emitted logout OK'); break;\n    //  case 'examples.ibMainMenu.getHelp': console.log(' Emitted getHelp OK'); break;\n    //}\n    console.log('Emitted', who.label);\n\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 52
            }
        },
        {
            "name": "IbMainMenuExpandedComponent",
            "id": "component-IbMainMenuExpandedComponent-e9811894263d1f00720b291a09908c939630e8ff95018faf77e3534646c111d2c9d1b3148a8f7aa4172441f3f5a4901cc53924d46fdca5e1aa9e00ea95c3e880",
            "file": "src/app/inobeta-ui/ui/main-menu/components/main-menu-expanded/main-menu-expanded.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-main-menu-expanded",
            "styleUrls": [
                "./main-menu-expanded.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./main-menu-expanded.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "navDataSet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "IbMainMenuDataSet",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "actionDo",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "calcBoxWidth",
                    "args": [
                        {
                            "name": "numElements",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "numElements",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcSecondLevelWidth",
                    "args": [
                        {
                            "name": "numElements",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "numElements",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitAction",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "element",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFor UpRight  e bottomLeft buttons\n",
                    "description": "<p>For UpRight  e bottomLeft buttons</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "element",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { IbMainMenuDataSet } from '../../models/main-menu-data-set.model';\n\n@Component({\n  selector: 'ib-main-menu-expanded',\n  templateUrl: './main-menu-expanded.component.html',\n  styleUrls: ['./main-menu-expanded.component.css']\n})\nexport class IbMainMenuExpandedComponent {\n  @Input() navDataSet: IbMainMenuDataSet;\n  @Output() actionDo: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    ) {}\n/**\n * For UpRight  e bottomLeft buttons\n */\n  emitAction(event, element) {\n    event.stopPropagation();\n    this.actionDo.emit(element);\n  }\n\n  calcBoxWidth(numElements) {\n    const cost = Math.ceil(numElements / 5);\n    let width = cost * 232;\n    numElements > 5 ? width = width + 10 * cost * 0.75 : null;\n    return width + 'px';\n  }\n\n  calcSecondLevelWidth(numElements) {\n    return 100 / Math.ceil(numElements / 5) + '%';\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n/* general */\n\n#ib-main-menu-expanded-header-title-wrapper p,\n#ib-main-menu-expanded-header-closeButton-wrapper button,\n.ib-main-menu-expanded-body-box-firstLevel-box p,\n.ib-main-menu-expanded-body-box-secondLevel button p,\n#ib-main-menu-expanded-footer-copyright-wrapper p {\n  font-style: normal;\n  font-weight: 500;\n  line-height: 24px;\n}\n\nmat-icon {\n  font-size: 24px;\n  line-height: 24px;\n}\n\n#ib-main-menu-expanded-header-closeButton-wrapper button p,\n.ib-main-menu-expanded-body-box-firstLevel-box p,\n.ib-main-menu-expanded-body-box-secondLevel button p {\n  font-size: 14px;\n}\n\n/* header */\n\n#ib-main-menu-expanded-header {\n  width: 100%;\n  height: 90px;\n  position: fixed;\n  margin: 0 auto;\n  z-index: 1;\n}\n\n#ib-main-menu-expanded-header-wrapper {\n  height: 90px;\n  width: 100%;\n  max-width: 1100px;\n  margin: 0 auto;\n}\n\n#ib-main-menu-expanded-header-title-wrapper,\n#ib-main-menu-expanded-header-settingsLogout-wrapper {\n  min-width:250px;\n  height: 40px;\n  margin: 0 auto;\n}\n\n#ib-main-menu-expanded-header-title-wrapper {\n  padding-left: 10px;\n}\n\n#ib-main-menu-expanded-header-title-wrapper p {\n  height: 32px;\n  font-size: 36px;\n  margin: 0;\n}\n\n\n\n#ib-main-menu-expanded-header-settingsLogout-wrapper {\n  padding-right: 10px;\n}\n\n#ib-main-menu-expanded-header-settingsLogout-box {\n  width: 76px;\n  height: 40px;\n  border-radius: 8px;\n  border-width: 1px;\n  border-style: solid;\n}\n\n/* body */\n\n#ib-main-menu-expanded-body {\n  max-width: 1010px;\n  height:100%;\n  margin: 0 auto;\n  margin-top:80px;\n  /*padding-bottom: 90px;*/\n}\n\n#ib-main-menu-expanded-body-wrapper {\n  max-width: 99%;\n  height:100%;\n  margin: 0 auto;\n}\n\n.ib-main-menu-expanded-body-box {\n  height: 244px;\n  padding: 16px;\n  border-radius: 8px;\n  border-width: 1px;\n  border-style: solid;\n  margin-top: 15px;\n}\n\n.ib-main-menu-expanded-body-box-firstLevel {\n  height: 34px;\n  border-bottom-width: 2px;\n  border-bottom-style: solid;\n}\n\n.active-section {\n  border-width: 1px;\n  border-style: solid;\n}\n\n.ib-main-menu-expanded-body-box-firstLevel button {\n  width:100%;\n  height: 32px;\n  padding-left: 5px;\n  border-radius: 8px 8px 0px 0px;\n  margin-bottom: 5px;\n}\n\n.ib-main-menu-expanded-body-box-firstLevel-box mat-icon {\n  margin-right: 10px;\n  line-height: 24px;\n}\n\n.ib-main-menu-expanded-body-box-firstLevel-box p {\n  height: 24px;\n  margin: 0;\n  line-height: 26px;\n\n}\n\n.ib-main-menu-expanded-body-box-secondLevel {\n  width:100%;\n  margin-top:10px;\n}\n\n.ib-main-menu-expanded-body-box-secondLevel-bigWrapper {\n  width:100%;\n  margin-top:0px;\n}\n\n.ib-main-menu-expanded-body-box-secondLevel button {\n  height: 32px;\n  border-radius: 8px;\n}\n\n.ib-main-menu-expanded-body-box-secondLevel button p {\n  height: 32px;\n  margin: 0px;\n  text-align: left;\n  line-height: 32px;\n  width: 100%;\n}\n\n.ib-main-menu-expanded-body-box-secondLevel button {\n  transition: background-color .2s;\n}\n\n/*footer*/\n\n#ib-main-menu-expanded-footer {\n  width: 100%;\n  height: 70px;\n  position: fixed;\n  margin: 0 auto;\n  padding: 0px 10px 0px 10px;\n  z-index: 1;\n  bottom: 0;\n}\n\n#ib-main-menu-expanded-footer-wrapper {\n  height: 60px;\n  width: 100%;\n  max-width: 1100px;\n  margin: 0 auto;\n}\n\n#ib-main-menu-expanded-footer-copyright-wrapper {\n  width: 166px;\n  height: 60px;\n}\n\n#ib-main-menu-expanded-footer-copyright-wrapper p {\n  height: 60px;\n  line-height: 60px;\n  margin: 0px;\n  font-weight: 200;\n  text-align: right;\n}\n",
                    "styleUrl": "./main-menu-expanded.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "templateData": "<!--header---------------------------------------------------------------------->\n<div id=\"ib-main-menu-expanded-header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n  <div id=\"ib-main-menu-expanded-header-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n\n    <!-- header > title --------------------------------------->\n    <div id=\"ib-main-menu-expanded-header-title-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n      <p>{{navDataSet.title | translate }}</p>\n    </div>\n\n    <!-- header > dashboard button --------------------------->\n    <ib-main-menu-header-footer-buttons\n      [type]=\"'topCenter'\"\n      [element]=\"navDataSet.topCenter\"\n      (click)=\"emitAction($event, navDataSet.topCenter)\">\n    </ib-main-menu-header-footer-buttons>\n\n    <!-- header > upRight buttons ------------------------------>\n    <div id=\"ib-main-menu-expanded-header-settingsLogout-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\n      <div id=\"ib-main-menu-expanded-header-settingsLogout-box\" fxLayout=\"row\" fxLayoutAlign=\"space-evenly center\">\n        <ng-container *ngFor=\"let upRight of navDataSet.upRight\">\n          <ib-main-menu-header-footer-buttons\n          class=\"ib-main-menu-upRight-item\"\n          [type]=\"'upRight'\"\n          [element]=\"upRight\"\n          (click)=\"emitAction($event,upRight)\">\n        </ib-main-menu-header-footer-buttons>\n\n        </ng-container>\n      </div>\n    </div>\n\n  </div>\n</div>\n\n<!--body---------------------------------------------------------------------->\n<div id=\"ib-main-menu-expanded-body\">\n  <div id=\"ib-main-menu-expanded-body-wrapper\" fxLayout=\"row wrap\" fxLayoutGap=\"16px\" fxLayoutAlign=\"start center\" >\n    <ng-container *ngFor=\"let firstLevel of navDataSet.navData\">\n\n      <!-- body > box ----------------------------------------->\n      <div\n      routerLink=\"{{ ( firstLevel.link === undefined) ? null : firstLevel.link }}\"\n      routerLinkActive\n      #rla=\"routerLinkActive\"\n      style=\"display: none;\"\n      ></div>\n\n      <div class=\"{{(rla.isActive && firstLevel.link !== undefined)? 'ib-main-menu-expanded-body-box ib-main-menu-box-active-box': 'ib-main-menu-expanded-body-box'}}\"\n        [ngStyle]=\"{'width': calcBoxWidth(firstLevel.paths.length)}\"\n        (click)=\"$event.stopPropagation()\">\n\n        <!-- body > box > firstLevel -------------------->\n        <div class=\"ib-main-menu-expanded-body-box-firstLevel\">\n            <div class=\"ib-main-menu-expanded-body-box-firstLevel-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n              <mat-icon class=\"{{firstLevel.icon.type?'material-icons-' + firstLevel.icon.type: null}}\">{{firstLevel.icon.label}}</mat-icon>\n              <p> {{firstLevel.label |translate}} </p>\n            </div>\n        </div>\n\n        <!-- body > box > secondLevel ------------------>\n        <div class=\"ib-main-menu-expanded-body-box-secondLevel\" fxLayout=\"column wrap\" fxLayoutAlign=\"start start\" style=\"height: 85%;\">\n          <ng-container *ngFor=\"let secondLevel of firstLevel.paths; let i = index\">\n            <div\n              routerLink=\"{{ ( secondLevel.link === undefined) ? null : secondLevel.link }}\"\n              routerLinkActive\n              #rla=\"routerLinkActive\"\n              style=\"display: none;\"\n            >\n            </div>\n            <button\n              mat-button\n              class=\"{{(rla.isActive && secondLevel.link !== undefined)? 'active-row-ie-secondLevel' : null}}\"\n              fxFlex=\"18\"\n              [ngStyle]=\"{'width': calcSecondLevelWidth(firstLevel.paths.length)}\"\n              (click)=\"emitAction($event, secondLevel)\"\n            >\n              <p>\n                {{secondLevel.label | translate}}\n              </p>\n            </button>\n          </ng-container>\n        </div>\n\n      </div>\n    </ng-container>\n  </div>\n</div>\n\n<!--footer--------------------------------------------------------------------------------------------->\n<div id=\"ib-main-menu-expanded-footer\">\n  <div id=\"ib-main-menu-expanded-footer-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n\n      <!-- footer > bottomLeft button ------------------------>\n      <ib-main-menu-header-footer-buttons\n          [type]=\"'bottomLeft'\"\n          [element]=\"navDataSet.bottomLeft\"\n          (click)=\"emitAction($event,navDataSet.bottomLeft)\">\n      </ib-main-menu-header-footer-buttons>\n\n    <!-- footer > bottomRight copyright ---------------------->\n    <div id=\"ib-main-menu-expanded-footer-copyright-wrapper\">\n      <p>{{navDataSet.bottomRight | translate}}</p>\n    </div>\n\n  </div>\n</div>\n"
        },
        {
            "name": "IbMainMenuHeaderFooterButtonsComponent",
            "id": "component-IbMainMenuHeaderFooterButtonsComponent-f9402627752db771d07ea628752c769f9085b4aa0556d48dd468726880b51441857393317bf4996bd1e8babd9182f0ba844285966b93260c01aa3b1e214ecdde",
            "file": "src/app/inobeta-ui/ui/main-menu/components/main-menu-expanded/header-footer-buttons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-main-menu-header-footer-buttons",
            "styleUrls": [],
            "styles": [
                "\n\n    #ib-main-menu-expanded-header-closeButton-wrapper {\n      width: 100%;\n      margin: 0 auto;\n    }\n\n    #ib-main-menu-expanded-header-closeButton-wrapper button {\n      min-width: 256px;\n      max-width: 453px;\n      height: 40px;\n      border-radius: 20px;\n      border-width: 1px;\n      border-style: solid;\n      transition: border-color .2s, box-shadow .2s;\n    }\n\n    #ib-main-menu-expanded-header-closeButton-wrapper button div{\n      height: 38px;\n    }\n\n    #ib-main-menu-expanded-header-closeButton-wrapper button div p {\n      margin: 0;\n      line-height: 37px;\n    }\n    #ib-main-menu-expanded-header-closeButton-wrapper button div mat-icon {\n      height: 36px;\n      line-height: 36px;\n    }\n    .upRight-button {\n      min-width: 32px;\n      max-width:32px;\n      min-height: 32px;\n      max-height: 32px;\n      padding: 0px;\n      border-radius: 8px;\n      transition: background-color .2s;\n      line-height: 32px;\n\n      background-color: transparent;\n      border: 0px;\n      margin-top: 5px;\n      padding-top: 5px;\n    }\n    .upRight-button:hover {\n      background: hsla(0,0%,45%,.7)\n    }\n\n    .upRight-button mat-icon{\n      font-size: 24px;\n      min-width: 23px;\n      max-width:23px;\n      min-height: 23px;\n      max-height: 23px;\n      margin: 0px 1px 0px 0px;\n      line-height: 23px;\n    }\n\n    #ib-main-menu-expanded-footer-support-button {\n      width: 166px;\n      height: 32px;\n      line-height: 32px;\n      border-radius: 8px;\n      border-width: 1px;\n      border-style: solid;\n      padding:0px;\n      transition: background-color .2s;\n    }\n\n    #ib-main-menu-expanded-footer-support-button-wrapper {\n      width: 164px;\n      height: 28px;\n    }\n\n    #ib-main-menu-expanded-footer-support-button-wrapper p {\n      font-size: 12px;\n      margin: 0px;\n      height: 28px;\n      font-style: normal;\n      font-weight: 500;\n      line-height: 31px;\n    }\n\n    #ib-main-menu-expanded-footer-support-button-wrapper mat-icon {\n      font-size: 18px;\n      width: 18px;\n      height: 28px;\n      margin: 0px 10px 0px 0px;\n      line-height: 28px;\n    }\n    "
            ],
            "template": "<ng-container>\n  <div\n    routerLink=\"{{ ( element.link === undefined) ? null : element.link }}\"\n    routerLinkActive\n    #rla=\"routerLinkActive\"\n    style=\"display: none;\"\n  >\n  </div>\n\n  <!-- topCenter button ------------->\n  <div\n    *ngIf=\"type === 'topCenter'\"\n    id=\"ib-main-menu-expanded-header-closeButton-wrapper\"\n    fxLayout=\"row\"\n    fxLayoutAlign=\"space-around center\">\n    <button mat-button>\n      <div\n        fxLayout=\"row\"\n        fxLayoutAlign=\"space-evenly center\">\n        <mat-icon class=\"{{element.icon.type?'material-icons-' + element.icon.type + ' ' + element.icon.type : null}}\">\n          {{element.icon.label}}\n        </mat-icon>\n        <p>\n          {{ element.label | translate }}\n        </p>\n      </div>\n    </button>\n  </div>\n\n  <!-- upRight button ------------->\n  <button\n    *ngIf=\"type === 'upRight'\"\n    class=\"{{(rla.isActive && element.link !== undefined)? 'active-header-footer-button upRight-button': 'upRight-button'}}\"\n  >\n    <mat-icon class=\"{{element.icon.type?'material-icons-' + element.icon.type: null}}\">\n      {{element.icon.label}}\n    </mat-icon>\n  </button>\n\n  <!-- bottomLeft button --------->\n  <button\n    *ngIf=\"type === 'bottomLeft'\"\n    id=\"ib-main-menu-expanded-footer-support-button\"\n    class=\"{{(rla.isActive && element.link !== undefined)? 'active-header-footer-button': null}}\"\n  >\n    <div\n      id=\"ib-main-menu-expanded-footer-support-button-wrapper\"\n      fxLayout=\"row\"\n      fxLayoutAlign=\"center center\"\n    >\n      <mat-icon class=\"{{element.icon.type?'material-icons-' + element.icon.type: null}}\">\n        {{element.icon.label}}\n      </mat-icon>\n      <p>\n        {{element.label | translate}}\n      </p>\n    </div>\n  </button>\n\n </ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 162,
                    "type": "IbMainMenuButton",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 161,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IbMainMenuButton } from '../../models/main-menu-button.model'\n\n@Component({\n  selector: 'ib-main-menu-header-footer-buttons',\n  template: `\n  <ng-container>\n    <div\n      routerLink=\"{{ ( element.link === undefined) ? null : element.link }}\"\n      routerLinkActive\n      #rla=\"routerLinkActive\"\n      style=\"display: none;\"\n    >\n    </div>\n\n    <!-- topCenter button ------------->\n    <div\n      *ngIf=\"type === 'topCenter'\"\n      id=\"ib-main-menu-expanded-header-closeButton-wrapper\"\n      fxLayout=\"row\"\n      fxLayoutAlign=\"space-around center\">\n      <button mat-button>\n        <div\n          fxLayout=\"row\"\n          fxLayoutAlign=\"space-evenly center\">\n          <mat-icon class=\"{{element.icon.type?'material-icons-' + element.icon.type + ' ' + element.icon.type : null}}\">\n            {{element.icon.label}}\n          </mat-icon>\n          <p>\n            {{ element.label | translate }}\n          </p>\n        </div>\n      </button>\n    </div>\n\n    <!-- upRight button ------------->\n    <button\n      *ngIf=\"type === 'upRight'\"\n      class=\"{{(rla.isActive && element.link !== undefined)? 'active-header-footer-button upRight-button': 'upRight-button'}}\"\n    >\n      <mat-icon class=\"{{element.icon.type?'material-icons-' + element.icon.type: null}}\">\n        {{element.icon.label}}\n      </mat-icon>\n    </button>\n\n    <!-- bottomLeft button --------->\n    <button\n      *ngIf=\"type === 'bottomLeft'\"\n      id=\"ib-main-menu-expanded-footer-support-button\"\n      class=\"{{(rla.isActive && element.link !== undefined)? 'active-header-footer-button': null}}\"\n    >\n      <div\n        id=\"ib-main-menu-expanded-footer-support-button-wrapper\"\n        fxLayout=\"row\"\n        fxLayoutAlign=\"center center\"\n      >\n        <mat-icon class=\"{{element.icon.type?'material-icons-' + element.icon.type: null}}\">\n          {{element.icon.label}}\n        </mat-icon>\n        <p>\n          {{element.label | translate}}\n        </p>\n      </div>\n    </button>\n\n   </ng-container>\n    `,\n    styles: [`\n\n    #ib-main-menu-expanded-header-closeButton-wrapper {\n      width: 100%;\n      margin: 0 auto;\n    }\n\n    #ib-main-menu-expanded-header-closeButton-wrapper button {\n      min-width: 256px;\n      max-width: 453px;\n      height: 40px;\n      border-radius: 20px;\n      border-width: 1px;\n      border-style: solid;\n      transition: border-color .2s, box-shadow .2s;\n    }\n\n    #ib-main-menu-expanded-header-closeButton-wrapper button div{\n      height: 38px;\n    }\n\n    #ib-main-menu-expanded-header-closeButton-wrapper button div p {\n      margin: 0;\n      line-height: 37px;\n    }\n    #ib-main-menu-expanded-header-closeButton-wrapper button div mat-icon {\n      height: 36px;\n      line-height: 36px;\n    }\n    .upRight-button {\n      min-width: 32px;\n      max-width:32px;\n      min-height: 32px;\n      max-height: 32px;\n      padding: 0px;\n      border-radius: 8px;\n      transition: background-color .2s;\n      line-height: 32px;\n\n      background-color: transparent;\n      border: 0px;\n      margin-top: 5px;\n      padding-top: 5px;\n    }\n    .upRight-button:hover {\n      background: hsla(0,0%,45%,.7)\n    }\n\n    .upRight-button mat-icon{\n      font-size: 24px;\n      min-width: 23px;\n      max-width:23px;\n      min-height: 23px;\n      max-height: 23px;\n      margin: 0px 1px 0px 0px;\n      line-height: 23px;\n    }\n\n    #ib-main-menu-expanded-footer-support-button {\n      width: 166px;\n      height: 32px;\n      line-height: 32px;\n      border-radius: 8px;\n      border-width: 1px;\n      border-style: solid;\n      padding:0px;\n      transition: background-color .2s;\n    }\n\n    #ib-main-menu-expanded-footer-support-button-wrapper {\n      width: 164px;\n      height: 28px;\n    }\n\n    #ib-main-menu-expanded-footer-support-button-wrapper p {\n      font-size: 12px;\n      margin: 0px;\n      height: 28px;\n      font-style: normal;\n      font-weight: 500;\n      line-height: 31px;\n    }\n\n    #ib-main-menu-expanded-footer-support-button-wrapper mat-icon {\n      font-size: 18px;\n      width: 18px;\n      height: 28px;\n      margin: 0px 10px 0px 0px;\n      line-height: 28px;\n    }\n    `]\n})\nexport class IbMainMenuHeaderFooterButtonsComponent {\n  @Input() type: string;\n  @Input() element: IbMainMenuButton;\n\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n\n    #ib-main-menu-expanded-header-closeButton-wrapper {\n      width: 100%;\n      margin: 0 auto;\n    }\n\n    #ib-main-menu-expanded-header-closeButton-wrapper button {\n      min-width: 256px;\n      max-width: 453px;\n      height: 40px;\n      border-radius: 20px;\n      border-width: 1px;\n      border-style: solid;\n      transition: border-color .2s, box-shadow .2s;\n    }\n\n    #ib-main-menu-expanded-header-closeButton-wrapper button div{\n      height: 38px;\n    }\n\n    #ib-main-menu-expanded-header-closeButton-wrapper button div p {\n      margin: 0;\n      line-height: 37px;\n    }\n    #ib-main-menu-expanded-header-closeButton-wrapper button div mat-icon {\n      height: 36px;\n      line-height: 36px;\n    }\n    .upRight-button {\n      min-width: 32px;\n      max-width:32px;\n      min-height: 32px;\n      max-height: 32px;\n      padding: 0px;\n      border-radius: 8px;\n      transition: background-color .2s;\n      line-height: 32px;\n\n      background-color: transparent;\n      border: 0px;\n      margin-top: 5px;\n      padding-top: 5px;\n    }\n    .upRight-button:hover {\n      background: hsla(0,0%,45%,.7)\n    }\n\n    .upRight-button mat-icon{\n      font-size: 24px;\n      min-width: 23px;\n      max-width:23px;\n      min-height: 23px;\n      max-height: 23px;\n      margin: 0px 1px 0px 0px;\n      line-height: 23px;\n    }\n\n    #ib-main-menu-expanded-footer-support-button {\n      width: 166px;\n      height: 32px;\n      line-height: 32px;\n      border-radius: 8px;\n      border-width: 1px;\n      border-style: solid;\n      padding:0px;\n      transition: background-color .2s;\n    }\n\n    #ib-main-menu-expanded-footer-support-button-wrapper {\n      width: 164px;\n      height: 28px;\n    }\n\n    #ib-main-menu-expanded-footer-support-button-wrapper p {\n      font-size: 12px;\n      margin: 0px;\n      height: 28px;\n      font-style: normal;\n      font-weight: 500;\n      line-height: 31px;\n    }\n\n    #ib-main-menu-expanded-footer-support-button-wrapper mat-icon {\n      font-size: 18px;\n      width: 18px;\n      height: 28px;\n      margin: 0px 10px 0px 0px;\n      line-height: 28px;\n    }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 162
            }
        },
        {
            "name": "IbMatAutocompleteComponent",
            "id": "component-IbMatAutocompleteComponent-4e5e68411c9e9bde39a9d4a2ef833804c983788b3b2485a92730fbe1540992b3f0a16a4e7ee8d6c04b5e8204198cdda6af0910e8f5ba8cf875046ffa3675d630",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/autocomplete.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[ib-mat-autocomplete]",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-form-field appearance=\"fill\" style=\"width: 100%;\" [formGroup]=\"data.form\">\n  <mat-label>{{data.base.label | translate}}</mat-label>\n  <input\n    matInput\n    type=\"text\"\n    [formControlName]=\"data.base.key\"\n    #searchBox\n    (keyup)=\"data.base.change(data.self)\"\n    (change)=\"data.base.change(data.self)\"\n    (input)=\"onSearchChange($event.target['value'], data.base.options)\"\n    (focus)=\"onSearchChange($event.target['value'], data.base.options)\"\n    [matAutocomplete]=\"auto\"\n    />\n    <mat-icon\n      style=\"cursor:pointer;color:#666;\"\n      matSuffix\n      (click)=\"data.self.reset(); data.base.change(data.self)\"\n    >{{'clear'}}</mat-icon>\n    <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"data.base.change(data.self)\">\n      <mat-option\n        *ngFor=\"let item of autocompleteFiltered\"\n        [value]=\"item.value\"\n        (click)=\"selectedItem = item\"\n        >\n        {{item.value}}\n      </mat-option>\n    </mat-autocomplete>\n  <mat-error>\n    <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n  </mat-error>\n</mat-form-field>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "IbFormControlData",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "autocompleteFiltered",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "multiSearchAnd",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "selectedItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methodsClass": [
                {
                    "name": "onSearchChange",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "values",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "values",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { IbFormControlInterface, IbFormControlBase, IbFormControlBaseParams,\n  IbFormControlBaseComponent, IbFormControlData } from '../../forms/controls/form-control-base';\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: '[ib-mat-autocomplete]',\n  template: `\n  <mat-form-field appearance=\"fill\" style=\"width: 100%;\" [formGroup]=\"data.form\">\n    <mat-label>{{data.base.label | translate}}</mat-label>\n    <input\n      matInput\n      type=\"text\"\n      [formControlName]=\"data.base.key\"\n      #searchBox\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n      (input)=\"onSearchChange($event.target['value'], data.base.options)\"\n      (focus)=\"onSearchChange($event.target['value'], data.base.options)\"\n      [matAutocomplete]=\"auto\"\n      />\n      <mat-icon\n        style=\"cursor:pointer;color:#666;\"\n        matSuffix\n        (click)=\"data.self.reset(); data.base.change(data.self)\"\n      >{{'clear'}}</mat-icon>\n      <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"data.base.change(data.self)\">\n        <mat-option\n          *ngFor=\"let item of autocompleteFiltered\"\n          [value]=\"item.value\"\n          (click)=\"selectedItem = item\"\n          >\n          {{item.value}}\n        </mat-option>\n      </mat-autocomplete>\n    <mat-error>\n      <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n    </mat-error>\n  </mat-form-field>\n  `\n})\n\nexport class IbMatAutocompleteComponent implements IbFormControlInterface {\n  @Input() data: IbFormControlData;\n  autocompleteFiltered = [];\n  selectedItem: any;\n  multiSearchAnd = (text, searchWords) => (\n    searchWords.every((el) => {\n      return text.match(new RegExp(el, 'i'));\n    })\n  )\n  onSearchChange(input: string, values) {\n    this.autocompleteFiltered = values.filter(el =>\n      this.multiSearchAnd((el.value).toLowerCase(),\n        input.toLowerCase().split('%').filter(e => {\n          return e !== '' && e !== ' ';\n        }))\n    );\n  }\n}\n\n\nexport class IbMatAutocompleteControl extends IbFormControlBase<string> {\n  constructor(options: IbFormControlBaseParams<string>) {\n    super(options);\n    this.control = new IbFormControlBaseComponent(IbMatAutocompleteComponent, {\n      base: this\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "IbFormControlInterface"
            ]
        },
        {
            "name": "IbMatButtonComponent",
            "id": "component-IbMatButtonComponent-ca2cd37a8a1214d4d35bb5ca49b78fb402315d614e0d0d89071bdaaf2dbaface48c1fbbb17f6642293bf4f656d8f95da8c86fbc0ad0e02db033c74f9527a6fce",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/button.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[ib-mat-button]",
            "styleUrls": [],
            "styles": [],
            "template": "<div fxLayout=\"row\" fxLayout=\"space-around center\" style=\"padding-top:5px;padding-bottom:5px;height:45px;\">\n  <button\n    (click)=\"handleActionClick()\"\n    [type]=\"(data.base.key === 'submit') ? 'submit' : 'button'\"\n    [disabled]=\"data.base.disabled || ((data.base.requireValidation) && !data.form.valid)\"\n    mat-raised-button\n    [color]=\"data.base.color\"\n  >{{data.base.label | translate}}</button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "IbMatButtonData",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleActionClick",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { UntypedFormGroup } from '@angular/forms';\nimport { IbFormControlBase, IbFormControlBaseComponent, IbFormControlBaseParams, IbFormControlData, IbFormControlInterface } from '../../forms/controls/form-control-base';\nimport { IbModalMessageService } from '../../modal/modal-message.service';\n\n@Component({\n  selector: '[ib-mat-button]',\n  template: `\n<div fxLayout=\"row\" fxLayout=\"space-around center\" style=\"padding-top:5px;padding-bottom:5px;height:45px;\">\n  <button\n    (click)=\"handleActionClick()\"\n    [type]=\"(data.base.key === 'submit') ? 'submit' : 'button'\"\n    [disabled]=\"data.base.disabled || ((data.base.requireValidation) && !data.form.valid)\"\n    mat-raised-button\n    [color]=\"data.base.color\"\n  >{{data.base.label | translate}}</button>\n</div>\n  `\n})\n\nexport class IbMatButtonComponent implements IbFormControlInterface {\n  @Input() data: IbMatButtonData;\n  constructor(private dialog: IbModalMessageService) {\n\n  }\n  handleActionClick() {\n    if (this.data.base.key === 'submit') {\n      return;\n    }\n\n    if (this.data.base.requireConfirmOnDirty && this.data.form && this.data.form.dirty) {\n      return this.dialog.show( {\n        title: 'shared.ibForms.unsavedTitle',\n        message: 'shared.ibForms.unsavedMessage'\n      }).subscribe(result => {\n        if (result) {\n          this.data.base.handler(this.data.form);\n        }\n      });\n    }\n\n    this.data.base.handler(this.data.form);\n  }\n}\n\n\nexport class IbMatButtonControl extends IbFormControlBase<string> {\n  color;\n  handler;\n  requireValidation;\n  requireConfirmOnDirty;\n  constructor(options: IbMatButtonParams) {\n    if (options.key === 'submit') { options.requireValidation = true; }\n    super(options);\n    this.color = options.color || 'primary';\n    this.handler = options.handler;\n    this.requireValidation = options.requireValidation || false;\n    this.requireConfirmOnDirty = options.requireConfirmOnDirty || false;\n    this.control = new IbFormControlBaseComponent(IbMatButtonComponent, {\n      base: this\n    });\n  }\n\n}\n\nexport interface IbMatButtonParams extends IbFormControlBaseParams<string> {\n  color?: string;\n  requireValidation?: boolean;\n  requireConfirmOnDirty?: boolean;\n  handler?: (form: UntypedFormGroup) => void;\n}\n\n\n\nexport interface IbMatButtonData extends IbFormControlData {\n  base: IbMatButtonParams;\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "IbModalMessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "IbModalMessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "IbFormControlInterface"
            ]
        },
        {
            "name": "IbMatCheckboxComponent",
            "id": "component-IbMatCheckboxComponent-c7d78caaabb34c89a980fdedcd9df1826e3da0fa201ab605afc027e66db4b95f413b1af14b95cf589a674b0292b9479705f4738308731b60a2e2201e919165d2",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/checkbox.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[ib-mat-checkbox]",
            "styleUrls": [],
            "styles": [],
            "template": "  <div style=\"width: 100%;\" [formGroup]=\"data.form\">\n      <mat-checkbox\n        [formControlName]=\"data.base.key\"\n        (change)=\"data.base.change(data.self)\"\n      >{{data.base.label | translate}}{{(data.base.required) ? '*' : ''}}</mat-checkbox>\n    <mat-error>\n      <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n    </mat-error>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "IbFormControlData",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IbFormControlInterface, IbFormControlBase, IbFormControlBaseComponent,\n  IbFormControlBaseParams, IbFormControlData } from '../../forms/controls/form-control-base';\n\n@Component({\n  selector: '[ib-mat-checkbox]',\n  template: `\n  <div style=\"width: 100%;\" [formGroup]=\"data.form\">\n      <mat-checkbox\n        [formControlName]=\"data.base.key\"\n        (change)=\"data.base.change(data.self)\"\n      >{{data.base.label | translate}}{{(data.base.required) ? '*' : ''}}</mat-checkbox>\n    <mat-error>\n      <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n    </mat-error>\n</div>\n  `\n})\n\nexport class IbMatCheckboxComponent implements IbFormControlInterface {\n  @Input() data: IbFormControlData;\n}\n\n\nexport class IbMatCheckboxControl extends IbFormControlBase<boolean | number | string> {\n  constructor(options: IbFormControlBaseParams<boolean | number | string>) {\n    if (!options.value) { options.value = false; }\n    super(options);\n    this.control = new IbFormControlBaseComponent(IbMatCheckboxComponent, {\n      base: this\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "IbFormControlInterface"
            ]
        },
        {
            "name": "IbMatDatepickerComponent",
            "id": "component-IbMatDatepickerComponent-355c58d314f9da53afcd1b44b36c707602424f05fe870e453e75c1e82bc987feae33ed5e4779af54366737ad0c62f926073c6ab3ab344435c3a0beece5e70394",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/datepicker.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[ib-mat-datepicker]",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-form-field appearance=\"fill\" style=\"width: 100%;\" [formGroup]=\"data.form\">\n  <mat-label>{{data.base.label | translate}}</mat-label>\n  <input\n    [formControlName]=\"data.base.key\"\n    matInput\n    [matDatepicker]=\"picker\"\n    (dateInput)=\"data.base.change(data.self)\"\n    (dateChange)=\"data.base.change(data.self)\"\n    (change)=\"data.base.change(data.self)\"\n  >\n  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n  <mat-datepicker #picker></mat-datepicker>\n  <mat-error>\n    <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n  </mat-error>\n</mat-form-field>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "IbFormControlData",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { AbstractControl, ValidatorFn } from '@angular/forms';\nimport { DateAdapter } from '@angular/material/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IbFormControlInterface, IbFormControlBase, IbFormControlBaseComponent,\n  IbFormControlBaseParams, IbFormControlData } from '../../forms/controls/form-control-base';\n\n@Component({\n  selector: '[ib-mat-datepicker]',\n  template: `\n  <mat-form-field appearance=\"fill\" style=\"width: 100%;\" [formGroup]=\"data.form\">\n    <mat-label>{{data.base.label | translate}}</mat-label>\n    <input\n      [formControlName]=\"data.base.key\"\n      matInput\n      [matDatepicker]=\"picker\"\n      (dateInput)=\"data.base.change(data.self)\"\n      (dateChange)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n    >\n    <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n    <mat-datepicker #picker></mat-datepicker>\n    <mat-error>\n      <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n    </mat-error>\n  </mat-form-field>\n  `\n})\n\nexport class IbMatDatepickerComponent implements IbFormControlInterface {\n  @Input() data: IbFormControlData;\n  constructor(\n    private adapter: DateAdapter<any>,\n    private translate: TranslateService\n  ) {\n    this.adapter.setLocale(this.translate.currentLang);\n    this.translate.onTranslationChange.subscribe(ev => {\n      this.adapter.setLocale(ev.lang);\n    });\n  }\n}\n\n\nexport class IbMatDatepickerControl extends IbFormControlBase<string | Date> {\n  constructor(options: IbFormControlBaseParams<string | Date>) {\n    if (options.value && typeof options.value === 'string') {\n      options.value = new Date(options.value);\n    }\n    if (!options.value) {\n      options.value = null;\n    }\n    if (options.required) {\n      options.validators = options.validators || [];\n      options.validators.push(dateRequiredValidator());\n    }\n    super(options);\n    this.control = new IbFormControlBaseComponent(IbMatDatepickerComponent, {\n      base: this\n    });\n  }\n}\n\nexport function dateRequiredValidator(): ValidatorFn {\n  return (control: AbstractControl): {[key: string]: any} | null => {\n    if (!control.value || isNaN(control.value.getTime())) {\n      return {\n        required: true\n      };\n    }\n  };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "adapter",
                        "type": "DateAdapter<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "adapter",
                        "type": "DateAdapter<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "IbFormControlInterface"
            ]
        },
        {
            "name": "IbMatDropdownComponent",
            "id": "component-IbMatDropdownComponent-e813c2e7331c0e5fe2fe0af27c33b5dc455c41412c2511d5540ba066e898d8f33274d753dfc39cba954ea819e442370c13faad765402d4407f2644d9cbe4b6e1",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/dropdown.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[ib-mat-dropdown]",
            "styleUrls": [],
            "styles": [
                "\n      .ib-mat-dropdown-select-all ::ng-deep mat-pseudo-checkbox {\n        display: none;\n      }\n\n      /* TODO(mdc-migration): The following rule targets internal classes of option that may no longer apply for the MDC version. */\n      .ib-mat-dropdown-select-all ::ng-deep .mat-option-text {\n        color: rgba(0, 0, 0, 0.87) !important;\n        cursor: pointer !important;\n      }\n  "
            ],
            "template": "    <mat-form-field appearance=\"fill\" style=\"width: 100%;\"  [formGroup]=\"data.form\">\n      <mat-label>{{data.base.label | translate}}</mat-label>\n      <mat-select\n        [formControlName]=\"data.base.key\"\n        [multiple]=\"data.base.multiple\"\n        (selectionChange)=\"handleSelection($event)\"\n      >\n        <mat-option\n          *ngIf=\"data.base.multiple\"\n          class=\"ib-mat-dropdown-select-all\"\n          disabled\n          (click)=\"selectAll()\"\n        >{{ (this.all ? 'shared.ibDropdown.selectNone' : 'shared.ibDropdown.selectAll') | translate}}</mat-option>\n        <mat-option *ngIf=\"data.base.emptyRow\" [value]=\"data.base.emptyRow.key\">\n          {{data.base.emptyRow.value | translate}}\n        </mat-option>\n        <mat-option *ngFor=\"let opt of data.base.options\" [value]=\"opt.key\">\n          {{opt.value | translate}}\n        </mat-option>\n      </mat-select>\n      <mat-icon\n        matSuffix\n        *ngIf=\"hintMessage\"\n        [matTooltip]=\"hintMessage | translate\"\n      >\n          help_outline\n      </mat-icon>\n      <mat-error>\n        <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n      </mat-error>\n    </mat-form-field>\n\n\n    <!-- TODO: example style with inline search\nhttps://stackblitz.com/edit/angular-ev8r2t?file=src%2Fapp%2Fselect-multiple-example.html\n      <mat-option class=\"select-all\">\n        <input type=\"text\" matInput (click)=\"$event.stopPropagation()\"/>\n      </mat-option>\n      <mat-option class=\"select-all\" (click)=\"selectAll()\">{{ this.all ? 'none' : 'all'}}</mat-option>\n      <div style=\"overflow:auto;height:160px;\">\n      <mat-option *ngFor=\"let t of toppingList\" [value]=\"t.key\">{{t.value}}</mat-option>\n      </div>\n-->\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "IbDropdownData",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "all",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "methodsClass": [
                {
                    "name": "handleSelection",
                    "args": [
                        {
                            "name": "who",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "who",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IbFormControlInterface, IbFormControlBase, IbFormControlBaseComponent, IbFormControlBaseParams, IbFormControlData } from '../../forms/controls/form-control-base';\n\n@Component({\n  selector: '[ib-mat-dropdown]',\n  template: `\n    <mat-form-field appearance=\"fill\" style=\"width: 100%;\"  [formGroup]=\"data.form\">\n      <mat-label>{{data.base.label | translate}}</mat-label>\n      <mat-select\n        [formControlName]=\"data.base.key\"\n        [multiple]=\"data.base.multiple\"\n        (selectionChange)=\"handleSelection($event)\"\n      >\n        <mat-option\n          *ngIf=\"data.base.multiple\"\n          class=\"ib-mat-dropdown-select-all\"\n          disabled\n          (click)=\"selectAll()\"\n        >{{ (this.all ? 'shared.ibDropdown.selectNone' : 'shared.ibDropdown.selectAll') | translate}}</mat-option>\n        <mat-option *ngIf=\"data.base.emptyRow\" [value]=\"data.base.emptyRow.key\">\n          {{data.base.emptyRow.value | translate}}\n        </mat-option>\n        <mat-option *ngFor=\"let opt of data.base.options\" [value]=\"opt.key\">\n          {{opt.value | translate}}\n        </mat-option>\n      </mat-select>\n      <mat-icon\n        matSuffix\n        *ngIf=\"hintMessage\"\n        [matTooltip]=\"hintMessage | translate\"\n      >\n          help_outline\n      </mat-icon>\n      <mat-error>\n        <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n      </mat-error>\n    </mat-form-field>\n\n\n    <!-- TODO: example style with inline search\nhttps://stackblitz.com/edit/angular-ev8r2t?file=src%2Fapp%2Fselect-multiple-example.html\n      <mat-option class=\"select-all\">\n        <input type=\"text\" matInput (click)=\"$event.stopPropagation()\"/>\n      </mat-option>\n      <mat-option class=\"select-all\" (click)=\"selectAll()\">{{ this.all ? 'none' : 'all'}}</mat-option>\n      <div style=\"overflow:auto;height:160px;\">\n      <mat-option *ngFor=\"let t of toppingList\" [value]=\"t.key\">{{t.value}}</mat-option>\n      </div>\n-->\n  `,\n  styles: [`\n      .ib-mat-dropdown-select-all ::ng-deep mat-pseudo-checkbox {\n        display: none;\n      }\n\n      /* TODO(mdc-migration): The following rule targets internal classes of option that may no longer apply for the MDC version. */\n      .ib-mat-dropdown-select-all ::ng-deep .mat-option-text {\n        color: rgba(0, 0, 0, 0.87) !important;\n        cursor: pointer !important;\n      }\n  `]\n})\n\nexport class IbMatDropdownComponent implements IbFormControlInterface {\n  @Input() data: IbDropdownData;\n  all = false;\n  get hintMessage() {\n    return (this.data.base.hintMessage) ? this.data.base.hintMessage() : null;\n  }\n\n  selectAll() {\n    let newValues: any = [];\n    this.all = !this.all;\n    if (this.all) {\n      newValues = this.data.base.options.map(t => t.key);\n    }\n    this.data.self.setValue(newValues);\n    this.data.base.change(this.data.self);\n  }\n\n\n\n  handleSelection(who) {\n    if (this.data.base.multiple) {\n      //if (who.value.length > 0 && who.value[0] === undefined) { return; }\n      const currentValue = this.data.self.value;\n      this.all = currentValue && currentValue.length === this.data.base.options.length;\n    }\n\n    this.data.base.change(this.data.self);\n  }\n\n}\n\n\nexport class IbMatDropdownControl extends IbFormControlBase<string | string[] | number | number[]> {\n  multiple = false;\n  emptyRow = null;\n  hintMessage;\n  constructor(options: IbMatDropdownParams) {\n    super(options);\n    this.multiple = options.multiple || false;\n    this.emptyRow = options.emptyRow || null;\n    this.hintMessage = options.hintMessage || null;\n    this.control = new IbFormControlBaseComponent(IbMatDropdownComponent, {\n      base: this\n    });\n  }\n}\n\n\n\nexport interface IbMatDropdownParams extends IbFormControlBaseParams<string | string[] | number | number[]> {\n  multiple?: boolean;\n  emptyRow?: {key?: string | number, value: string};\n  hintMessage?: () => string;\n}\n\n\nexport interface IbDropdownData extends IbFormControlData {\n  base: IbMatDropdownParams;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .ib-mat-dropdown-select-all ::ng-deep mat-pseudo-checkbox {\n        display: none;\n      }\n\n      /* TODO(mdc-migration): The following rule targets internal classes of option that may no longer apply for the MDC version. */\n      .ib-mat-dropdown-select-all ::ng-deep .mat-option-text {\n        color: rgba(0, 0, 0, 0.87) !important;\n        cursor: pointer !important;\n      }\n  \n",
            "implements": [
                "IbFormControlInterface"
            ],
            "accessors": {
                "hintMessage": {
                    "name": "hintMessage",
                    "getSignature": {
                        "name": "hintMessage",
                        "type": "",
                        "returnType": "",
                        "line": 67
                    }
                }
            }
        },
        {
            "name": "IbMaterialBreadcrumbComponent",
            "id": "component-IbMaterialBreadcrumbComponent-3e32227e43045daeef8c39c3a356d9fc436dde7c7335ae5ec5cc216e81d28d000c311e59b19502800b9555de34d8bbc30064d68c59dd228cc3973e8c65ff5c69",
            "file": "src/app/inobeta-ui/ui/breadcrumb/material-breadcrumb/material-breadcrumb.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-material-breadcrumb",
            "styleUrls": [
                "./material-breadcrumb.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./material-breadcrumb.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "home",
                    "defaultValue": "{url: '/', icon: 'home'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nModifica l'icona o label per il primo elemento.\n",
                    "description": "<p>Modifica l&#39;icona o label per il primo elemento.</p>\n",
                    "line": 25,
                    "type": "IbBreadcrumbItem",
                    "decorators": [],
                    "inheritance": {
                        "file": "IbBreadcrumbComponent"
                    }
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "IbBreadcrumbItem[]",
                    "decorators": [],
                    "inheritance": {
                        "file": "IbBreadcrumbComponent"
                    }
                },
                {
                    "name": "mode",
                    "defaultValue": "IbBreadcrumbMode.auto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nModalità per il render delle breadcrumbs.\nDi default, il percorso viene calcolato dalle routes. Per inserire le singole \"briciole\" usare la modalità `static`\n",
                    "description": "<p>Modalità per il render delle breadcrumbs.\nDi default, il percorso viene calcolato dalle routes. Per inserire le singole &quot;briciole&quot; usare la modalità <code>static</code></p>\n",
                    "line": 31,
                    "type": "IbBreadcrumbMode",
                    "decorators": [],
                    "inheritance": {
                        "file": "IbBreadcrumbComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ROUTE_DATA_BREADCRUMB",
                    "defaultValue": "'breadcrumb'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        124,
                        144
                    ],
                    "inheritance": {
                        "file": "IbBreadcrumbComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "createBreadcrumbs",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRoute",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        },
                        {
                            "name": "breadcrumbs",
                            "type": "IbBreadcrumbItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRoute",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "breadcrumbs",
                            "type": "IbBreadcrumbItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "IbBreadcrumbComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "IbBreadcrumbComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { IbBreadcrumbComponent } from '../breadcrumb.component';\n\n@Component({\n  selector: 'ib-material-breadcrumb',\n  templateUrl: './material-breadcrumb.component.html',\n  styleUrls: ['./material-breadcrumb.component.css']\n})\nexport class IbMaterialBreadcrumbComponent extends IbBreadcrumbComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".ibBreadcrumbs {\n  background: #f9f9f9;\n  box-shadow: 0 0 0 1px #f0f0f0;\n  \n  margin: 10px;\n  padding: 5px 10px;\n  border-radius: 4px;\n\n  list-style: none;\n  display: flex;\n  align-items: center;\n  align-content: center;\n\n  font-family: Roboto, sans-serif;\n}\n\n.ibBreadcrumbs-link {\n  display: flex;\n  align-items: center;\n}\n\n.ibBreadcrumbs-link a:not(:first-child) {\n  color: black;\n  outline: none;\n  text-decoration: none;\n  margin-left: 5px;\n}\n\n.ibBreadcrumbs-link a:visited {\n  color: black;\n}\n\n.ibBreadcrumbs-link > mat-icon {\n  color: #bbb;\n  margin-left: 5px;\n}",
                    "styleUrl": "./material-breadcrumb.component.css"
                }
            ],
            "stylesData": "",
            "extends": "IbBreadcrumbComponent",
            "templateData": "<ul class=\"ibBreadcrumbs\">\n  <li class=\"ibBreadcrumbs-link\">\n    <ng-container *ngIf=\"!home.icon; else iconTemplate\">\n      <a [routerLink]=\"[home.url]\">{{home.label | translate}}</a>\n    </ng-container>\n    <ng-template #iconTemplate>\n      <a mat-icon-button aria-label=\"Homepage\" [routerLink]=\"[home.url]\"><mat-icon>{{home.icon}}</mat-icon></a>\n    </ng-template>\n  </li>\n  <li *ngFor=\"let item of items\" class=\"ibBreadcrumbs-link\">\n    <mat-icon>chevron_right</mat-icon>\n    <a [routerLink]=\"[item.url]\">{{item.label | translate}}</a>\n  </li>\n</ul>"
        },
        {
            "name": "IbMaterialFormComponent",
            "id": "component-IbMaterialFormComponent-92b2530ea3475aa756248cff35ef5d51766ffe489fd290ffe8556135486486892d90b60640d27066c878d8253dd3ff3a4f73d70b48e93319d7b5487c3b810914",
            "file": "src/app/inobeta-ui/ui/material-forms/material-form/material-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-material-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./material-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actionsPosition",
                    "defaultValue": "IbMatActionsPosition.BOTTOM",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "IbMatActionsPosition",
                    "decorators": []
                },
                {
                    "name": "rowHeight",
                    "defaultValue": "'80px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "actions",
                    "defaultValue": "[\n    { key: 'submit', label: 'Save' }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "IbFormAction[]",
                    "decorators": [],
                    "inheritance": {
                        "file": "IbDynamicFormComponent"
                    }
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "number",
                    "decorators": [],
                    "inheritance": {
                        "file": "IbDynamicFormComponent"
                    }
                },
                {
                    "name": "disabledOnInit",
                    "defaultValue": "false",
                    "deprecated": true,
                    "deprecationMessage": "this input will be removed in a future release.\nUtilizzare una subscription ad `afterInit()` per eseguire codice immediatamente dopo aver\ninizializzato il `FormGroup` (come `form.disable()`)",
                    "jsdoctags": [
                        {
                            "pos": 928,
                            "end": 1149,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 929,
                                "end": 939,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>this input will be removed in a future release.\nUtilizzare una subscription ad <code>afterInit()</code> per eseguire codice immediatamente dopo aver\ninizializzato il <code>FormGroup</code> (come <code>form.disable()</code>)</p>\n"
                        }
                    ],
                    "line": 36,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "IbDynamicFormComponent"
                    }
                },
                {
                    "name": "fields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "IbFormControlBase<string>[]",
                    "decorators": [],
                    "inheritance": {
                        "file": "IbDynamicFormComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "ibSubmit",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "IbDynamicFormComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "ibMatActionsPosition",
                    "defaultValue": "IbMatActionsPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "simpleActions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "submitAction",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UntypedFormGroup",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "IbDynamicFormComponent"
                    }
                },
                {
                    "name": "onChangesSubject",
                    "defaultValue": "new Subject<IbFormOnChanges>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        121,
                        144
                    ],
                    "inheritance": {
                        "file": "IbDynamicFormComponent"
                    }
                },
                {
                    "name": "onInitSubject",
                    "defaultValue": "new Subject<UntypedFormGroup>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        121,
                        144
                    ],
                    "inheritance": {
                        "file": "IbDynamicFormComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "IbDynamicFormComponent"
                    }
                },
                {
                    "name": "afterChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IbFormOnChanges>",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "IbDynamicFormComponent"
                    }
                },
                {
                    "name": "afterInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UntypedFormGroup>",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "IbDynamicFormComponent"
                    }
                },
                {
                    "name": "handleActionClick",
                    "args": [
                        {
                            "name": "source",
                            "type": "IbFormAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "IbFormAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "IbDynamicFormComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "IbDynamicFormComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "IbDynamicFormComponent"
                    }
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "IbDynamicFormComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges } from '@angular/core';\nimport { IbDynamicFormComponent } from '../../forms/dynamic-form/dynamic-form.component';\nimport { IbFormControlService } from '../../forms/form-control.service';\n\n/**\n * Crea un form dinamico usando componenti di Angular Material.\n *\n * @example\n * <ib-material-form\n *             [fields]=\"loginFormFields\"\n *             (ibSubmit)=\"onSubmit($event)\"></ib-material-form>\n */\n\nexport enum IbMatActionsPosition {\n  BOTH, TOP, BOTTOM\n}\n\n@Component({\n  selector: 'ib-material-form',\n  templateUrl: './material-form.component.html',\n})\nexport class IbMaterialFormComponent extends IbDynamicFormComponent implements OnChanges {\n  @Input() actionsPosition = IbMatActionsPosition.BOTTOM;\n  @Input() rowHeight = '80px';\n  simpleActions = [];\n  submitAction = null;\n  ibMatActionsPosition = IbMatActionsPosition;\n\n  constructor(private csIn: IbFormControlService) {\n    super(csIn);\n  }\n  ngOnChanges(changes) {\n    super.ngOnChanges(changes);\n    if (changes.actions) {\n      this.simpleActions = changes.actions.currentValue.filter(a => a.key !== 'submit');\n      this.submitAction = changes.actions.currentValue.find(a => a.key === 'submit');\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "csIn",
                        "type": "IbFormControlService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "csIn",
                        "type": "IbFormControlService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "IbDynamicFormComponent",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\" class=\"ibForm\">\n  <div\n    class=\"ibFormRow ibFormActions\"\n    fxLayout=\"row\"\n    fxLayoutAlign=\"end\"\n    fxLayoutGap=\"20px\"\n    *ngIf=\"[ibMatActionsPosition.BOTH, ibMatActionsPosition.TOP].indexOf(actionsPosition) > -1\"\n    >\n    <ib-material-form-control\n      *ngFor=\"let action of simpleActions\"\n      class=\"ibFormRow\"\n      [base]=\"action\"\n      [form]=\"form\"\n    ></ib-material-form-control>\n    <ib-material-form-control\n      *ngIf=\"submitAction\"\n      class=\"ibFormRow\"\n      [base]=\"submitAction\"\n      [form]=\"form\"\n    ></ib-material-form-control>\n  </div>\n\n  <mat-grid-list class=\"ib-material-form-grid\" *ngIf=\"cols\" [cols]=\"cols\" [rowHeight]=\"rowHeight\">\n    <mat-grid-tile\n        *ngFor=\"let field of fields\"\n        [colspan]=\"field.cols\"\n        [rowspan]=\"field.rows\">\n          <ib-material-form-control\n          class=\"ibFormRow\"\n          [base]=\"field\"\n          [form]=\"form\"\n          [fxFlex]=\"field.width\"\n        ></ib-material-form-control>\n    </mat-grid-tile>\n  </mat-grid-list>\n\n  <div fxLayout=\"row wrap\"  *ngIf=\"!cols\">\n    <ib-material-form-control\n      *ngFor=\"let field of fields\"\n      class=\"ibFormRow\"\n      [base]=\"field\"\n      [form]=\"form\"\n      [fxFlex]=\"field.width\"\n    ></ib-material-form-control>\n  </div>\n\n  <div\n    class=\"ibFormRow ibFormActions\"\n    fxLayout=\"row\"\n    fxLayoutAlign=\"end\"\n    fxLayoutGap=\"20px\"\n    *ngIf=\"[ibMatActionsPosition.BOTH, ibMatActionsPosition.BOTTOM].indexOf(actionsPosition) > -1\"\n    >\n    <ib-material-form-control\n      *ngFor=\"let action of simpleActions\"\n      class=\"ibFormRow\"\n      [base]=\"action\"\n      [form]=\"form\"\n    ></ib-material-form-control>\n    <ib-material-form-control\n      *ngIf=\"submitAction\"\n      class=\"ibFormRow\"\n      [base]=\"submitAction\"\n      [form]=\"form\"\n    ></ib-material-form-control>\n  </div>\n</form>\n"
        },
        {
            "name": "IbMaterialFormControlComponent",
            "id": "component-IbMaterialFormControlComponent-7804531942de44f0e4f8ec0c8bff1feaaa4e7e1f112126a3edab593dd54b3561cb8e7779bbd075bcf394139d89abc3d829c2b8b2dd55f5f8f002cbccef5c276f",
            "file": "src/app/inobeta-ui/ui/material-forms/material-form-control/material-form-control.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-material-form-control",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./material-form-control.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "base",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "IbFormControlBase<any>",
                    "decorators": [],
                    "inheritance": {
                        "file": "IbDynamicFormControlComponent"
                    }
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "UntypedFormGroup",
                    "decorators": [],
                    "inheritance": {
                        "file": "IbDynamicFormControlComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "formControlErrors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formControlErrors', {static: true}"
                        }
                    ]
                },
                {
                    "name": "formControlHost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlDirective",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "IbFormControlDirective, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "loadComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "IbDynamicFormControlComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Directive, ViewContainerRef, ViewChild, ComponentFactoryResolver, TemplateRef, OnChanges, SimpleChanges } from '@angular/core';\nimport { IbDynamicFormControlComponent } from '../../forms/dynamic-form-control/dynamic-form-control.component';\nimport { IbFormControlInterface } from '../../forms/controls/form-control-base';\n\n\n@Directive({\n  selector: '[formControlHost]',\n})\nexport class IbFormControlDirective {\n  constructor(public viewContainerRef: ViewContainerRef) { }\n}\n\n\n@Component({\n  selector: 'ib-material-form-control',\n  templateUrl: './material-form-control.component.html',\n})\nexport class IbMaterialFormControlComponent extends IbDynamicFormControlComponent implements OnInit, OnChanges {\n  @ViewChild(IbFormControlDirective, {static: true}) formControlHost: IbFormControlDirective;\n  @ViewChild('formControlErrors', {static: true}) formControlErrors: TemplateRef<any>;\n\n  componentRef;\n  constructor(private componentFactoryResolver: ComponentFactoryResolver) {\n    super();\n  }\n  ngOnChanges(changes: SimpleChanges): void {\n    const form = changes['form'];\n    if (form && !form.isFirstChange()) {\n      this.componentRef.instance.data = {\n        ...this.componentRef.instance.data,\n        form: form.currentValue\n      };\n    }\n  }\n  ngOnInit(): void {\n    this.loadComponent();\n  }\n\n  loadComponent() {\n    if (!this.base.control) { return; }\n\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.base.control.component);\n\n    const viewContainerRef = this.formControlHost.viewContainerRef;\n\n    viewContainerRef.clear();\n\n    this.componentRef = viewContainerRef.createComponent<IbFormControlInterface>(componentFactory);\n    this.componentRef.instance.data = {\n      ...this.base.control.data,\n      form: this.form,\n      self: this.self,\n      hasError: this.hasError,\n      formControlErrors: this.formControlErrors\n    };\n  }\n\n}\n\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "IbDynamicFormControlComponent",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<ng-template formControlHost></ng-template>\n<ng-template #formControlErrors>\n  <mat-error *ngIf=\"hasError('minlength')\">\n    {{base.label | translate}} {{ 'shared.ibForms.errors.minlength' | translate:{v:self.errors.minlength.requiredLength} }}\n  </mat-error>\n  <mat-error *ngIf=\"hasError('maxlength')\">\n    {{base.label | translate}} {{ 'shared.ibForms.errors.maxlength' | translate:{v:self.errors.maxlength.requiredLength} }}\n  </mat-error>\n  <mat-error *ngIf=\"hasError('required')\">\n    {{base.label | translate}} {{ 'shared.ibForms.errors.required' | translate }}\n  </mat-error>\n  <mat-error *ngIf=\"hasError('min')\">\n    {{base.label | translate}} {{ 'shared.ibForms.errors.min' | translate:{v:self.errors.min.min} }}\n  </mat-error>\n  <mat-error *ngIf=\"hasError('max')\">\n    {{base.label | translate}} {{ 'shared.ibForms.errors.max' | translate:{v:self.errors.max.max} }}\n  </mat-error>\n  <mat-error *ngIf=\"hasError('email')\">\n    {{ 'shared.ibForms.errors.email' | translate }}\n  </mat-error>\n  <mat-error *ngIf=\"hasError('matDatepickerParse')\">\n    {{ 'shared.ibForms.errors.date' | translate:{v:self.errors.matDatepickerParse.matDatepickerParse} }}\n  </mat-error>\n  <mat-error *ngIf=\"hasError('customError')\">\n    {{ self.errors.customError.message | translate:self.errors.customError.params }}\n  </mat-error>\n</ng-template>\n"
        },
        {
            "name": "IbMatLabelComponent",
            "id": "component-IbMatLabelComponent-72035a4723a9417a493cca622b0bc3e984756a2fa855541e97f658ad53d0567769772e34b1cb13b342786741b5e7fac587bb44c83ac00ab9fdda94665b53d91c",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/label.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[ib-mat-label]",
            "styleUrls": [],
            "styles": [],
            "template": "    <div fxFlex style=\"width:100%;height:50px;;\"  fxLayout=\"row\" fxFlexAlign=\"center\" >\n      <div\n        *ngIf=\"data.base.label\"\n        style=\"padding-right:10px;\"\n        fxLayout=\"row\"\n        fxFlexAlign=\"center\"\n        fxFlex=\"40%\"\n      >{{data.base.label | translate}}: </div>\n      <div\n        *ngIf=\"data.base.value\"\n        style=\"font-weight:bold;\"\n        fxLayout=\"row\"\n        fxFlexAlign=\"center\"\n        fxFlex=\"60%\"\n      >{{ data.base.value }}</div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "IbFormControlData",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IbFormControlInterface, IbFormControlBase, IbFormControlBaseComponent, IbFormControlBaseParams, IbFormControlData } from '../../forms/controls/form-control-base';\n\n@Component({\n  selector: '[ib-mat-label]',\n  template: `\n    <div fxFlex style=\"width:100%;height:50px;;\"  fxLayout=\"row\" fxFlexAlign=\"center\" >\n      <div\n        *ngIf=\"data.base.label\"\n        style=\"padding-right:10px;\"\n        fxLayout=\"row\"\n        fxFlexAlign=\"center\"\n        fxFlex=\"40%\"\n      >{{data.base.label | translate}}: </div>\n      <div\n        *ngIf=\"data.base.value\"\n        style=\"font-weight:bold;\"\n        fxLayout=\"row\"\n        fxFlexAlign=\"center\"\n        fxFlex=\"60%\"\n      >{{ data.base.value }}</div>\n</div>\n  `\n})\n\nexport class IbMatLabelComponent implements IbFormControlInterface {\n  @Input() data: IbFormControlData;\n}\n\n\nexport class IbMatLabelControl extends IbFormControlBase<string>{\n  constructor(options: IbFormControlBaseParams<string>){\n    super(options)\n    this.control = new IbFormControlBaseComponent(IbMatLabelComponent, {\n      base: this\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "IbFormControlInterface"
            ]
        },
        {
            "name": "IbMatPaddingComponent",
            "id": "component-IbMatPaddingComponent-6db82b75ce704e82e78a39b45d0d0c7fbcb4c3afa83cabaab8d61cc5845acce28c13a9831e2e51694e686644e338c3349fb9582f414613b6be055aa56943e81c",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/padding.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[ib-mat-padding]",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "IbFormControlData",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IbFormControlBase, IbFormControlBaseComponent, IbFormControlBaseParams, IbFormControlData, IbFormControlInterface } from '../../forms/controls/form-control-base';\n@Component({\n  selector: '[ib-mat-padding]',\n  template: ``\n})\nexport class IbMatPaddingComponent implements IbFormControlInterface {\n  @Input() data: IbFormControlData;\n}\n\nexport class IbMatPaddingControl extends IbFormControlBase<string>{\n  constructor(options: IbFormControlBaseParams<string>){\n    super(options)\n    this.control = new IbFormControlBaseComponent(IbMatPaddingComponent, {\n      base: this\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "IbFormControlInterface"
            ]
        },
        {
            "name": "IbMatRadioComponent",
            "id": "component-IbMatRadioComponent-14f504b1674b1b031eab5e492d01aecab79e4216c655cc9ee341b2f8f35304348c51f21333eec1ef59fa4a3cb162147f10d84e9567510989d65a9b1cca0e71b4",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/radio.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[ib-mat-radio]",
            "styleUrls": [],
            "styles": [],
            "template": "  <div style=\"width: 100%;\" [formGroup]=\"data.form\">\n    <mat-label [attr.for]=\"data.base.key\" style=\"display: block\">{{data.base.label | translate}} {{(data.base.required) ? '*' : ''}}</mat-label>\n        <mat-radio-group\n        [formControlName]=\"data.base.key\"\n        (change)=\"data.base.change(data.self)\"\n        >\n          <mat-radio-button style=\"margin: 5px\" *ngFor=\"let opt of data.base.options\" [value]=\"opt.key\">\n            {{opt.value | translate}}\n          </mat-radio-button>\n        </mat-radio-group>\n    <mat-error>\n      <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n    </mat-error>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "IbFormControlData",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IbFormControlInterface, IbFormControlBase, IbFormControlBaseComponent, IbFormControlBaseParams, IbFormControlData } from '../../forms/controls/form-control-base';\n\n@Component({\n  selector: '[ib-mat-radio]',\n  template: `\n  <div style=\"width: 100%;\" [formGroup]=\"data.form\">\n    <mat-label [attr.for]=\"data.base.key\" style=\"display: block\">{{data.base.label | translate}} {{(data.base.required) ? '*' : ''}}</mat-label>\n        <mat-radio-group\n        [formControlName]=\"data.base.key\"\n        (change)=\"data.base.change(data.self)\"\n        >\n          <mat-radio-button style=\"margin: 5px\" *ngFor=\"let opt of data.base.options\" [value]=\"opt.key\">\n            {{opt.value | translate}}\n          </mat-radio-button>\n        </mat-radio-group>\n    <mat-error>\n      <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n    </mat-error>\n</div>\n  `\n})\n\nexport class IbMatRadioComponent implements IbFormControlInterface {\n  @Input() data: IbFormControlData;\n}\n\n\nexport class IbMatRadioControl extends IbFormControlBase<string>{\n  constructor(options: IbFormControlBaseParams<string>){\n    super(options);\n    this.control = new IbFormControlBaseComponent(IbMatRadioComponent, {\n      base: this\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "IbFormControlInterface"
            ]
        },
        {
            "name": "IbMatSlideToggleComponent",
            "id": "component-IbMatSlideToggleComponent-c55eb1d4bd116ecc2658a0686171193a0d7c1f415447a9b7743ad2b30fbec9dae4435d2e7ea5b76d19de86f408eaa1d50850edd390c60264d23ae7b202ee4e88",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/slide-toggle.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[ib-mat-slide-toggle]",
            "styleUrls": [],
            "styles": [],
            "template": "<div style=\"width: 100%;\" [formGroup]=\"data.form\">\n    <mat-slide-toggle\n        [formControlName]=\"data.base.key\"\n        (change)=\"data.base.change(data.self)\"\n    >\n        {{data.base.label | translate}}{{(data.base.required) ? '*' : ''}}\n    </mat-slide-toggle>\n    <mat-error>\n        <ng-container\n            *ngTemplateOutlet=\"data.formControlErrors;context: this\">\n        </ng-container>\n    </mat-error>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "IbFormControlData",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IbFormControlBase, IbFormControlBaseComponent,\n  IbFormControlBaseParams, IbFormControlData, IbFormControlInterface } from '../../forms/controls/form-control-base';\n\n@Component({\n  selector: '[ib-mat-slide-toggle]',\n  template: `\n    <div style=\"width: 100%;\" [formGroup]=\"data.form\">\n        <mat-slide-toggle\n            [formControlName]=\"data.base.key\"\n            (change)=\"data.base.change(data.self)\"\n        >\n            {{data.base.label | translate}}{{(data.base.required) ? '*' : ''}}\n        </mat-slide-toggle>\n        <mat-error>\n            <ng-container\n                *ngTemplateOutlet=\"data.formControlErrors;context: this\">\n            </ng-container>\n        </mat-error>\n    </div>\n  `\n})\n\nexport class IbMatSlideToggleComponent implements IbFormControlInterface {\n  @Input() data: IbFormControlData;\n}\n\n\nexport class IbMatSlideToggleControl extends IbFormControlBase<boolean | number | string> {\n  constructor(options: IbFormControlBaseParams<boolean | number | string>) {\n    if (!options.value) {\n        options.value = false;\n    }\n    super(options);\n    this.control = new IbFormControlBaseComponent(IbMatSlideToggleComponent, {\n      base: this\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "IbFormControlInterface"
            ]
        },
        {
            "name": "IbMatTextareaComponent",
            "id": "component-IbMatTextareaComponent-4073182fd9f72646cc841615210871243d54b24e09e061dc9760fd7f294c1095fc94903a5595ed4757b4f990a4ea3530caaf32167c9ee74e9bf5584bc9935245",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/textarea.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[ib-mat-textarea]",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-form-field appearance=\"fill\" style=\"width: 100%;\" [formGroup]=\"data.form\">\n  <mat-label>{{data.base.label | translate}}</mat-label>\n  <textarea\n    matInput\n    [formControlName]=\"data.base.key\"\n    [id]=\"data.base.key\"\n    [type]=\"data.base.type\"\n    (keyup)=\"data.base.change(data.self)\"\n    (change)=\"data.base.change(data.self)\"\n    [style.height]=\"data.base.height\"\n  ></textarea>\n  <mat-error>\n    <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n  </mat-error>\n</mat-form-field>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "IbMatTextareaData",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IbFormControlBase, IbFormControlBaseComponent, IbFormControlBaseParams, IbFormControlData, IbFormControlInterface } from '../../forms/controls/form-control-base';\n\n@Component({\n  selector: '[ib-mat-textarea]',\n  template: `\n  <mat-form-field appearance=\"fill\" style=\"width: 100%;\" [formGroup]=\"data.form\">\n    <mat-label>{{data.base.label | translate}}</mat-label>\n    <textarea\n      matInput\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      [type]=\"data.base.type\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n      [style.height]=\"data.base.height\"\n    ></textarea>\n    <mat-error>\n      <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n    </mat-error>\n  </mat-form-field>\n  `\n})\n\nexport class IbMatTextareaComponent implements IbFormControlInterface {\n  @Input() data: IbMatTextareaData;\n}\n\n\nexport class IbMatTextareaControl extends IbFormControlBase<string>{\n  height = 'auto'\n  constructor(options: IbMatTextareaParams){\n    super(options)\n    this.height = options.height || 'auto';\n    this.control = new IbFormControlBaseComponent(IbMatTextareaComponent, {\n      base: this\n    })\n  }\n}\n\n\nexport interface IbMatTextareaParams extends IbFormControlBaseParams<string>{\n  height?: string;\n}\n\n\nexport interface IbMatTextareaData extends IbFormControlData {\n  base: IbMatTextareaParams;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "IbFormControlInterface"
            ]
        },
        {
            "name": "IbMatTextboxComponent",
            "id": "component-IbMatTextboxComponent-bbb6112b823fe6aceab6ad1265e0566b1876d343e0b60779e9ba303d71c37411c8ea4d9454cb189009514e2775815ad3ed0d18709060c56e067d9a1c2722679a",
            "file": "src/app/inobeta-ui/ui/material-forms/controls/textbox.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[ib-mat-textbox]",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-form-field appearance=\"fill\" style=\"width: 100%;\" [formGroup]=\"data.form\">\n  <mat-label>{{data.base.label | translate}}</mat-label>\n  <!--\n    https://github.com/angular/angular/issues/13243\n    type is not dynamic (see angular issue)\n  -->\n  <input\n    matInput\n    *ngIf=\"data.base.type === 'number'\"\n    [formControlName]=\"data.base.key\"\n    [id]=\"data.base.key\"\n    [min]=\"minValidator\"\n    [max]=\"maxValidator\"\n    type=\"number\"\n    (keyup)=\"data.base.change(data.self)\"\n    (input)=\"data.base.change(data.self)\"\n  />\n  <input\n    matInput\n    *ngIf=\"data.base.type === 'text'\"\n    [formControlName]=\"data.base.key\"\n    [id]=\"data.base.key\"\n    [maxlength]=\"maxLengthValidator\"\n    type=\"text\"\n    (keyup)=\"data.base.change(data.self)\"\n    (change)=\"data.base.change(data.self)\"\n  />\n  <input\n    matInput\n    *ngIf=\"data.base.type === 'email'\"\n    [formControlName]=\"data.base.key\"\n    [id]=\"data.base.key\"\n    type=\"email\"\n    (keyup)=\"data.base.change(data.self)\"\n    (change)=\"data.base.change(data.self)\"\n  />\n  <input\n    matInput\n    *ngIf=\"data.base.type === 'password'\"\n    [formControlName]=\"data.base.key\"\n    [id]=\"data.base.key\"\n    type=\"password\"\n    (keyup)=\"data.base.change(data.self)\"\n    (change)=\"data.base.change(data.self)\"\n  />\n  <input\n    matInput\n    *ngIf=\"data.base.type === 'date'\"\n    [formControlName]=\"data.base.key\"\n    [id]=\"data.base.key\"\n    type=\"date\"\n    (keyup)=\"data.base.change(data.self)\"\n    (change)=\"data.base.change(data.self)\"\n  />\n  <mat-icon\n    matSuffix\n    *ngIf=\"hintMessage\"\n    [matTooltip]=\"hintMessage | translate\"\n  >\n      help_outline\n  </mat-icon>\n  <mat-error>\n    <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n  </mat-error>\n</mat-form-field>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "IbMatTextboxData",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { AbstractControl, Validators } from '@angular/forms';\nimport { IbFormControlInterface, IbFormControlBase, IbFormControlBaseComponent, IbFormControlBaseParams, IbFormControlData } from '../../forms/controls/form-control-base';\n\n@Component({\n  selector: '[ib-mat-textbox]',\n  template: `\n  <mat-form-field appearance=\"fill\" style=\"width: 100%;\" [formGroup]=\"data.form\">\n    <mat-label>{{data.base.label | translate}}</mat-label>\n    <!--\n      https://github.com/angular/angular/issues/13243\n      type is not dynamic (see angular issue)\n    -->\n    <input\n      matInput\n      *ngIf=\"data.base.type === 'number'\"\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      [min]=\"minValidator\"\n      [max]=\"maxValidator\"\n      type=\"number\"\n      (keyup)=\"data.base.change(data.self)\"\n      (input)=\"data.base.change(data.self)\"\n    />\n    <input\n      matInput\n      *ngIf=\"data.base.type === 'text'\"\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      [maxlength]=\"maxLengthValidator\"\n      type=\"text\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n    />\n    <input\n      matInput\n      *ngIf=\"data.base.type === 'email'\"\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      type=\"email\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n    />\n    <input\n      matInput\n      *ngIf=\"data.base.type === 'password'\"\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      type=\"password\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n    />\n    <input\n      matInput\n      *ngIf=\"data.base.type === 'date'\"\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      type=\"date\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n    />\n    <mat-icon\n      matSuffix\n      *ngIf=\"hintMessage\"\n      [matTooltip]=\"hintMessage | translate\"\n    >\n        help_outline\n    </mat-icon>\n    <mat-error>\n      <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n    </mat-error>\n  </mat-form-field>\n  `\n})\n\nexport class IbMatTextboxComponent implements IbFormControlInterface {\n  @Input() data: IbMatTextboxData;\n  get hintMessage() {\n    return (this.data.base.hintMessage) ? this.data.base.hintMessage() : null;\n  }\n\n  get minValidator() {\n    for (const func of this.data.base.validators) {\n      const validation = func({value: -Infinity} as AbstractControl);\n      if (validation && validation.min) {\n        return validation.min.min;\n      }\n    }\n    return null;\n  }\n\n  get maxValidator() {\n    for (const func of this.data.base.validators) {\n      const validation = func({value: Infinity} as AbstractControl);\n      if (validation && validation.max) {\n        return validation.max.max;\n      }\n    }\n    return null;\n  }\n\n\n  get maxLengthValidator() {\n    for (const func of this.data.base.validators) {\n      const getMethods = (obj) => {\n        let properties = new Set()\n        let currentObj = obj\n        do {\n          Object.getOwnPropertyNames(currentObj).map(item => properties.add(item))\n        } while ((currentObj = Object.getPrototypeOf(currentObj)))\n        return [...properties.keys()].filter((item: any) => typeof obj[item] === 'function') as string[]\n      }\n      const sampleString = this.data.self.value\n      if(!sampleString) return Infinity\n\n      const methods: string[] = getMethods(sampleString)\n      const fakeString: any = {}\n      for(let m of methods){\n        fakeString[m] = sampleString[m].bind(sampleString)\n      }\n      fakeString['length'] = Infinity\n      const validation = func({value: fakeString} as AbstractControl);\n      if (validation && validation.maxlength) {\n        return validation.maxlength.requiredLength;\n      }\n    }\n    return Infinity;\n  }\n}\n\n\nexport class IbMatTextboxControl extends IbFormControlBase<number | string> {\n  hintMessage;\n\n  constructor(options: IbMatTextboxParams) {\n    options.type = options.type || 'text';\n    super(options);\n    this.hintMessage = options.hintMessage || null;\n    this.control = new IbFormControlBaseComponent(IbMatTextboxComponent, {\n      base: this\n    });\n  }\n}\n\n\nexport interface IbMatTextboxParams extends IbFormControlBaseParams<number | string> {\n  hintMessage?: () => string;\n}\n\nexport interface IbMatTextboxData extends IbFormControlData {\n    base: IbMatTextboxParams;\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "IbFormControlInterface"
            ],
            "accessors": {
                "hintMessage": {
                    "name": "hintMessage",
                    "getSignature": {
                        "name": "hintMessage",
                        "type": "",
                        "returnType": "",
                        "line": 78
                    }
                },
                "minValidator": {
                    "name": "minValidator",
                    "getSignature": {
                        "name": "minValidator",
                        "type": "",
                        "returnType": "",
                        "line": 82
                    }
                },
                "maxValidator": {
                    "name": "maxValidator",
                    "getSignature": {
                        "name": "maxValidator",
                        "type": "",
                        "returnType": "",
                        "line": 92
                    }
                },
                "maxLengthValidator": {
                    "name": "maxLengthValidator",
                    "getSignature": {
                        "name": "maxLengthValidator",
                        "type": "",
                        "returnType": "",
                        "line": 103
                    }
                }
            }
        },
        {
            "name": "IbModalMessageComponent",
            "id": "component-IbModalMessageComponent-819993510152078aad73021a66e1716674f174fcbc785633e72f38f3a1f8b9b0e752c2662fb9303b7a76bac99a6cea49835a1d32e506dd9e2faad6637ec27863",
            "file": "src/app/inobeta-ui/ui/modal/modal-message.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-modal-message",
            "styleUrls": [],
            "styles": [],
            "template": "<h2 mat-dialog-title>{{ data.title | translate }}</h2>\n<mat-dialog-content style=\"min-width:350px;min-height: 10vh;\">{{ data.message | translate }}</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n  <button\n    *ngFor=\"let btn of data.actions\"\n    mat-raised-button\n    [color]=\"btn.color || 'basic'\"\n    [mat-dialog-close]=\"btn.value\">\n    {{ btn.label | translate }}\n  </button>\n  <button\n    *ngIf=\"data.hasNo\"\n    mat-raised-button\n    [mat-dialog-close]=\"false\">\n    {{ 'shared.ibModal.no' | translate }}\n  </button>\n  <button\n    *ngIf=\"data.hasYes\"\n    mat-raised-button\n    color=\"primary\"\n    [mat-dialog-close]=\"true\">\n    {{ 'shared.ibModal.yes' | translate }}\n  </button>\n</mat-dialog-actions>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbModalMessage",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<IbModalMessageComponent>",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Inject} from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { IbModalMessage } from './modal-message.model';\n\n@Component({\n  selector: 'ib-modal-message',\n  template: `\n    <h2 mat-dialog-title>{{ data.title | translate }}</h2>\n    <mat-dialog-content style=\"min-width:350px;min-height: 10vh;\">{{ data.message | translate }}</mat-dialog-content>\n    <mat-dialog-actions align=\"end\">\n      <button\n        *ngFor=\"let btn of data.actions\"\n        mat-raised-button\n        [color]=\"btn.color || 'basic'\"\n        [mat-dialog-close]=\"btn.value\">\n        {{ btn.label | translate }}\n      </button>\n      <button\n        *ngIf=\"data.hasNo\"\n        mat-raised-button\n        [mat-dialog-close]=\"false\">\n        {{ 'shared.ibModal.no' | translate }}\n      </button>\n      <button\n        *ngIf=\"data.hasYes\"\n        mat-raised-button\n        color=\"primary\"\n        [mat-dialog-close]=\"true\">\n        {{ 'shared.ibModal.yes' | translate }}\n      </button>\n    </mat-dialog-actions>`,\n})\nexport class IbModalMessageComponent {\n\n  constructor(\n    public dialogRef: MatDialogRef<IbModalMessageComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: IbModalMessage) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<IbModalMessageComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "IbModalMessage",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<IbModalMessageComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "IbModalMessage",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "IbNumberFilter",
            "id": "component-IbNumberFilter-48ee6fc65ddc144ff7887f861df86c87454de6cdfe95cad8cd70b973b6d0bc756531710501a5f4044e356042a0e2758dcf61ff8c4aed64ca9d673bf881f4b251",
            "file": "src/app/inobeta-ui/ui/kai-filter/filters/number/filter-number.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: IbFilterBase, useExisting: forwardRef(() => IbNumberFilter) }"
                }
            ],
            "selector": "ib-number-filter",
            "styleUrls": [
                "./filter-number.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "filter-number.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "max",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "ibTableColumnName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "IbFilterBase"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "IbFilterBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "build",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "searchCriteria",
                    "defaultValue": "new FormGroup({\n    min: new FormControl(),\n    max: new FormControl(),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFilterButton",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "IbFilterButton"
                        }
                    ],
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFilter",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "update",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "update",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "clearRange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "defineRangeFromColumn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "IbFilterBase"
                    }
                },
                {
                    "name": "applyFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation, forwardRef } from \"@angular/core\";\nimport { IbFilterBase } from \"../base/filter-base\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { IbFilterDef } from \"../../filter.types\";\nimport { and, gte, lte } from \"../../filters\";\n\n@Component({\n  selector: \"ib-number-filter\",\n  templateUrl: \"filter-number.component.html\",\n  styleUrls: [\"./filter-number.component.scss\"],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    { provide: IbFilterBase, useExisting: forwardRef(() => IbNumberFilter) },\n  ],\n})\nexport class IbNumberFilter extends IbFilterBase {\n  @Input() min: number = 0;\n  @Input() max: number = 100;\n\n  searchCriteria = new FormGroup({\n    min: new FormControl(),\n    max: new FormControl(),\n  });\n\n  get isDirty() {\n    return (\n      this.searchCriteria.value.min !== this.min ||\n      this.searchCriteria.value.max !== this.max\n    );\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.filter?.ibTable) {\n      this.defineRangeFromColumn();\n    }\n  }\n\n  defineRangeFromColumn() {\n    const values = this.filter.ibTable.dataSource.data.map((x) => x[this.name]);\n    this.min = Math.min(...values);\n    this.max = Math.max(...values);\n  }\n\n  clear(update = true) {\n    this.clearRange();\n    update && this.filter.update();\n  }\n\n  clearRange() {\n    this.searchCriteria.setValue({\n      min: this.min,\n      max: this.max,\n    });\n  }\n\n  build = (): IbFilterDef =>\n    and([\n      gte(this.searchCriteria.value.min),\n      lte(this.searchCriteria.value.max),\n    ]);\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"@angular/material\" as mat;\n\n.ib-number-filter {\n  padding: 0 0.5em;\n  display: flex;\n  flex-direction: column;\n}\n\n.ib-number-filter__input-range {\n  display: flex;\n  justify-content: space-between;\n  @include mat.form-field-density(-4);\n\n  input[type=number] {\n    appearance: textfield;\n  }\n\n  .mat-mdc-form-field {\n    overflow-y: inherit;\n  }\n  .mdc-notched-outline__notch {\n    width: auto !important;\n  }\n}\n\n",
                    "styleUrl": "./filter-number.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "IbFilterBase",
            "accessors": {
                "isDirty": {
                    "name": "isDirty",
                    "getSignature": {
                        "name": "isDirty",
                        "type": "",
                        "returnType": "",
                        "line": 25
                    }
                }
            },
            "templateData": "<ib-filter-button>\n  <span ib-filter-name><ng-content></ng-content></span>\n  <span ib-filter-value *ngIf=\"isDirty\">\n    {{\n      \"shared.ibFilter.between\"\n        | translate\n          : { min: searchCriteria.value.min, max: searchCriteria.value.max } | lowercase\n    }}\n  </span>\n\n  <section [formGroup]=\"filter?.form\" style=\"padding: 0 1em\">\n    <section class=\"ib-number-filter\" [formGroupName]=\"name\">\n      <section style=\"display: flex\">\n        <mat-slider style=\"flex: 1\" [max]=\"max\" [min]=\"min\">\n          <input\n            matSliderStartThumb\n            formControlName=\"min\"\n            [value]=\"searchCriteria.value.min\"\n          />\n          <input\n            matSliderEndThumb\n            formControlName=\"max\"\n            [value]=\"searchCriteria.value.max\"\n          />\n        </mat-slider>\n      </section>\n\n      <section class=\"ib-number-filter__input-range\">\n        <mat-form-field appearance=\"outline\" style=\"width: 12ch\">\n          <mat-label>{{ \"shared.ibFilter.min\" | translate }}</mat-label>\n          <input\n            matInput\n            type=\"number\"\n            placeholder=\"min\"\n            formControlName=\"min\"\n            [value]=\"searchCriteria.value.min\"\n          />\n        </mat-form-field>\n\n        <mat-form-field appearance=\"outline\" style=\"width: 12ch\">\n          <mat-label>{{ \"shared.ibFilter.max\" | translate }}</mat-label>\n          <input\n            matInput\n            type=\"number\"\n            placeholder=\"max\"\n            formControlName=\"max\"\n            [value]=\"searchCriteria.value.max\"\n          />\n        </mat-form-field>\n      </section>\n    </section>\n  </section>\n\n  <ib-filter-actions>\n    <ib-apply-filter-button (click)=\"applyFilter()\"></ib-apply-filter-button>\n    <button mat-button (click)=\"clear()\" [disabled]=\"!isDirty\">\n      {{ \"shared.ibFilter.clear\" | translate }}\n    </button>\n  </ib-filter-actions>\n</ib-filter-button>\n"
        },
        {
            "name": "IbSelectionColumn",
            "id": "component-IbSelectionColumn-afff592ee66c5cfca221ea9fcca9a69bbc3b4059e14dcff5488483941e3660048b79bdd7a33f8a26322c4b3ebf1b6b7226642ddc1f371e46dd19bfc03a298845",
            "file": "src/app/inobeta-ui/ui/kai-table/selection-column.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-selection-column",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container matColumnDef=\"ibSelectColumn\">\n  <th style=\"width: 40px\" class=\"ib-table__header-cell\" mat-header-cell *matHeaderCellDef>\n    <mat-checkbox\n      (change)=\"$event ? toggleAllRows() : null\"\n      [checked]=\"selection.hasValue() && isAllSelected()\"\n      [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n      [disabled]=\"isDisabled()\"\n    >\n    </mat-checkbox>\n  </th>\n  <td mat-cell *matCellDef=\"let row\">\n    <mat-checkbox\n      (click)=\"$event.stopPropagation()\"\n      (change)=\"toggleRowSelection($event, row)\"\n      [checked]=\"selection.isSelected(row)\"\n      [disabled]=\"isDisabled()\"\n    >\n    </mat-checkbox>\n  </td>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "ibRowSelectionChange",
                    "defaultValue": "new EventEmitter<\n    IbTableRowSelectionChange[]\n  >()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "columnDef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatColumnDef",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatColumnDef, {static: true}"
                        }
                    ]
                },
                {
                    "name": "selection",
                    "defaultValue": "new SelectionModel<any>(true, [])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTable",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "isAllSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleAllRows",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleRowSelection",
                    "args": [
                        {
                            "name": "ev",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "row",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "row",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { SelectionModel } from \"@angular/cdk/collections\";\nimport {\n  Component,\n  EventEmitter,\n  OnInit,\n  Output,\n  ViewChild,\n} from \"@angular/core\";\nimport { IbTable } from \"./table.component\";\nimport { MatColumnDef } from \"@angular/material/table\";\nimport { IbTableRowSelectionChange, IbKaiTableState } from \"./table.types\";\n\n@Component({\n  selector: \"ib-selection-column\",\n  template: `\n    <ng-container matColumnDef=\"ibSelectColumn\">\n      <th style=\"width: 40px\" class=\"ib-table__header-cell\" mat-header-cell *matHeaderCellDef>\n        <mat-checkbox\n          (change)=\"$event ? toggleAllRows() : null\"\n          [checked]=\"selection.hasValue() && isAllSelected()\"\n          [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          [disabled]=\"isDisabled()\"\n        >\n        </mat-checkbox>\n      </th>\n      <td mat-cell *matCellDef=\"let row\">\n        <mat-checkbox\n          (click)=\"$event.stopPropagation()\"\n          (change)=\"toggleRowSelection($event, row)\"\n          [checked]=\"selection.isSelected(row)\"\n          [disabled]=\"isDisabled()\"\n        >\n        </mat-checkbox>\n      </td>\n    </ng-container>\n  `,\n})\nexport class IbSelectionColumn implements OnInit {\n  @ViewChild(MatColumnDef, { static: true }) columnDef: MatColumnDef;\n  selection = new SelectionModel<any>(true, []);\n\n  @Output() ibRowSelectionChange = new EventEmitter<\n    IbTableRowSelectionChange[]\n  >();\n\n  constructor(public table: IbTable) {}\n\n  ngOnInit() {\n    this.table.table.addColumnDef(this.columnDef);\n  }\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.table.dataSource.filteredData.length;\n    return numSelected == numRows;\n  }\n\n  toggleAllRows() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.table.dataSource.filteredData);\n\n    const selectionAfterToggle = this.isAllSelected();\n    this.ibRowSelectionChange.emit(\n      this.table.dataSource.filteredData.map((row) => ({\n        tableName: this.table.tableName || \"\",\n        row,\n        selection: selectionAfterToggle,\n      }))\n    );\n  }\n\n  toggleRowSelection(ev, row) {\n    if (ev) {\n      this.selection.toggle(row);\n\n      this.ibRowSelectionChange.emit([\n        {\n          tableName: this.table.tableName || \"\",\n          row,\n          selection: ev.checked,\n        },\n      ]);\n    }\n  }\n\n  isDisabled() {\n    return !this.table.isState(IbKaiTableState.IDLE);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "table",
                        "type": "IbTable",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "table",
                        "type": "IbTable",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "IbSpinnerLoadingComponent",
            "id": "component-IbSpinnerLoadingComponent-11f35e7a7676914b5e45536d7af84901df017aaa71106c4c42c63453e5fedae1b77976fe561cc9407266b431b4522c53ac4e2bd216a20a9f4ae101c77205e32c",
            "file": "src/app/inobeta-ui/http/http/spinner-loading.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-spinner-loading",
            "styleUrls": [],
            "styles": [
                "\n    .spinner {\n      width: 40px;\n      height: 40px;\n      position: relative;\n      margin: auto;\n      top: 50%;\n    }\n\n    .double-bounce1, .double-bounce2 {\n      width: 100%;\n      height: 100%;\n      border-radius: 50%;\n      background-color: #333;\n      opacity: 0.6;\n      position: absolute;\n      top: 0;\n      left: 0;\n      -webkit-animation: sk-bounce 1s infinite ease-in-out;\n      animation: sk-bounce 1s infinite ease-in-out;\n    }\n\n    .double-bounce2 {\n      -webkit-animation-delay: -1.0s;\n      animation-delay: -1.0s;\n    }\n\n    @-webkit-keyframes sk-bounce {\n      0%, 100% {\n        -webkit-transform: scale(0.0)\n      }\n      50% {\n        -webkit-transform: scale(1.0)\n      }\n    }\n\n    @keyframes sk-bounce {\n      0%, 100% {\n        transform: scale(0.0);\n        -webkit-transform: scale(0.0);\n      }\n      50% {\n        transform: scale(1.0);\n        -webkit-transform: scale(1.0);\n      }\n    }\n\n    .modal-spinner {\n      position: fixed;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      z-index: 9999;\n      background-color: rgba(0, 0, 0, 0.4);\n    }\n  "
            ],
            "template": "<div *ngIf=\"this.httpService.showLoading\" [hidden]=\"!this.httpService.showLoading\" class=\"modal-spinner\">\n  <div class=\"spinner\">\n    <div class=\"double-bounce1\"></div>\n    <div class=\"double-bounce2\"></div>\n  </div>\n</div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "httpService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbHttpClientService",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ViewEncapsulation} from '@angular/core';\nimport {IbHttpClientService} from './http-client.service';\n\n@Component({\n  selector: 'ib-spinner-loading',\n  styles: [`\n    .spinner {\n      width: 40px;\n      height: 40px;\n      position: relative;\n      margin: auto;\n      top: 50%;\n    }\n\n    .double-bounce1, .double-bounce2 {\n      width: 100%;\n      height: 100%;\n      border-radius: 50%;\n      background-color: #333;\n      opacity: 0.6;\n      position: absolute;\n      top: 0;\n      left: 0;\n      -webkit-animation: sk-bounce 1s infinite ease-in-out;\n      animation: sk-bounce 1s infinite ease-in-out;\n    }\n\n    .double-bounce2 {\n      -webkit-animation-delay: -1.0s;\n      animation-delay: -1.0s;\n    }\n\n    @-webkit-keyframes sk-bounce {\n      0%, 100% {\n        -webkit-transform: scale(0.0)\n      }\n      50% {\n        -webkit-transform: scale(1.0)\n      }\n    }\n\n    @keyframes sk-bounce {\n      0%, 100% {\n        transform: scale(0.0);\n        -webkit-transform: scale(0.0);\n      }\n      50% {\n        transform: scale(1.0);\n        -webkit-transform: scale(1.0);\n      }\n    }\n\n    .modal-spinner {\n      position: fixed;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      z-index: 9999;\n      background-color: rgba(0, 0, 0, 0.4);\n    }\n  `],\n  template: `\n    <div *ngIf=\"this.httpService.showLoading\" [hidden]=\"!this.httpService.showLoading\" class=\"modal-spinner\">\n      <div class=\"spinner\">\n        <div class=\"double-bounce1\"></div>\n        <div class=\"double-bounce2\"></div>\n      </div>\n    </div>`,\n  encapsulation: ViewEncapsulation.None\n})\n\nexport class IbSpinnerLoadingComponent {\n  constructor(public httpService: IbHttpClientService) {}\n}\n\n/* istanbul ignore next */\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .spinner {\n      width: 40px;\n      height: 40px;\n      position: relative;\n      margin: auto;\n      top: 50%;\n    }\n\n    .double-bounce1, .double-bounce2 {\n      width: 100%;\n      height: 100%;\n      border-radius: 50%;\n      background-color: #333;\n      opacity: 0.6;\n      position: absolute;\n      top: 0;\n      left: 0;\n      -webkit-animation: sk-bounce 1s infinite ease-in-out;\n      animation: sk-bounce 1s infinite ease-in-out;\n    }\n\n    .double-bounce2 {\n      -webkit-animation-delay: -1.0s;\n      animation-delay: -1.0s;\n    }\n\n    @-webkit-keyframes sk-bounce {\n      0%, 100% {\n        -webkit-transform: scale(0.0)\n      }\n      50% {\n        -webkit-transform: scale(1.0)\n      }\n    }\n\n    @keyframes sk-bounce {\n      0%, 100% {\n        transform: scale(0.0);\n        -webkit-transform: scale(0.0);\n      }\n      50% {\n        transform: scale(1.0);\n        -webkit-transform: scale(1.0);\n      }\n    }\n\n    .modal-spinner {\n      position: fixed;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      z-index: 9999;\n      background-color: rgba(0, 0, 0, 0.4);\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpService",
                        "type": "IbHttpClientService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 72,
                "jsdoctags": [
                    {
                        "name": "httpService",
                        "type": "IbHttpClientService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "IbTable",
            "id": "component-IbTable-3e9b73badf7bc194268c2393b96933c8088940de1b61518d0d417c430713decf9c2d2b9b2d921d2f46c2f745b6f2711a682a903df83973c6073218982b95ae40",
            "file": "src/app/inobeta-ui/ui/kai-table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-kai-table",
            "styleUrls": [
                "./table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 114,
                    "type": "{}",
                    "decorators": []
                },
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 97,
                    "type": "MatTableDataSource | IbDataSource",
                    "decorators": []
                },
                {
                    "name": "tableDef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 106,
                    "type": "IbTableDef",
                    "decorators": []
                },
                {
                    "name": "tableName",
                    "defaultValue": "tableNameGen.next().value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 104,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "ibRowClicked",
                    "defaultValue": "new EventEmitter<IbTableRowEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 138,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_columns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbColumnDef<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_componentCache",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_dataSource",
                    "defaultValue": "new MatTableDataSource([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<any> | IbDataSource<any>",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_tableDef",
                    "defaultValue": "defaultTableDef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTableDef",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "expandedElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFilter",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "IbFilter"
                        }
                    ]
                },
                {
                    "name": "isSelectionColumnAdded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator, {static: true}"
                        }
                    ]
                },
                {
                    "name": "rowGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbKaiRowGroupDirective",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "IbKaiRowGroupDirective"
                        }
                    ]
                },
                {
                    "name": "selectionColumn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbSelectionColumn",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "IbSelectionColumn"
                        }
                    ]
                },
                {
                    "name": "sendRowEvent",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 169,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort, {static: true}"
                        }
                    ]
                },
                {
                    "name": "state",
                    "defaultValue": "IbKaiTableState.IDLE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "states",
                    "defaultValue": "IbKaiTableState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTable<any>",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatTable, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getCell",
                    "args": [
                        {
                            "name": "column",
                            "type": "IbColumnDef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "IbColumnDef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleAttached",
                    "args": [
                        {
                            "name": "ref",
                            "type": "CdkPortalOutletAttachedRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "column",
                            "type": "IbColumnDef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ref",
                            "type": "CdkPortalOutletAttachedRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "column",
                            "type": "IbColumnDef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isState",
                    "args": [
                        {
                            "name": "state",
                            "type": "IbKaiTableState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IbKaiTableState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n} from \"@angular/animations\";\nimport {\n  CdkPortalOutletAttachedRef,\n  ComponentPortal,\n} from \"@angular/cdk/portal\";\nimport {\n  Component,\n  ComponentRef,\n  ContentChild,\n  EventEmitter,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n} from \"@angular/core\";\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { MatSort } from \"@angular/material/sort\";\nimport { MatTable, MatTableDataSource } from \"@angular/material/table\";\nimport { IbCell } from \"./cells\";\nimport { IbKaiRowGroupDirective } from \"./rowgroup\";\nimport {\n  IbCellData,\n  IbColumnDef,\n  IbTableDef,\n  IbTableRowEvent,\n  IbKaiTableState,\n} from \"./table.types\";\nimport { IbSelectionColumn } from \"./selection-column\";\nimport { IbDataSource } from \"./table-data-source\";\nimport { IbFilter } from \"../kai-filter\";\n\nexport const IB_CELL_DATA = new InjectionToken<IbCellData>(\"IbCellData\");\n\nconst defaultTableDef: IbTableDef = {\n  paginator: {\n    pageSizeOptions: [5, 10, 25, 100],\n    showFirstLastButtons: true,\n    pageSize: 10,\n  },\n};\n\nfunction* generateTableName() {\n  let i = 0;\n  while (true) {\n    yield btoa(window.location.pathname + window.location.hash + i++);\n  }\n}\nconst tableNameGen = generateTableName();\n\n@Component({\n  selector: \"ib-kai-table\",\n  templateUrl: \"./table.component.html\",\n  styleUrls: [\"./table.component.scss\"],\n  animations: [\n    trigger(\"detailExpand\", [\n      state(\"collapsed\", style({ height: \"0px\", minHeight: \"0\" })),\n      state(\"expanded\", style({ height: \"*\" })),\n      transition(\n        \"expanded <=> collapsed\",\n        animate(\"225ms cubic-bezier(0.4, 0.0, 0.2, 1)\")\n      ),\n    ]),\n  ],\n})\nexport class IbTable implements OnDestroy {\n  // tslint:disable-next-line: variable-name\n  private _dataSource: MatTableDataSource<any> | IbDataSource<any> =\n    new MatTableDataSource([]);\n  // tslint:disable-next-line: variable-name\n  private _tableDef: IbTableDef = defaultTableDef;\n  // tslint:disable-next-line: variable-name\n  private _columns: IbColumnDef<any>[] = [];\n  // tslint:disable-next-line: variable-name\n  private _componentCache: any = {};\n\n  @ContentChild(IbSelectionColumn) selectionColumn!: IbSelectionColumn;\n  @ContentChild(IbKaiRowGroupDirective) rowGroup!: IbKaiRowGroupDirective;\n  @ContentChild(IbFilter) filter!: IbFilter;\n\n  @ViewChild(MatTable, { static: true }) table: MatTable<any>;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n\n  expandedElement: any;\n\n  states = IbKaiTableState;\n  state = IbKaiTableState.IDLE;\n\n  @Input()\n  set dataSource(value: MatTableDataSource<any> | IbDataSource<any>) {\n    this._dataSource = value;\n  }\n  get dataSource() {\n    return this._dataSource;\n  }\n\n  @Input() tableName = tableNameGen.next().value;\n  @Input()\n  set tableDef(value) {\n    this._tableDef = value;\n  }\n  get tableDef() {\n    return this._tableDef;\n  }\n\n  @Input()\n  set columns(value) {\n    this._columns = value;\n    // tslint:disable-next-line: prefer-for-of\n    for (let i = 0; i < this._columns.length; i++) {\n      this.getCell(this._columns[i]);\n    }\n  }\n  get columns() {\n    return this._columns;\n  }\n\n  isSelectionColumnAdded = false;\n  get displayedColumns() {\n    let displayedColumns = [];\n    if (this.isSelectionColumnAdded) {\n      displayedColumns = displayedColumns.concat([\"ibSelectColumn\"]);\n    }\n    return displayedColumns.concat(this.columns.map((c) => c.columnDef));\n  }\n\n  get portals() {\n    return this._componentCache;\n  }\n\n  @Output() ibRowClicked = new EventEmitter<IbTableRowEvent>();\n\n  ngOnInit() {\n    this._dataSource.paginator = this.paginator;\n    this._dataSource.sort = this.sort;\n\n    if (this._dataSource instanceof IbDataSource) {\n      this._dataSource._state.subscribe((s) => (this.state = s));\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.table && this.selectionColumn) {\n      setTimeout(() => this.isSelectionColumnAdded = true)\n    }\n  }\n\n  ngAfterContentInit() {\n    if (this.filter) {\n      this.dataSource.filterPredicate = this.filter.filterPredicate;\n      this.filter.ibFilterUpdated.subscribe(filter => {\n        this.selectionColumn?.selection?.clear();\n        this.dataSource.filter = filter as any;\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._componentCache = null;\n  }\n\n  private sendRowEvent = (event: Partial<IbTableRowEvent>) =>\n    this.ibRowClicked.emit({\n      ...(event as IbTableRowEvent),\n      tableName: this.tableName || \"\",\n    });\n\n  getCell(column: IbColumnDef) {\n    if (column.columnDef in this._componentCache) {\n      return this._componentCache[column.columnDef];\n    }\n    this._componentCache[column.columnDef] = new ComponentPortal(\n      column.component ?? IbCell\n    );\n  }\n\n  handleAttached(\n    ref: CdkPortalOutletAttachedRef,\n    column: IbColumnDef,\n    row: any\n  ) {\n    (ref as ComponentRef<IbCell>).instance.data = {\n      send: this.sendRowEvent,\n      column,\n      row,\n    };\n  }\n\n  isState(state: IbKaiTableState) {\n    return this.state === state;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".ib-table-scrollable {\n  overflow-y: auto;\n  position: relative;\n\n  &__loading {\n    overflow: hidden;\n  }\n}\n\n.ib-table-progress-bar {\n  position: absolute;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  z-index: 101;\n  transform: translateZ(1px);\n  background-color: rgba(0,0,0,.01);\n\n  mat-progress-bar {\n    position: relative;\n    top: 56px;\n  }\n}\n\ntr.ib-table-group-detail-row {\n  height: 0;\n}\n\ntr.ib-table-element-row:not(.ib-table-expanded-row):hover {\n  background: whitesmoke;\n}\n\n::ng-deep .ib-table-expanded-row > td {\n  border-bottom-width: 0;\n}\n\n.ib-table-element-detail {\n  overflow: hidden;\n  display: flex;\n}",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnDestroy"
            ],
            "accessors": {
                "dataSource": {
                    "name": "dataSource",
                    "setSignature": {
                        "name": "dataSource",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "MatTableDataSource<any> | IbDataSource<any>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 97,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "MatTableDataSource<any> | IbDataSource<any>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "dataSource",
                        "type": "",
                        "returnType": "",
                        "line": 100
                    }
                },
                "tableDef": {
                    "name": "tableDef",
                    "setSignature": {
                        "name": "tableDef",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 106,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "tableDef",
                        "type": "",
                        "returnType": "",
                        "line": 109
                    }
                },
                "columns": {
                    "name": "columns",
                    "setSignature": {
                        "name": "columns",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 114,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "columns",
                        "type": "",
                        "returnType": "",
                        "line": 121
                    }
                },
                "displayedColumns": {
                    "name": "displayedColumns",
                    "getSignature": {
                        "name": "displayedColumns",
                        "type": "",
                        "returnType": "",
                        "line": 126
                    }
                },
                "portals": {
                    "name": "portals",
                    "getSignature": {
                        "name": "portals",
                        "type": "",
                        "returnType": "",
                        "line": 134
                    }
                }
            },
            "templateData": "<div class=\"ib-table-scrollable\" [class.ib-table-scrollable__loading]=\"isState(states.LOADING)\">\n  <ng-content select=\"ib-filter\"></ng-content>\n  <div class=\"ib-table-progress-bar\" *ngIf=\"isState(states.LOADING)\">\n    <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n  </div>\n  <table\n    class=\"ib-table\"\n    mat-table\n    matSort\n    multiTemplateDataRows\n    [matSortActive]=\"this.tableDef.initialSort?.active\"\n    [matSortDirection]=\"this.tableDef.initialSort?.direction\"\n    [dataSource]=\"dataSource\"\n  >\n    <ng-content select=\"ib-selection-column\"></ng-content>\n    <ng-container *ngFor=\"let column of columns\" [matColumnDef]=\"column.columnDef\">\n      <th class=\"ib-table__header-cell\" mat-header-cell *matHeaderCellDef mat-sort-header [disabled]=\"!column.sort\">\n        {{column.header | translate}}\n      </th>\n      <td mat-cell *matCellDef=\"let row\">\n        <ng-template [cdkPortalOutlet]=\"portals[column.columnDef]\" (attached)=\"handleAttached($event, column, row)\"></ng-template>\n      </td>\n    </ng-container>\n    <ng-container matColumnDef=\"expandedDetail\" *ngIf=\"rowGroup\">\n      <td mat-cell *matCellDef=\"let element\" [attr.colspan]=\"columns.length\">\n        <div class=\"ib-table-element-detail\"\n             [@detailExpand]=\"element == expandedElement ? 'expanded' : 'collapsed'\">\n          <ng-container *ngTemplateOutlet=\"rowGroup.templateRef; context: {'row': element}\" ></ng-container>\n        </div>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true;\"></tr>\n    <tr\n      mat-row\n      *matRowDef=\"let row; columns: displayedColumns;\"\n      class=\"ib-table-element-row\"\n      [class.ib-table-expanded-row]=\"expandedElement === row\"\n      (click)=\"rowGroup && (expandedElement = expandedElement === row ? null : row)\"\n    ></tr>\n    <ng-container *ngIf=\"rowGroup\">\n      <tr mat-row *matRowDef=\"let row; columns: ['expandedDetail']\" class=\"ib-table-group-detail-row\"></tr>\n    </ng-container>\n    <tr *matNoDataRow>\n      <td [attr.colspan]=\"columns.length\">\n        <div style=\"display: flex; flex-direction: column; align-items: center; padding: 12px;\">\n          <ng-container *ngIf=\"isState(states.IDLE)\">\n            <mat-icon style=\"color: #888\">inbox</mat-icon>\n            {{ \"common.noItems\" | translate }}\n            {{ state }}\n          </ng-container>\n\n          <ng-container *ngIf=\"isState(states.HTTP_ERROR)\">\n            <mat-icon style=\"color: #888\">error</mat-icon>\n            {{ \"common.httpError\" | translate }}\n          </ng-container>\n        </div>\n      </td>\n    </tr>\n  </table>\n</div>\n<div class=\"ib-table-paginator\">\n  <mat-paginator\n    [style.display]=\"tableDef.paginator.hide ? 'none' : 'block'\"\n    [pageSize]=\"tableDef.paginator.pageSize\"\n    [showFirstLastButtons]=\"tableDef.paginator.showFirstLastButtons\"\n    [pageSizeOptions]=\"tableDef.paginator.pageSizeOptions\">\n  </mat-paginator>\n</div>\n"
        },
        {
            "name": "IbTableActionsComponent",
            "id": "component-IbTableActionsComponent-f0c71074b20de5a895e9469a7f52eecde763f19dc7787b3893f1649b0f08066d9822b004916ae7f4e382a05507e545b1ebc26df24f60a0ae4ff08dd2bd19b004",
            "file": "src/app/inobeta-ui/ui/table/components/table-actions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[ib-table-actions]",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container\n  *ngTemplateOutlet=\"((structureTemplates['exportTemplate'] != null) ? structureTemplates['exportTemplate'] : defaultExportTemplate);\n  context: { ibTable: context}\"\n></ng-container>\n<ng-template #defaultExportTemplate>\n  <ib-table-export\n    *ngIf=\"hasExport\"\n    [selectableRows]=\"selectableRows\"\n    (export)=\"export.emit($event || {})\"\n    >\n  </ib-table-export>\n</ng-template>\n<ib-table-button\n  *ngFor=\"let a of actions\"\n  [label]=\"a.label\"\n  [color]=\"a.color || 'basic'\"\n  (click)=\"a.handler(context.getSelectedRows())\"\n></ib-table-button>\n<ib-table-button\n  *ngIf=\"hasAdd\"\n  (click)=\"add.emit()\"\n  label=\"shared.ibTable.add\"\n></ib-table-button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "IbTableAction[]",
                    "decorators": []
                },
                {
                    "name": "context",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "hasAdd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "hasExport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "selectableRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "structureTemplates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "add",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "export",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { IbTableAction } from '../models/titles.model';\n\n@Component({\n  selector: '[ib-table-actions]',\n  template: `\n  <ng-container\n    *ngTemplateOutlet=\"((structureTemplates['exportTemplate'] != null) ? structureTemplates['exportTemplate'] : defaultExportTemplate);\n    context: { ibTable: context}\"\n  ></ng-container>\n  <ng-template #defaultExportTemplate>\n    <ib-table-export\n      *ngIf=\"hasExport\"\n      [selectableRows]=\"selectableRows\"\n      (export)=\"export.emit($event || {})\"\n      >\n    </ib-table-export>\n  </ng-template>\n  <ib-table-button\n    *ngFor=\"let a of actions\"\n    [label]=\"a.label\"\n    [color]=\"a.color || 'basic'\"\n    (click)=\"a.handler(context.getSelectedRows())\"\n  ></ib-table-button>\n  <ib-table-button\n    *ngIf=\"hasAdd\"\n    (click)=\"add.emit()\"\n    label=\"shared.ibTable.add\"\n  ></ib-table-button>\n  `\n})\n\nexport class IbTableActionsComponent implements OnInit {\n  @Input() structureTemplates\n  @Input() context;\n  @Input() hasExport;\n  @Input() hasAdd;\n  @Input() selectableRows;\n  @Input() actions: IbTableAction[] = [];\n\n  @Output() add: EventEmitter<any> = new EventEmitter<any>();\n  @Output() export: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor() { }\n\n  ngOnInit() { }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 42
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "IbTableButtonComponent",
            "id": "component-IbTableButtonComponent-4573b65ceccb5a1925d1031031b9973dd7772d6549f788db0fa08065a964e4efe758c72c783127b99e015fef5f202da33a5a9cc767daa52c74cefec52342dc7f",
            "file": "src/app/inobeta-ui/ui/table/components/table-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-table-button",
            "styleUrls": [],
            "styles": [],
            "template": "  <div fxLayout=\"row\" fxLayout=\"space-around center\">\n  <button\n    (click)=\"click.emit(); $event.stopPropagation();\"\n    [type]=\"'button'\"\n    mat-raised-button\n    [color]=\"color\"\n    [disabled]=\"disabled\"\n  >{{ label  | translate}}</button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "click",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'ib-table-button',\n  template: `\n    <div fxLayout=\"row\" fxLayout=\"space-around center\">\n    <button\n      (click)=\"click.emit(); $event.stopPropagation();\"\n      [type]=\"'button'\"\n      mat-raised-button\n      [color]=\"color\"\n      [disabled]=\"disabled\"\n    >{{ label  | translate}}</button>\n  </div>\n  `\n})\n\nexport class IbTableButtonComponent implements OnInit {\n  @Input() label = '';\n  @Input() color = 'primary'\n  @Input() disabled = false\n  @Output() click: EventEmitter<any> = new EventEmitter<any>();\n  constructor() { }\n\n  ngOnInit() { }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "IbTableComponent",
            "id": "component-IbTableComponent-8dc58b00d9758de272182c1ccef1792900fce4cd0533b341498f0c3ccbcb033b01755a8ba80681117b85ae389a25b0900ffd252e4bdb1ea65e21a7391bc2aac8",
            "file": "src/app/inobeta-ui/ui/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-table",
            "styleUrls": [
                "./table.component.css"
            ],
            "styles": [],
            "template": "<div fxLayout=\"column\" class=\"ib-table\" >\n  <div\n    fxFlex\n    ib-table-actions\n    fxLayout=\"row\"\n    fxLayoutAlign=\"end center\"\n    fxLayoutGap=\"20px\"\n    [structureTemplates]=\"structureTemplates\"\n    [context]=\"this\"\n    [hasAdd]=\"hasAdd\"\n    [hasExport]=\"hasExport\"\n    [selectableRows]=\"selectableRows\"\n    [ngStyle]=\"{\n      'padding-bottom': (actions.length > 0 || hasAdd || hasExport) ? '5px' : '0px'\n    }\"\n    [actions]=\"actions\"\n    *ngIf=\"[ibTableActionsPosition.BOTH, ibTableActionsPosition.TOP].indexOf(actionsPosition) > -1\"\n    (add)=\"add.emit()\"\n    (export)=\"export($event)\"\n  >\n  </div>\n  <div class=\"ib-table-container\"\n    [ngStyle]=\"{\n      'overflow-x': (stickyAreas.length > 0) ? 'unset' : 'auto'\n    }\"\n  >\n    <table\n      matSort\n      (matSortChange)=\"sortData($event)\"\n      [matSortActive]=\"currentSort ? currentSort.active : null\"\n      [matSortDirection]=\"currentSort ? currentSort.direction : null\"\n      style=\"width:100%;\" cellpadding=\"0\" cellspacing=\"0\">\n\n      <!--HEADER-->\n      <thead [class.ib-header-sticky]=\"stickyAreas.includes(ibStickyArea.HEADER)\">\n        <tr class=\"table-header\"\n          ib-table-header\n          [table]=\"this\"\n          [titles]=\"titles\"\n          [selectableRows]=\"selectableRows\"\n          [templateHeaders]=\"templateHeaders\"\n          [templateButtons]=\"templateButtons\"\n          [columnFilter]=\"columnFilter\"\n          [hasEdit]=\"hasEdit\"\n          [hasDelete]=\"hasDelete\"\n          [hasConfig]=\"hasConfig\"\n          [currentSort]=\"currentSort\"\n          (handleSetFilter)=\"setFilter($event.key, $event.value, $event.indexToSet)\"\n          [stickyAreas]=\"stickyAreas\"\n          [tableName]=\"tableName\"\n        ></tr>\n      </thead>\n\n      <!--ROWS-->\n      <tbody\n      >\n        <tr\n          ib-table-row\n          class=\"table-row\"\n          [ngClass]=\"rowClass(item)\"\n          [iconSet]=\"rowIconSet\"\n          *ngFor=\"let item of sortedData\"\n          [item]=\"item\"\n          [titles]=\"titles\"\n          [customItemTemplate]=\"customItemTemplate\"\n          [selectableRows]=\"selectableRows\"\n          [templateButtons]=\"templateButtons\"\n          [formRow]=\"rowForm(item)\"\n          [hasEdit]=\"hasEdit\"\n          [hasDelete]=\"hasDelete\"\n          [deleteConfirm]=\"deleteConfirm\"\n          [stickyAreas]=\"stickyAreas\"\n          (rowChecked)=\"rowChecked.emit($event)\"\n          (click)=\"rowClicked.emit(item)\"\n          (edit)=\"edit.emit($event)\"\n          (delete)=\"delete.emit($event)\"\n        >\n        </tr>\n\n      <tr *ngIf=\"sortedData.length === 0\">\n        <td\n          [attr.colspan]=\"titles.length + templateButtons.length + (selectableRows ? 1 : 0) + (hasEdit ? 1 : 0) + (hasDelete ? 1 : 0) + 1\"\n          style=\"text-align: center;\"\n        >\n          <br><br>{{ 'shared.ibTable.noData' | translate }}<br><br>\n        </td>\n      </tr>\n\n      <tr\n        ib-table-total-row\n        *ngIf=\"hasFooter\"\n        class=\"table-row\"\n        [class.ib-footer-sticky]=\"stickyAreas.includes(ibStickyArea.FOOTER)\"\n        [titles]=\"titles\"\n        [selectableRows]=\"selectableRows\"\n        [templateButtons]=\"templateButtons\"\n        [hasEdit]=\"hasEdit\"\n        [sortedData]=\"sortedData\"\n        [filteredData]=\"filteredData\"\n        [hasDelete]=\"hasDelete\"\n        [totalRowDef]=\"totalRow$ | async\"\n        [tableName]=\"tableName\"\n        ></tr>\n      </tbody>\n    </table>\n  </div>\n  <ng-container\n    *ngTemplateOutlet=\"((structureTemplates['paginatorTemplate'] != null) ? structureTemplates['paginatorTemplate'] : defaultPaginatorTemplate);\n    context: this\"\n  ></ng-container>\n  <ng-template #defaultPaginatorTemplate>\n    <ib-table-paginator\n      *ngIf=\"hasPaginator\"\n      [numOfElements]=\"numOfElements\"\n      [paginationInfo]=\"currentPagination\"\n      (pageChangeHandle)=\"pageChangeHandle($event)\"\n      [elemForPage]=\"currentPagination.pageSize\">\n    </ib-table-paginator>\n  </ng-template>\n  <div\n    fxFlex\n    ib-table-actions\n    fxLayout=\"row\"\n    fxLayoutAlign=\"end center\"\n    fxLayoutGap=\"20px\"\n    [structureTemplates]=\"structureTemplates\"\n    [context]=\"this\"\n    [hasAdd]=\"hasAdd\"\n    [hasExport]=\"hasExport\"\n    [selectableRows]=\"selectableRows\"\n    [actions]=\"actions\"\n    *ngIf=\"[ibTableActionsPosition.BOTH, ibTableActionsPosition.BOTTOM].indexOf(actionsPosition) > -1\"\n    (add)=\"add.emit()\"\n    (export)=\"export($event)\"\n  >\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 204,
                    "type": "IbTableAction[]",
                    "decorators": []
                },
                {
                    "name": "actionsPosition",
                    "defaultValue": "IbTableActionsPosition.BOTH",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 226,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "currentSort",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 181,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "customItemTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 173,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "deleteConfirm",
                    "defaultValue": "true",
                    "deprecated": true,
                    "deprecationMessage": "deleteConfirm will be removed, please use useContextColumn instead",
                    "jsdoctags": [
                        {
                            "pos": 7998,
                            "end": 8080,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 7999,
                                "end": 8009,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>deleteConfirm will be removed, please use useContextColumn instead</p>\n"
                        }
                    ],
                    "line": 225,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enableReduxStore",
                    "defaultValue": "false",
                    "deprecated": true,
                    "deprecationMessage": "enableReduxStore will be removed, please use hasConfig instead",
                    "jsdoctags": [
                        {
                            "pos": 6643,
                            "end": 6721,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 6644,
                                "end": 6654,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>enableReduxStore will be removed, please use hasConfig instead</p>\n"
                        }
                    ],
                    "line": 180,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hasAdd",
                    "defaultValue": "false",
                    "deprecated": true,
                    "deprecationMessage": "hasAdd will be removed, please use actions instead",
                    "jsdoctags": [
                        {
                            "pos": 6899,
                            "end": 6965,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 6900,
                                "end": 6910,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>hasAdd will be removed, please use actions instead</p>\n"
                        }
                    ],
                    "line": 187,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hasConfig",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 203,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hasDelete",
                    "defaultValue": "false",
                    "deprecated": true,
                    "deprecationMessage": "hasDelete will be removed, please use useContextColumn instead",
                    "jsdoctags": [
                        {
                            "pos": 7124,
                            "end": 7202,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 7125,
                                "end": 7135,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>hasDelete will be removed, please use useContextColumn instead</p>\n"
                        }
                    ],
                    "line": 195,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hasEdit",
                    "defaultValue": "false",
                    "deprecated": true,
                    "deprecationMessage": "hasEdit will be removed, please use useContextColumn instead",
                    "jsdoctags": [
                        {
                            "pos": 7006,
                            "end": 7082,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 7007,
                                "end": 7017,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>hasEdit will be removed, please use useContextColumn instead</p>\n"
                        }
                    ],
                    "line": 191,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hasExport",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 196,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hasFooter",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 202,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hasPaginator",
                    "defaultValue": "true",
                    "deprecated": true,
                    "deprecationMessage": "hasPaginator will be removed, please use tableDef.paginator.hide instead",
                    "jsdoctags": [
                        {
                            "pos": 7277,
                            "end": 7365,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 7278,
                                "end": 7288,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>hasPaginator will be removed, please use tableDef.paginator.hide instead</p>\n"
                        }
                    ],
                    "line": 201,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "iconSet",
                    "defaultValue": "this.defaultIconSet",
                    "deprecated": true,
                    "deprecationMessage": "iconSet will be removed, please use useContextColumn instead",
                    "jsdoctags": [
                        {
                            "pos": 8251,
                            "end": 8327,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 8252,
                                "end": 8262,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>iconSet will be removed, please use useContextColumn instead</p>\n"
                        }
                    ],
                    "line": 235,
                    "type": "{ edit: string; delete: string; }",
                    "decorators": []
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 175,
                    "type": "IbTableItem[]",
                    "decorators": []
                },
                {
                    "name": "pdfCustomStyles",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 215,
                    "type": "{}",
                    "decorators": []
                },
                {
                    "name": "pdfSetup",
                    "defaultValue": "{\n    orientation: 'l',\n    unit: null,\n    format: null\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 216,
                    "type": "jsPDFOptions",
                    "decorators": []
                },
                {
                    "name": "rowClass",
                    "defaultValue": "(item: IbTableItem) => ({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 280,
                    "type": "(item: IbTableItem) => {}",
                    "decorators": []
                },
                {
                    "name": "selectableRows",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 182,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "stickyAreas",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 205,
                    "type": "{}",
                    "decorators": []
                },
                {
                    "name": "structureTemplates",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 207,
                    "type": "{}",
                    "decorators": []
                },
                {
                    "name": "tableName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n{ columnName: TemplateRef }",
                    "description": "<p>{ columnName: TemplateRef }</p>\n",
                    "line": 214,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "templateButtons",
                    "defaultValue": "[]",
                    "deprecated": true,
                    "deprecationMessage": "templateButtons will be removed, please use useContextColumn instead",
                    "jsdoctags": [
                        {
                            "pos": 7614,
                            "end": 7698,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 7615,
                                "end": 7625,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>templateButtons will be removed, please use useContextColumn instead</p>\n"
                        }
                    ],
                    "line": 211,
                    "type": "IbTemplateModel[]",
                    "decorators": []
                },
                {
                    "name": "templateHeaders",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 212,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "titles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 174,
                    "type": "IbTableTitles[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "add",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": true,
                    "deprecationMessage": "add will be removed, please use actions instead",
                    "rawdescription": "\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "pos": 8673,
                            "end": 8736,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 8674,
                                "end": 8684,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>add will be removed, please use actions instead</p>\n"
                        }
                    ],
                    "line": 248,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "delete",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": true,
                    "deprecationMessage": "delete will be removed, please use useContextColumn instead",
                    "rawdescription": "\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "pos": 8962,
                            "end": 9037,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 8963,
                                "end": 8973,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>delete will be removed, please use useContextColumn instead</p>\n"
                        }
                    ],
                    "line": 256,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "edit",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": true,
                    "deprecationMessage": "edit will be removed, please use useContextColumn instead",
                    "rawdescription": "\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "pos": 8812,
                            "end": 8885,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 8813,
                                "end": 8823,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>edit will be removed, please use useContextColumn instead</p>\n"
                        }
                    ],
                    "line": 252,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "filterChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 238,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "rowChecked",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 262,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "rowClicked",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": true,
                    "deprecationMessage": "rowClicked will be removed, please use ibRowClicked instead",
                    "rawdescription": "\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "pos": 9117,
                            "end": 9192,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 329,
                            "tagName": {
                                "pos": 9118,
                                "end": 9128,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>rowClicked will be removed, please use ibRowClicked instead</p>\n"
                        }
                    ],
                    "line": 261,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "sortChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\ndeprecated\nObsolete, use effects interception instead\n",
                    "description": "<p>deprecated\nObsolete, use effects interception instead</p>\n",
                    "line": 242,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_filterSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 278,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_paginatorSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 277,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_sortSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 279,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "alignEnum",
                    "defaultValue": "IbTableCellAligns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 267
                },
                {
                    "name": "columnFilter",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 271
                },
                {
                    "name": "currentPagination",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 270
                },
                {
                    "name": "defaultIconSet",
                    "defaultValue": "{\n    edit: 'edit',\n    delete: 'delete'\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 227
                },
                {
                    "name": "filterableTitles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTableTitles[]",
                    "optional": false,
                    "description": "",
                    "line": 265
                },
                {
                    "name": "filteredData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTableItem[]",
                    "optional": false,
                    "description": "",
                    "line": 269
                },
                {
                    "name": "ibStickyArea",
                    "defaultValue": "IbStickyAreas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 275
                },
                {
                    "name": "ibTableActionsPosition",
                    "defaultValue": "IbTableActionsPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 274
                },
                {
                    "name": "numOfElements",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 272
                },
                {
                    "name": "rowForms",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UntypedFormGroup[]",
                    "optional": false,
                    "description": "",
                    "line": 273
                },
                {
                    "name": "rowIconSet",
                    "defaultValue": "Object.assign({}, this.defaultIconSet)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 236
                },
                {
                    "name": "sortedData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTableItem[]",
                    "optional": false,
                    "description": "",
                    "line": 268
                },
                {
                    "name": "totalRow$",
                    "defaultValue": "new Observable<IbTableTotalRowState[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 276
                },
                {
                    "name": "typeEnum",
                    "defaultValue": "IbTableTitlesTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 266
                }
            ],
            "methodsClass": [
                {
                    "name": "_sortData",
                    "args": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "emitChange",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 404,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "emitChange",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "csvExport",
                    "args": [
                        {
                            "name": "filteredData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "titles",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 667,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filteredData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "titles",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "export",
                    "args": [
                        {
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 578,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormValues",
                    "args": [
                        {
                            "name": "dataset",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'all'"
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 373,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataset",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'all'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedRows",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 574,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isValidForm",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 387,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 333,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 327,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 290,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pageChangeHandle",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 529,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "paginationHandle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 550,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pdfExport",
                    "args": [
                        {
                            "name": "body",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "titles",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 647,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "body",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "titles",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 525,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "rowForm",
                    "args": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 369,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFilter",
                    "args": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "indexToSet",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        },
                        {
                            "name": "redux",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        },
                        {
                            "name": "tableName",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 496,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "indexToSet",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "redux",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tableName",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortData",
                    "args": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "emitChange",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 394,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "emitChange",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "xlsxExport",
                    "args": [
                        {
                            "name": "filteredData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "titles",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 658,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filteredData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "titles",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "declare global{\n  interface Navigator {\n    msSaveBlob: (blob: Blob, filename: string) => void\n  }\n}\n\nimport { Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { Sort } from '@angular/material/sort';\nimport { IbStickyAreas, IbTableAction, IbTableActionsPosition, IbTableCellAligns, IbTableTitles, IbTableTitlesTypes } from './models/titles.model';\nimport { IbTemplateModel } from './models/template.model';\nimport { Store } from '@ngrx/store';\nimport Papa from 'papaparse';\nimport jsPDF, { jsPDFOptions } from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport * as XLSX from 'xlsx';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IbTableItem } from './models/table-item.model';\nimport { UntypedFormBuilder, UntypedFormControl, UntypedFormGroup } from '@angular/forms';\nimport { formatDate } from '@angular/common';\nimport { ibTableSelectFilters, ibTableSelectPaginator, ibTableSelectSort, ibTableSelectTotalRow } from './store/selectors/table.selectors';\nimport { ibTableActionAddFilterField, ibTableActionLoadConfig, ibTableActionSelectSortingField, ibTableActionSetPaginator } from './store/actions/table.actions';\nimport { Router } from '@angular/router';\nimport { Observable, Subscription } from 'rxjs';\nimport { IbTableTotalRowState } from './store/reducers/table.reducer';\n\n@Component({\n  selector: 'ib-table',\n  template: `\n    <div fxLayout=\"column\" class=\"ib-table\" >\n      <div\n        fxFlex\n        ib-table-actions\n        fxLayout=\"row\"\n        fxLayoutAlign=\"end center\"\n        fxLayoutGap=\"20px\"\n        [structureTemplates]=\"structureTemplates\"\n        [context]=\"this\"\n        [hasAdd]=\"hasAdd\"\n        [hasExport]=\"hasExport\"\n        [selectableRows]=\"selectableRows\"\n        [ngStyle]=\"{\n          'padding-bottom': (actions.length > 0 || hasAdd || hasExport) ? '5px' : '0px'\n        }\"\n        [actions]=\"actions\"\n        *ngIf=\"[ibTableActionsPosition.BOTH, ibTableActionsPosition.TOP].indexOf(actionsPosition) > -1\"\n        (add)=\"add.emit()\"\n        (export)=\"export($event)\"\n      >\n      </div>\n      <div class=\"ib-table-container\"\n        [ngStyle]=\"{\n          'overflow-x': (stickyAreas.length > 0) ? 'unset' : 'auto'\n        }\"\n      >\n        <table\n          matSort\n          (matSortChange)=\"sortData($event)\"\n          [matSortActive]=\"currentSort ? currentSort.active : null\"\n          [matSortDirection]=\"currentSort ? currentSort.direction : null\"\n          style=\"width:100%;\" cellpadding=\"0\" cellspacing=\"0\">\n\n          <!--HEADER-->\n          <thead [class.ib-header-sticky]=\"stickyAreas.includes(ibStickyArea.HEADER)\">\n            <tr class=\"table-header\"\n              ib-table-header\n              [table]=\"this\"\n              [titles]=\"titles\"\n              [selectableRows]=\"selectableRows\"\n              [templateHeaders]=\"templateHeaders\"\n              [templateButtons]=\"templateButtons\"\n              [columnFilter]=\"columnFilter\"\n              [hasEdit]=\"hasEdit\"\n              [hasDelete]=\"hasDelete\"\n              [hasConfig]=\"hasConfig\"\n              [currentSort]=\"currentSort\"\n              (handleSetFilter)=\"setFilter($event.key, $event.value, $event.indexToSet)\"\n              [stickyAreas]=\"stickyAreas\"\n              [tableName]=\"tableName\"\n            ></tr>\n          </thead>\n\n          <!--ROWS-->\n          <tbody\n          >\n            <tr\n              ib-table-row\n              class=\"table-row\"\n              [ngClass]=\"rowClass(item)\"\n              [iconSet]=\"rowIconSet\"\n              *ngFor=\"let item of sortedData\"\n              [item]=\"item\"\n              [titles]=\"titles\"\n              [customItemTemplate]=\"customItemTemplate\"\n              [selectableRows]=\"selectableRows\"\n              [templateButtons]=\"templateButtons\"\n              [formRow]=\"rowForm(item)\"\n              [hasEdit]=\"hasEdit\"\n              [hasDelete]=\"hasDelete\"\n              [deleteConfirm]=\"deleteConfirm\"\n              [stickyAreas]=\"stickyAreas\"\n              (rowChecked)=\"rowChecked.emit($event)\"\n              (click)=\"rowClicked.emit(item)\"\n              (edit)=\"edit.emit($event)\"\n              (delete)=\"delete.emit($event)\"\n            >\n            </tr>\n\n          <tr *ngIf=\"sortedData.length === 0\">\n            <td\n              [attr.colspan]=\"titles.length + templateButtons.length + (selectableRows ? 1 : 0) + (hasEdit ? 1 : 0) + (hasDelete ? 1 : 0) + 1\"\n              style=\"text-align: center;\"\n            >\n              <br><br>{{ 'shared.ibTable.noData' | translate }}<br><br>\n            </td>\n          </tr>\n\n          <tr\n            ib-table-total-row\n            *ngIf=\"hasFooter\"\n            class=\"table-row\"\n            [class.ib-footer-sticky]=\"stickyAreas.includes(ibStickyArea.FOOTER)\"\n            [titles]=\"titles\"\n            [selectableRows]=\"selectableRows\"\n            [templateButtons]=\"templateButtons\"\n            [hasEdit]=\"hasEdit\"\n            [sortedData]=\"sortedData\"\n            [filteredData]=\"filteredData\"\n            [hasDelete]=\"hasDelete\"\n            [totalRowDef]=\"totalRow$ | async\"\n            [tableName]=\"tableName\"\n            ></tr>\n          </tbody>\n        </table>\n      </div>\n      <ng-container\n        *ngTemplateOutlet=\"((structureTemplates['paginatorTemplate'] != null) ? structureTemplates['paginatorTemplate'] : defaultPaginatorTemplate);\n        context: this\"\n      ></ng-container>\n      <ng-template #defaultPaginatorTemplate>\n        <ib-table-paginator\n          *ngIf=\"hasPaginator\"\n          [numOfElements]=\"numOfElements\"\n          [paginationInfo]=\"currentPagination\"\n          (pageChangeHandle)=\"pageChangeHandle($event)\"\n          [elemForPage]=\"currentPagination.pageSize\">\n        </ib-table-paginator>\n      </ng-template>\n      <div\n        fxFlex\n        ib-table-actions\n        fxLayout=\"row\"\n        fxLayoutAlign=\"end center\"\n        fxLayoutGap=\"20px\"\n        [structureTemplates]=\"structureTemplates\"\n        [context]=\"this\"\n        [hasAdd]=\"hasAdd\"\n        [hasExport]=\"hasExport\"\n        [selectableRows]=\"selectableRows\"\n        [actions]=\"actions\"\n        *ngIf=\"[ibTableActionsPosition.BOTH, ibTableActionsPosition.BOTTOM].indexOf(actionsPosition) > -1\"\n        (add)=\"add.emit()\"\n        (export)=\"export($event)\"\n      >\n      </div>\n    </div>\n  `,\n  styleUrls: ['./table.component.css']\n})\nexport class IbTableComponent implements OnChanges, OnInit, OnDestroy {\n\n  // input necessari\n  @Input() customItemTemplate: any;\n  @Input() titles: IbTableTitles[] = [];\n  @Input() items: IbTableItem[] = [];\n\n  /**\n   * @deprecated enableReduxStore will be removed, please use hasConfig instead\n   */\n  @Input() enableReduxStore = false;\n  @Input() currentSort: any = {}; // this input can override redux store. Can we remove it?\n  @Input() selectableRows = true;\n\n  /**\n   * @deprecated hasAdd will be removed, please use actions instead\n   */\n  @Input() hasAdd = false;\n  /**\n   * @deprecated hasEdit will be removed, please use useContextColumn instead\n   */\n  @Input() hasEdit = false;\n  /**\n   * @deprecated hasDelete will be removed, please use useContextColumn instead\n   */\n  @Input() hasDelete = false;\n  @Input() hasExport = false;\n\n  /**\n   * @deprecated hasPaginator will be removed, please use tableDef.paginator.hide instead\n   */\n  @Input() hasPaginator = true;\n  @Input() hasFooter = true;\n  @Input() hasConfig = true;\n  @Input() actions: IbTableAction[] = [];\n  @Input() stickyAreas = [];\n\n  @Input() structureTemplates = {}; // exportTemplate, paginatorTemplate\n  /**\n   * @deprecated templateButtons will be removed, please use useContextColumn instead\n   */\n  @Input() templateButtons: IbTemplateModel[] = [];\n  @Input() templateHeaders: any = {};\n  /** { columnName: TemplateRef } */\n  @Input() tableName = '';\n  @Input() pdfCustomStyles = {};\n  @Input() pdfSetup: jsPDFOptions = {\n    orientation: 'l',\n    unit: null,\n    format: null\n  };\n\n  /**\n   * @deprecated deleteConfirm will be removed, please use useContextColumn instead\n   */\n  @Input() deleteConfirm = true;\n  @Input() actionsPosition = IbTableActionsPosition.BOTH;\n  defaultIconSet = {\n    edit: 'edit',\n    delete: 'delete'\n  };\n\n  /**\n   * @deprecated iconSet will be removed, please use useContextColumn instead\n   */\n  @Input() iconSet = this.defaultIconSet;\n  rowIconSet = Object.assign({}, this.defaultIconSet);\n  // Output necessari\n  @Output() filterChange: EventEmitter<any> = new EventEmitter<any>();\n  /** deprecated\n   * Obsolete, use effects interception instead\n   */\n  @Output() sortChange: EventEmitter<any> = new EventEmitter<any>();\n\n\n  /**\n   * @deprecated add will be removed, please use actions instead\n   */\n  @Output() add: EventEmitter<any> = new EventEmitter<any>();\n  /**\n   * @deprecated edit will be removed, please use useContextColumn instead\n   */\n  @Output() edit: EventEmitter<any> = new EventEmitter<any>();\n  /**\n   * @deprecated delete will be removed, please use useContextColumn instead\n   */\n  @Output() delete: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * @deprecated rowClicked will be removed, please use ibRowClicked instead\n   */\n  @Output() rowClicked: EventEmitter<any> = new EventEmitter<any>();\n  @Output() rowChecked: EventEmitter<any> = new EventEmitter<any>();\n\n  /*objectKeys = Object.keys;*/\n  filterableTitles: IbTableTitles[] = [];\n  typeEnum = IbTableTitlesTypes;\n  alignEnum = IbTableCellAligns;\n  sortedData: IbTableItem[];\n  filteredData: IbTableItem[];\n  currentPagination: any = {};\n  columnFilter = {};\n  numOfElements = 0;\n  rowForms: UntypedFormGroup[] = [];\n  ibTableActionsPosition = IbTableActionsPosition;\n  ibStickyArea = IbStickyAreas;\n  totalRow$ = new Observable<IbTableTotalRowState[]>();\n  private _paginatorSub: Subscription;\n  private _filterSub: Subscription;\n  private _sortSub: Subscription;\n  @Input() rowClass = (item: IbTableItem) => ({});\n\n\n  constructor(\n    private store: Store<any>,\n    private translate: TranslateService,\n    private fb: UntypedFormBuilder,\n    private router: Router\n    ) { }\n\n  ngOnInit() {\n    if(!this.tableName){\n      const fullUrl = this.router['location']._platformLocation?.location.pathname;\n      console.warn(`[ibTable] please set a unique tableName input value or ${fullUrl} will be used as unique key for config storage`);\n      this.tableName = fullUrl;\n    }\n    this.store.dispatch(ibTableActionLoadConfig({ configName: null, tableName: this.tableName }));\n\n    this.totalRow$ = this.store.select(ibTableSelectTotalRow(this.tableName));\n\n    this._paginatorSub = this.store.select(ibTableSelectPaginator(this.tableName)).subscribe(paginator => {\n      this.currentPagination = {\n        pageIndex: paginator?.pageIndex || 0,\n        pageSize: paginator?.pageSize || 10,\n        length: paginator?.length,\n      };\n    });\n\n    this._sortSub = this.store.select(ibTableSelectSort(this.tableName))\n      .subscribe(sort => {\n        this.currentSort = {\n          active: sort?.columnName,\n          direction: sort?.direction,\n        };\n        this._sortData(this.currentSort);\n    });\n\n    this._filterSub = this.store.select(ibTableSelectFilters(this.tableName)).subscribe(data => {\n      if (!data) {\n        return;\n      }\n      this.resetFilters();\n      data.forEach(f => this.setFilter(f.columnName, f.value, this.currentPagination.pageIndex || 0, false, this.tableName));\n      this.pageChangeHandle(this.currentPagination);\n    });\n  }\n\n  ngOnDestroy() {\n    this._paginatorSub.unsubscribe();\n    this._filterSub.unsubscribe();\n    this._sortSub.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.iconSet && changes.iconSet.currentValue){\n      this.rowIconSet = Object.assign({}, this.defaultIconSet, changes.iconSet.currentValue);\n    }\n\n    let triggerRefresh = false;\n    if (changes.items && changes.items.currentValue) {\n      this.items = changes.items.currentValue;\n      this.sortedData = this.items.slice();\n      triggerRefresh = true;\n      this.rowForms = [];\n      for (const i of this.items) {\n        const rowGroup = {\n          isChecked: new UntypedFormControl(i.ibTableItemSelected),\n        };\n        for (const k of this.titles.map(h => h.key)) {\n          rowGroup[k] = new UntypedFormControl(i[k]);\n        }\n        this.rowForms.push(this.fb.group(rowGroup));\n      }\n    }\n\n    if (changes.titles && changes.titles.currentValue) {\n      this.filterableTitles = changes.titles.currentValue.filter(el => el.filterable);\n    }\n\n    if (changes.currentSort && changes.currentSort.currentValue) {\n      this.currentSort = changes.currentSort.currentValue;\n      triggerRefresh = true;\n    }\n\n    if (triggerRefresh) {\n      this.pageChangeHandle(this.currentPagination);\n    }\n  }\n\n  rowForm(item) {\n    return this.rowForms[this.items.indexOf(item)];\n  }\n\n  getFormValues(dataset = 'all') {\n    let filteredData = this.sortedData;\n\n    if (dataset === 'selected') {\n      filteredData = this.getSelectedRows();\n    }\n\n    const rowData = [];\n    for (const i of filteredData) {\n      rowData.push(this.rowForm(i).value);\n    }\n    return rowData;\n  }\n\n  isValidForm() {\n    for (const r of this.rowForms) {\n      if (!r.valid) { return false; }\n    }\n    return true;\n  }\n\n  sortData(sort: Sort, emitChange: boolean = true) {\n    this.store.dispatch(ibTableActionSelectSortingField({\n      tableName: this.tableName,\n      options: {\n        direction: sort.direction,\n        columnName: sort.active\n      }\n    }));\n  }\n\n  _sortData(sort: Sort, emitChange: boolean = true) {\n    if (emitChange) {\n      this.sortChange.emit(sort);\n    }\n    this.currentSort = sort;\n\n    this.sortedData = this.items.slice();\n\n    for (const k in this.columnFilter) {\n      if (!this.columnFilter[k] && this.columnFilter[k] !== false) {\n        delete this.columnFilter[k];\n      }\n    }\n    if (Object.keys(this.columnFilter).length > 0) {\n\n      this.sortedData = this.sortedData.filter(el => {\n        let include = true;\n        // tslint:disable-next-line: forin\n        for (const k in this.columnFilter) {\n          /*TODO INSERT COLUMN TYPE HERE */\n          switch (this.titles.find(t => t.key === k).type) {\n            case IbTableTitlesTypes.ANY:\n              const translated = this.translate.instant(el[k]);\n              if (!(translated && translated.includes && translated.toLowerCase().includes(this.columnFilter[k].toLowerCase()))) {\n                include = false;\n              }\n              break;\n            case IbTableTitlesTypes.STRING:\n            case IbTableTitlesTypes.CUSTOM:\n              if (!(el[k] && el[k].includes && el[k].toLowerCase().includes(this.columnFilter[k].toLowerCase()))) {\n                include = false;\n              }\n              break;\n            case IbTableTitlesTypes.NUMBER:\n            case IbTableTitlesTypes.INPUT_NUMBER:\n              for (const cond of this.columnFilter[k]) {\n                include = eval(`(${el[k]} ${cond.condition} ${cond.value})`);\n                if (!include) {\n                  break;\n                }\n              }\n              break;\n            case IbTableTitlesTypes.DATE:\n              for (const cond of this.columnFilter[k]) {\n                const condDate = new Date(cond.value);\n                const valueDate = new Date(el[k]);\n                // we use formatDate according to format showed on table-row component template.\n                include = eval(`('${formatDate(valueDate, 'yyyy-MM-dd', 'it')}' ${cond.condition} '${formatDate(condDate, 'yyyy-MM-dd', 'it')}')`);\n                if (!include) {\n                  break;\n                }\n              }\n              break;\n            case IbTableTitlesTypes.BOOLEAN:\n              include = (el[k] === this.columnFilter[k]);\n              break;\n            default:\n              include = true;\n          }\n          if (!include) {\n            break;\n          }\n\n        }\n        return include;\n      });\n\n    }\n    this.numOfElements = this.sortedData.length;\n    this.store.dispatch(ibTableActionSetPaginator({\n      state: {\n        length: this.sortedData.length,\n        pageIndex: this.currentPagination.pageIndex,\n        pageSize: this.currentPagination.pageSize\n      },\n      tableName: this.tableName\n    }));\n\n    if (!sort || !sort.active || sort.direction === '') {\n      this.currentSort = {};\n      this.paginationHandle();\n      return;\n    }\n\n    this.sortedData = this.sortedData.sort((a, b) => {\n      const isAsc = sort.direction === 'asc';\n      return compare(a[sort.active], b[sort.active], isAsc);\n    });\n\n    this.paginationHandle();\n  }\n\n  setFilter(key, value, indexToSet = 0, redux = true, tableName = null) {\n    this.columnFilter[key] = value;\n    this.currentPagination.pageIndex = indexToSet;\n    if (redux) {\n      if (!tableName) {\n        if (!tableName && this.tableName === 'default_table_name') {\n          console.warn('[IbTableComponent] missing table name on redux filter call');\n        }\n        tableName = this.tableName;\n      }\n\n      // this.store.dispatch(TableFiltersActions.addFilterToTable({\n      //   tableName,\n      //   filterName: key,\n      //   filterValue: value\n      // }));\n\n      this.pageChangeHandle(this.currentPagination);\n      this.store.dispatch(ibTableActionAddFilterField({\n        state: {\n          columnName: key,\n          value,\n        },\n        tableName\n      }));\n    }\n\n  }\n\n  resetFilters() {\n    this.columnFilter = {};\n  }\n\n  pageChangeHandle(data) {\n    // this.store.dispatch(TableFiltersActions.addPaginatorFiltersToTable({\n    //   tableName: this.tableName,\n    //   previousPageIndex: data.previousPageIndex,\n    //   pageIndex: data.pageIndex,\n    //   pageSize: data.pageSize,\n    //   lengthP: data.length\n    // }));\n\n    this.store.dispatch(ibTableActionSetPaginator({\n      state: {\n        pageIndex: data.pageIndex,\n        pageSize: data.pageSize,\n        length: data.length\n      },\n      tableName: this.tableName\n    }));\n    // this.currentPagination = data;\n    this._sortData(this.currentSort, false);\n  }\n\n  paginationHandle() {\n    /*\n    * all'interno di data ho questo:\n    * {\n    *   length: 15\n        pageIndex: 0\n        pageSize: 5 (elementi per pagina)\n        previousPageIndex: 0\n      }\n    */\n\n    const data = this.currentPagination;\n    const paginatedData = [];\n    // scorro tutte le pagine della tabella\n    for (let i = data.pageIndex * data.pageSize; i < (data.pageIndex + 1) * data.pageSize; i++) {\n      if (i >= this.sortedData.length) {\n        break;\n      }\n      paginatedData.push(this.sortedData[i]);\n    }\n    this.filteredData = this.sortedData.slice();\n    this.sortedData = paginatedData;\n  }\n\n  getSelectedRows() {\n    return this.items.filter(sd => this.rowForm(sd).controls.isChecked.value);\n  }\n\n  async export({ format, dataset }) {\n    const previousPagination = this.currentPagination;\n    if (dataset === 'all') {\n      const pagination = {\n        tableName: this.tableName,\n        previousPageIndex: 0,\n        pageIndex: 0,\n        pageSize: this.items.length,\n        lengthP: this.items.length\n      };\n      // this.store.dispatch(TableFiltersActions.addPaginatorFiltersToTable(pagination));\n\n      this.store.dispatch(ibTableActionSetPaginator({\n        state: {\n          pageIndex: 0,\n          pageSize: this.items.length,\n          length: this.items.length,\n        },\n        tableName: this.tableName\n      }));\n\n\n      this.currentPagination = pagination;\n      this.sortData(this.currentSort, false);\n    }\n\n    const keys = this.titles.map(h => h.key);\n    const getValueFromKey = (row, key) => {\n      const value = row[key];\n      const h = this.titles.find(t => t.key === key);\n      return value;\n    };\n    let filteredData = this.sortedData\n      .map(\n        row => Object.keys(row)\n          .filter(key => keys.includes(key))\n          .reduce((o, key) => ({\n            ...o,\n            [key]: getValueFromKey(row, key)\n          }), {})\n    );\n\n    if (dataset === 'selected') {\n      filteredData = this.getSelectedRows();\n    }\n\n    const translatedHeaders = await Promise.all(this.titles.map(async t => ({\n      value: await this.translate.get(t.value).toPromise(),\n      key: t.key,\n    })));\n\n    if (format === 'csv') {\n      this.csvExport(filteredData, translatedHeaders);\n    }\n\n    if (format === 'pdf') {\n      this.pdfExport(filteredData, translatedHeaders);\n    }\n\n    if (format === 'xlsx') {\n      this.xlsxExport(filteredData, translatedHeaders);\n    }\n\n    if (dataset === 'all') {\n      this.currentPagination = previousPagination;\n      this.sortData(this.currentSort, false);\n    }\n  }\n\n  pdfExport(body, titles) {\n    const columns = titles.map(t => ({ header: t.value, dataKey: t.key }));\n    const doc = new jsPDF(this.pdfSetup.orientation, this.pdfSetup.unit, this.pdfSetup.format);\n    autoTable(doc, {\n      ...this.pdfCustomStyles,\n      body,\n      columns,\n    });\n    doc.save(this.tableName + '.pdf');\n  }\n\n  xlsxExport(filteredData, titles) {\n    const header = titles.reduce((o, t) => ({ ...o, [t.key]: t.value }), {});\n    const data = [header, ...filteredData];\n    const ws = XLSX.utils.json_to_sheet(data, { skipHeader: true });\n    const wb: XLSX.WorkBook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, this.tableName);\n    XLSX.writeFile(wb, this.tableName + '.xlsx');\n  }\n\n  csvExport(filteredData, titles) {\n    const nameFromKey = (key) =>\n      titles.find(t => t.key === key).value;\n    const data = filteredData.map(row => Object.keys(row).reduce((o, key) => ({ ...o, [nameFromKey(key)]: row[key] }), {}));\n    const csv = Papa.unparse(data, {\n      quotes: true,\n      delimiter: ';',\n    });\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n\n    if (navigator.msSaveBlob) { // IE 10+\n      navigator.msSaveBlob(blob, this.tableName + '.csv');\n    } else {\n      const link = document.createElement('a');\n      if (link.download !== undefined) {\n        const url = URL.createObjectURL(blob);\n        link.setAttribute('href', url);\n        link.setAttribute('download', this.tableName + '.csv');\n        link.style.visibility = 'hidden';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      }\n    }\n  }\n}\n\nfunction compare(a, b, isAsc) {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "ib-table .hover:hover{\n  opacity: .5 !important;\n}\n\n.mat-sort-header-container {\n  align-items: center;\n  cursor: none !important;\n}\nth {\n  color: #555;\n  font-weight: normal;\n  padding: 15px;\n  margin-bottom: 20px;\n}\n\ntable ::ng-deep .table-header > th.ib-column-sticky {\n  z-index: 100;\n  background-color: inherit;\n}\n\nthead.ib-header-sticky {\n  position: sticky;\n  top: 0;\n  z-index: 109;\n}\n\ntable ::ng-deep .ib-footer-sticky {\n  position:sticky;\n  bottom: 0;\n  z-index: 109;\n}\n\n/* TODO(mdc-migration): The following rule targets internal classes of paginator that may no longer apply for the MDC version. */\nmat-paginator ::ng-deep .mat-mdc-paginator-container {\n  justify-content: flex-start !important;\n  background-color: inherit;\n}\n/* TODO(mdc-migration): The following rule targets internal classes of paginator that may no longer apply for the MDC version. */\nmat-paginator ::ng-deep button {\n  transform: scale(0.8);\n}\n/* TODO(mdc-migration): The following rule targets internal classes of form-field that may no longer apply for the MDC version. */\nmat-paginator ::ng-deep .mat-form-field-underline {\n  display: none;\n}\n/* TODO(mdc-migration): The following rule targets internal classes of input that may no longer apply for the MDC version. */\nmat-paginator ::ng-deep .mat-input-flex {\n  background-color: gray;\n  border-radius: 10px;\n  padding-left: 15px;\n  padding-right: 10px;\n  padding-bottom: 0;\n  margin-top: 10px;\n}\n/* TODO(mdc-migration): The following rule targets internal classes of input that may no longer apply for the MDC version. */\nmat-paginator ::ng-deep .mat-input-infix {\n  border-top: 0 !important;\n}\n.table-header-title-custom ::ng-deep button{\n  cursor: default;\n}\n\n.table-header-title{\n  text-align: left;\n  cursor: pointer;\n}\n",
                    "styleUrl": "./table.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "UntypedFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 280,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "UntypedFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "IbTableConfLoadComponent",
            "id": "component-IbTableConfLoadComponent-5e6f883cc48712d7d0c889776a2aa571af384d94dfdedd03b9571ea7ff4841808c5e705055bb3f371d48fee7df70212f68cc5c73ff50be858872ce786f8a76dd",
            "file": "src/app/inobeta-ui/ui/table/components/table-conf/table-conf-load.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-table-conf-save",
            "styleUrls": [],
            "styles": [
                "\n    .table-conf-line{\n      display: flex;\n    }\n    .table-conf-first{\n      flex: 1;\n      display: flex;\n      align-items: center;\n    }\n  "
            ],
            "template": "<h2 mat-dialog-title>{{ data.title | translate }}</h2>\n<mat-dialog-content style=\"min-width:350px;min-height: 10vh;\">\n  <div>\n    <div *ngFor=\"let config of configs\">\n      <div class=\"table-conf-line\">\n        <div class=\"table-conf-first\">\n          <button (click)=\"toggleDefault(config)\" mat-icon-button>\n            <mat-icon *ngIf=\"config.isDefault; else notDefault\">star</mat-icon>\n            <ng-template #notDefault><mat-icon>star_outline</mat-icon></ng-template>\n          </button>\n          {{config.name}}\n        </div>\n        <div class=\"table-conf-second\">\n          <button (click)=\"loadConfig(config)\" color=\"accent\" mat-icon-button>\n            <mat-icon>upload</mat-icon>\n          </button>\n          <button (click)=\"deleteConfig(config)\" color=\"warn\" mat-icon-button>\n            <mat-icon>delete</mat-icon>\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"!configs.length\">\n      {{ 'shared.ibTable.loadConf.noConfig' | translate }}\n    </div>\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n  <button\n    mat-button\n    [mat-dialog-close]=\"false\">\n    {{ 'shared.ibModal.close' | translate }}\n  </button>\n</mat-dialog-actions>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<IbTableConfLoadComponent>",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapConfigs",
                    "args": [
                        {
                            "name": "configs",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "configs",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDefault",
                    "args": [
                        {
                            "name": "config",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Store } from '@ngrx/store';\nimport { IbTableConfService } from '../../services/table-conf.service';\n\n@Component({\n  selector: 'ib-table-conf-save',\n  template: `\n    <h2 mat-dialog-title>{{ data.title | translate }}</h2>\n    <mat-dialog-content style=\"min-width:350px;min-height: 10vh;\">\n      <div>\n        <div *ngFor=\"let config of configs\">\n          <div class=\"table-conf-line\">\n            <div class=\"table-conf-first\">\n              <button (click)=\"toggleDefault(config)\" mat-icon-button>\n                <mat-icon *ngIf=\"config.isDefault; else notDefault\">star</mat-icon>\n                <ng-template #notDefault><mat-icon>star_outline</mat-icon></ng-template>\n              </button>\n              {{config.name}}\n            </div>\n            <div class=\"table-conf-second\">\n              <button (click)=\"loadConfig(config)\" color=\"accent\" mat-icon-button>\n                <mat-icon>upload</mat-icon>\n              </button>\n              <button (click)=\"deleteConfig(config)\" color=\"warn\" mat-icon-button>\n                <mat-icon>delete</mat-icon>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div *ngIf=\"!configs.length\">\n          {{ 'shared.ibTable.loadConf.noConfig' | translate }}\n        </div>\n      </div>\n    </mat-dialog-content>\n    <mat-dialog-actions align=\"end\">\n      <button\n        mat-button\n        [mat-dialog-close]=\"false\">\n        {{ 'shared.ibModal.close' | translate }}\n      </button>\n    </mat-dialog-actions>\n  `,\n  styles: [`\n    .table-conf-line{\n      display: flex;\n    }\n    .table-conf-first{\n      flex: 1;\n      display: flex;\n      align-items: center;\n    }\n  `]\n})\nexport class IbTableConfLoadComponent {\n  configs = [];\n\n  constructor(\n    public dialogRef: MatDialogRef<IbTableConfLoadComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private tableConf: IbTableConfService,\n    private store: Store<any>,\n  ) {\n    const [error, _, configs] = this.tableConf.getConfigsByTableName(this.data.tableName);\n    if (error) {\n      return;\n    }\n    this.mapConfigs(configs);\n  }\n\n  mapConfigs(configs) {\n    this.configs = Object.entries<any>(configs)\n      .map(([name, config]) => ({ name, isDefault: config?.default }))\n      .sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  loadConfig(config) {\n    this.dialogRef.close(config);\n  }\n\n  deleteConfig(config) {\n    const [error, configs] = this.tableConf.deleteConfig(this.data.tableName, config.name);\n    if (error) {\n      return;\n    }\n    this.mapConfigs(configs);\n  }\n\n  toggleDefault(config) {\n    const [error, configs] = this.tableConf.toggleDefault(this.data.tableName, config.name);\n    if (error) {\n      return;\n    }\n    this.mapConfigs(configs);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .table-conf-line{\n      display: flex;\n    }\n    .table-conf-first{\n      flex: 1;\n      display: flex;\n      align-items: center;\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<IbTableConfLoadComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tableConf",
                        "type": "IbTableConfService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<IbTableConfLoadComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tableConf",
                        "type": "IbTableConfService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "IbTableConfSaveComponent",
            "id": "component-IbTableConfSaveComponent-82d6a9e68972a7f768e04a3fde9e858e3e83de5a15b45252f34e5713bd9462fe99e9f28f8f3956f223300fbd04311166f605b0927c7d34a5b82313d99f32ac5a",
            "file": "src/app/inobeta-ui/ui/table/components/table-conf/table-conf-save.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-table-conf-save",
            "styleUrls": [],
            "styles": [],
            "template": "<h2 mat-dialog-title>{{ data.title | translate }}</h2>\n<mat-dialog-content style=\"min-width:350px;min-height: 10vh;\">\n  <div>{{ data.message | translate }}</div>\n  <ib-material-form\n    #saveConfForm\n    [fields]=\"fields\"\n    rowHeight=\"85px\"\n  ></ib-material-form>\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n  <button\n    *ngFor=\"let btn of data.actions\"\n    mat-raised-button\n    [color]=\"btn.color || 'basic'\"\n    [mat-dialog-close]=\"btn.value\">\n    {{ btn.label | translate }}\n  </button>\n  <button\n    *ngIf=\"data.hasNo\"\n    mat-raised-button\n    [mat-dialog-close]=\"false\">\n    {{ 'shared.ibModal.no' | translate }}\n  </button>\n  <button\n    *ngIf=\"data.hasYes\"\n    mat-raised-button\n    color=\"primary\"\n    [disabled]=\"!saveConfForm.form.valid\"\n    [mat-dialog-close]=\"{data: saveConfForm.form.getRawValue(), selectedConfig: selectedConfig}\">\n    {{ 'shared.ibModal.yes' | translate }}\n  </button>\n</mat-dialog-actions>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<IbTableConfSaveComponent>",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFormControlBase<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "saveConfForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbMaterialFormComponent",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'saveConfForm', {static: true}"
                        }
                    ]
                },
                {
                    "name": "selectedConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methodsClass": [
                {
                    "name": "checkConfigExists",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Inject, ViewChild} from '@angular/core';\nimport { AbstractControl, ValidatorFn } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Store } from '@ngrx/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport { take } from 'rxjs/operators';\nimport { IbFormControlBase } from '../../../forms';\nimport { IbMatCheckboxControl, IbMaterialFormComponent, IbMatRadioControl, IbMatTextboxControl } from '../../../material-forms';\nimport { IbTableConfService } from '../../services/table-conf.service';\nimport { ibTableCurrentConfSelector } from '../../store/selectors/table.selectors';\n\n@Component({\n  selector: 'ib-table-conf-save',\n  template: `\n    <h2 mat-dialog-title>{{ data.title | translate }}</h2>\n    <mat-dialog-content style=\"min-width:350px;min-height: 10vh;\">\n      <div>{{ data.message | translate }}</div>\n      <ib-material-form\n        #saveConfForm\n        [fields]=\"fields\"\n        rowHeight=\"85px\"\n      ></ib-material-form>\n    </mat-dialog-content>\n    <mat-dialog-actions align=\"end\">\n      <button\n        *ngFor=\"let btn of data.actions\"\n        mat-raised-button\n        [color]=\"btn.color || 'basic'\"\n        [mat-dialog-close]=\"btn.value\">\n        {{ btn.label | translate }}\n      </button>\n      <button\n        *ngIf=\"data.hasNo\"\n        mat-raised-button\n        [mat-dialog-close]=\"false\">\n        {{ 'shared.ibModal.no' | translate }}\n      </button>\n      <button\n        *ngIf=\"data.hasYes\"\n        mat-raised-button\n        color=\"primary\"\n        [disabled]=\"!saveConfForm.form.valid\"\n        [mat-dialog-close]=\"{data: saveConfForm.form.getRawValue(), selectedConfig: selectedConfig}\">\n        {{ 'shared.ibModal.yes' | translate }}\n      </button>\n    </mat-dialog-actions>`,\n})\nexport class IbTableConfSaveComponent {\n  fields: IbFormControlBase<any>[] = [];\n  selectedConfig: string;\n  @ViewChild('saveConfForm', {static: true}) saveConfForm: IbMaterialFormComponent;\n\n\n  constructor(\n    public dialogRef: MatDialogRef<IbTableConfSaveComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private tableConf: IbTableConfService,\n    private store: Store<any>,\n    private translate: TranslateService\n    ) {\n      this.store.select(ibTableCurrentConfSelector).pipe(take(1)).subscribe((selectedConfig = '') => {\n        this.selectedConfig = '';\n        const options = [{ key: 'new', value: 'shared.ibTable.saveConf.newConf'}];\n        let value = 'new';\n        const [table, configName] = selectedConfig.split('/') || [null, null];\n        if (selectedConfig.startsWith(this.data.tableName)){\n          options.push({ key: 'edit', value: `${this.translate.instant('shared.ibTable.saveConf.editConf')} (${configName})`});\n          value = 'edit';\n          this.selectedConfig = configName;\n        }\n        this.fields = [\n          new IbMatRadioControl({\n            key: 'selector',\n            options, value,\n            width: '100%',\n            change: (control) => {\n              control?.parent?.controls['name'].markAsTouched();\n              control?.parent?.controls['name'].updateValueAndValidity();\n              if(control?.value === 'new'){\n                control?.parent?.controls['name'].setValue('');\n              }\n              if(control?.value === 'edit'){\n                control?.parent?.controls['name'].setValue(this.selectedConfig);\n              }\n            }\n          }),\n          new IbMatCheckboxControl({key: 'default', label: 'shared.ibTable.saveConf.setAsDefault', value: true, width: '30%',}),\n          new IbMatTextboxControl({\n            key: 'name',\n            width: '70%',\n            value: this.selectedConfig || '',\n            label: 'shared.ibTable.saveConf.configName',\n            required: true,\n            validators: [this.checkConfigExists()]\n          })\n        ];\n      });\n    }\n\n\n\n    checkConfigExists(): ValidatorFn {\n      return (control: AbstractControl): {[key: string]: any} | null => {\n       if (this.saveConfForm?.form?.getRawValue().selector === 'new'\n              && control.value\n              && this.tableConf.loadConfig(this.data.tableName, control.value)\n              ) {\n          return {\n            customError: {\n              message: 'shared.ibTable.saveConf.configExists'\n            }\n          };\n        }\n      };\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<IbTableConfSaveComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tableConf",
                        "type": "IbTableConfService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<IbTableConfSaveComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tableConf",
                        "type": "IbTableConfService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "IbTableExampleComponent",
            "id": "component-IbTableExampleComponent-0bcdd36a40497d1b1ad667dfafa9997e4d495229a09acfafe9883e4ee47f2e90f2f0aedf8ab594e53f01393a4c37f8e3d497ac4dc4192c2eddb193044df26791",
            "file": "src/app/examples/table-example/table-with-redux/table-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-table-example",
            "styleUrls": [
                "./table-example.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "table-example.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "defaultValue": "[\n    {\n      label: 'test accent',\n      color: 'accent',\n      handler: (selectedItems) => this.consolePrint(selectedItems)\n    },\n    {\n      label: 'test warn',\n      color: 'warn',\n      handler: (selectedItems) => this.consolePrint(selectedItems)\n    },\n    {\n      label: 'test primary',\n      color: 'primary',\n      handler: (selectedItems) => this.consolePrint(selectedItems)\n    },\n    {\n      label: 'test link',\n      color: 'link',\n      handler: (selectedItems) => this.consolePrint(selectedItems)\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTableAction[]",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "ibTable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTableComponent",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'ibTable', {static: true}"
                        }
                    ]
                },
                {
                    "name": "ibTableActionsPosition",
                    "defaultValue": "IbTableActionsPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "items",
                    "defaultValue": "sampleData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTableItem[]",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "pdfCustomStyles",
                    "defaultValue": "{\n    headStyles: { fillColor: [232, 202, 232] },\n    columnStyles: { sender: { halign: 'center' }},\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 105
                },
                {
                    "name": "pdfSetup",
                    "defaultValue": "{\n    orientation: 'p'\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "selectableRows",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "tableName",
                    "defaultValue": "'pippo'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "titles",
                    "defaultValue": "[\n    {\n      key: 'guid',\n      value: 'GUID',\n      type: IbTableTitlesTypes.CUSTOM,\n      width: '20%',\n    },\n    {\n      key: 'picture',\n      value: 'Link',\n      type: IbTableTitlesTypes.STRING,\n      filterable: true,\n      width: '20%',\n    },\n    {\n      key: 'company',\n      value: 'Company',\n      type: IbTableTitlesTypes.ANY,\n      filterable: true,\n      width: '10%',\n    },\n    {\n      key: 'age',\n      value: 'Età',\n      type: IbTableTitlesTypes.NUMBER,\n      format: '1.0-0',\n      filterable: true,\n      width: '2%',\n      showTotalSum: true\n    },\n    {\n      key: 'isActive',\n      value: 'Attivo',\n      type: IbTableTitlesTypes.BOOLEAN,\n      filterable: true,\n      width: '10%'\n    },\n    {\n      key: 'balance',\n      value: 'Qt',\n      type: IbTableTitlesTypes.CUSTOM,\n      filterable: true,\n      placeHolderInput: 'Inserisci qt',\n      width: '10%',\n      showTotalSum: true\n    },\n    {\n      key: 'registered',\n      value: 'Data',\n      type: IbTableTitlesTypes.DATE,\n      filterable: true,\n      width: '10%'\n    },\n    {\n      key: 'label',\n      value: 'Etichetta',\n      type: IbTableTitlesTypes.TAG,\n      filterable: true,\n      width: '10%'\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "consolePrint",
                    "args": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBaseElem",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "rowClass",
                    "args": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ 'evidence-row': boolean; }",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setValidators",
                    "args": [
                        {
                            "name": "form",
                            "type": "UntypedFormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UntypedFormGroup",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "UntypedFormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stampa",
                    "args": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport { UntypedFormGroup, Validators } from '@angular/forms';\nimport { IbMatTextboxControl } from 'src/app/inobeta-ui/ui/material-forms/controls/textbox';\nimport { IbTableItem } from 'src/app/inobeta-ui/ui/table/models/table-item.model';\nimport { IbTableAction, IbTableActionsPosition, IbTableTitlesTypes } from 'src/app/inobeta-ui/ui/table/models/titles.model';\nimport { IbTableComponent } from 'src/app/inobeta-ui/ui/table/table.component';\nimport { sampleData } from '../json-data';\n\n@Component({\n  selector: 'ib-table-example',\n  templateUrl: 'table-example.component.html',\n  styleUrls: ['./table-example.component.css']\n})\n//ANY, HOUR, COMBOBOX\nexport class IbTableExampleComponent implements OnInit {\n  @ViewChild('ibTable', {static: true}) ibTable: IbTableComponent;\n  selectableRows = true;\n  tableName = 'pippo';\n  ibTableActionsPosition = IbTableActionsPosition;\n  titles = [\n    {\n      key: 'guid',\n      value: 'GUID',\n      type: IbTableTitlesTypes.CUSTOM,\n      width: '20%',\n    },\n    {\n      key: 'picture',\n      value: 'Link',\n      type: IbTableTitlesTypes.STRING,\n      filterable: true,\n      width: '20%',\n    },\n    {\n      key: 'company',\n      value: 'Company',\n      type: IbTableTitlesTypes.ANY,\n      filterable: true,\n      width: '10%',\n    },\n    {\n      key: 'age',\n      value: 'Età',\n      type: IbTableTitlesTypes.NUMBER,\n      format: '1.0-0',\n      filterable: true,\n      width: '2%',\n      showTotalSum: true\n    },\n    {\n      key: 'isActive',\n      value: 'Attivo',\n      type: IbTableTitlesTypes.BOOLEAN,\n      filterable: true,\n      width: '10%'\n    },\n    {\n      key: 'balance',\n      value: 'Qt',\n      type: IbTableTitlesTypes.CUSTOM,\n      filterable: true,\n      placeHolderInput: 'Inserisci qt',\n      width: '10%',\n      showTotalSum: true\n    },\n    {\n      key: 'registered',\n      value: 'Data',\n      type: IbTableTitlesTypes.DATE,\n      filterable: true,\n      width: '10%'\n    },\n    {\n      key: 'label',\n      value: 'Etichetta',\n      type: IbTableTitlesTypes.TAG,\n      filterable: true,\n      width: '10%'\n    }\n  ];\n  items: IbTableItem[] = sampleData;\n\n  actions: IbTableAction[] = [\n    {\n      label: 'test accent',\n      color: 'accent',\n      handler: (selectedItems) => this.consolePrint(selectedItems)\n    },\n    {\n      label: 'test warn',\n      color: 'warn',\n      handler: (selectedItems) => this.consolePrint(selectedItems)\n    },\n    {\n      label: 'test primary',\n      color: 'primary',\n      handler: (selectedItems) => this.consolePrint(selectedItems)\n    },\n    {\n      label: 'test link',\n      color: 'link',\n      handler: (selectedItems) => this.consolePrint(selectedItems)\n    }\n  ];\n  pdfCustomStyles = {\n    headStyles: { fillColor: [232, 202, 232] },\n    columnStyles: { sender: { halign: 'center' }},\n  };\n\n  pdfSetup = {\n    orientation: 'p'\n  };\n  constructor() { }\n\n\n  stampa(item) {\n    console.log(item);\n  }\n\n  ngOnInit(): void { }\n\n  consolePrint(item) {\n    console.log(item);\n    console.log(this.ibTable.isValidForm(), this.ibTable.getFormValues());\n  }\n\n  getBaseElem() {\n    return new IbMatTextboxControl({\n      key: 'balance',\n      label: 'qt',\n      type: 'number',\n      required: true,\n      validators: [Validators.min(0)]\n    });\n  }\n\n  setValidators(form: UntypedFormGroup) {\n    form.controls.balance.setValidators([Validators.required, Validators.min(1)]);\n    return form;\n  }\n\n  rowClass(item) {\n    return {\n      'evidence-row': item.guid === 'e8ab3af6-9725-4163-8706-476b5dd09dfb'\n    };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/*ib-table >>> .table-header{\n  background-color: #FF4931;\n}\nib-table >>> button.mat-sort-header-button,\nib-table >>> #select-row-name,\nib-table >>> #delete-row-name,\nib-table >>> .table-header-title{\n  font-family: 'Roboto', 'Regular', sans-serif;\n  color: #ffffff !important;\n}\nib-table >>> .table-row td, ib-table-header >>> .table-header-title {\n  border: none !important;\n}\nib-table >>> .mat-sort-header-arrow, ib-table >>> .table-sort-indicator {\n  color: #FCEE21 !important;\n}\nib-table >>> .table-row:hover > td{\n  color: #515151;\n  background-color: #F7F7F7;\n}\nib-table >>> td {\n  background-color: #ffffff;\n}\n*/\n.modal-selector {\n  position: absolute;\n  width: 150px;\n  height: 200px;\n  background-color: white;\n  border: 1px solid black;\n  color: black;\n  z-index: 100;\n}\n\n.modal-row {\n  border: 1px solid black;\n  background-color: yellow;\n}\n",
                    "styleUrl": "./table-example.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 112
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-template #rowActionTemplate let-item=\"item\" let-isChecked=\"isChecked\">\n  <span class=\"delete-button\" (click)=\"$event.stopPropagation();consolePrint({item: item, isChecked: isChecked})\">\n      <i class=\"material-icons ib-table-row-button\" matRipple>search</i>\n  </span>\n</ng-template>\n\n<ng-template #headerClickTemplate let-ibTable=\"ibTable\" let-col=\"col\">\n  <ib-table-header-popup\n    [ibTable]=\"ibTable\"\n    [col]=\"col\">\n  </ib-table-header-popup>\n</ng-template>\n\n\n<ng-template #exportTemplate let-ibTable=\"ibTable\" let-col=\"col\">\n  <!--example component customization-->\n  Clicca per esportare:&nbsp;\n  <ib-table-export\n    [selectableRows]=\"selectableRows\"\n    (export)=\"ibTable.export($event || {})\"\n    >\n  </ib-table-export>\n</ng-template>\n<ng-template #balanceTemplate let-item=\"item\" let-form=\"form\">\n  <ib-material-form-control\n    class=\"ibFormRow\"\n    [base]=\"getBaseElem()\"\n    [form]=\"setValidators(form)\"\n  ></ib-material-form-control>\n  </ng-template>\n<ib-table\n  #ibTable\n  [tableName]=\"tableName\"\n  [pdfCustomStyles]=\"pdfCustomStyles\"\n  [pdfSetup]=\"pdfSetup\"\n  [titles]=\"titles\"\n  [items]=\"items\"\n  [enableReduxStore]=\"true\"\n  [selectableRows]=\"selectableRows\"\n  [hasExport]=\"true\"\n  [hasAdd]=\"true\"\n  [hasEdit]=\"true\"\n  [hasDelete]=\"true\"\n  [hasFooter]=\"true\"\n  [customItemTemplate]=\"{ guid: lotTemplate, balance: balanceTemplate }\"\n  [templateButtons]=\"[{\n    template: rowActionTemplate,\n    columnName: 'Action'\n  }]\"\n  [templateHeaders]=\"{\n    'guid': headerClickTemplate\n  }\"\n  [actions]=\"actions\"\n  [actionsPosition]=\"ibTableActionsPosition.BOTTOM\"\n  [structureTemplates]=\"{\n    'exportTemplate': exportTemplate\n  }\"\n  [rowClass]=\"rowClass\"\n  (add)=\"consolePrint('clicked on new')\"\n  (edit)=\"consolePrint({ msg: 'edit click', data: $event})\"\n  (delete)=\"consolePrint({ msg: 'delete click', data: $event})\"\n  (rowClicked)=\"consolePrint({ msg: 'row click', data: $event})\"\n  (rowChecked)=\"consolePrint({ msg: 'row selection change', data: $event})\"\n\n  >\n  <ng-template #lotTemplate let-item=\"item\">\n    <div style=\"font-weight: bold; color: red;\">{{item.guid}}</div>\n  </ng-template>\n</ib-table>\n"
        },
        {
            "name": "IbTableExampleNoReduxComponent",
            "id": "component-IbTableExampleNoReduxComponent-c7af6866ba351b170c6f7c285222de622ca773dd2b2c50f1c191423044a2ce634869418bf0a3fc6ecc9e7fb03ef2aff927f024c376970e883da03f52f87d2eb4",
            "file": "src/app/examples/table-example/table-without-redux/table-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-table-example",
            "styleUrls": [
                "./table-example.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "table-example.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ibTable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTableComponent",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'ibTable', {static: true}"
                        }
                    ]
                },
                {
                    "name": "items",
                    "defaultValue": "sampleData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTableItem[]",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "selectableRows",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "titles",
                    "defaultValue": "[\n    {\n      key: 'guid',\n      value: 'GUID',\n      type: IbTableTitlesTypes.STRING,\n      width: '20%',\n    },\n    {\n      key: 'picture',\n      value: 'Link',\n      type: IbTableTitlesTypes.STRING,\n      filterable: true,\n      width: '20%',\n    },\n    {\n      key: 'company',\n      value: 'Company',\n      type: IbTableTitlesTypes.ANY,\n      filterable: true,\n      width: '10%',\n    },\n    {\n      key: 'age',\n      value: 'Età',\n      type: IbTableTitlesTypes.NUMBER,\n      format: '1.0-0',\n      filterable: true,\n      width: '2%'\n    },\n    {\n      key: 'isActive',\n      value: 'Attivo',\n      type: IbTableTitlesTypes.BOOLEAN,\n      filterable: true,\n      width: '10%'\n    },\n    {\n      key: 'balance',\n      value: 'Qt',\n      type: IbTableTitlesTypes.NUMBER,\n      filterable: true,\n      placeHolderInput: 'Inserisci qt',\n      width: '10%'\n    },\n    {\n      key: 'registered',\n      value: 'Data',\n      type: IbTableTitlesTypes.DATE,\n      filterable: true,\n      width: '10%'\n    },\n    {\n      key: 'label',\n      value: 'Etichetta',\n      type: IbTableTitlesTypes.TAG,\n      filterable: true,\n      width: '10%'\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "consolePrint",
                    "args": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "stampa",
                    "args": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\nimport { IbTableComponent } from 'src/app/inobeta-ui/ui/table';\nimport { IbTableItem } from 'src/app/inobeta-ui/ui/table/models/table-item.model';\nimport { IbTableAction, IbTableTitlesTypes } from 'src/app/inobeta-ui/ui/table/models/titles.model';\nimport { sampleData } from '../json-data';\n\n@Component({\n  selector: 'ib-table-example',\n  templateUrl: 'table-example.component.html',\n  styleUrls: ['./table-example.component.css']\n})\n//ANY, HOUR, COMBOBOX\nexport class IbTableExampleNoReduxComponent implements OnInit {\n  @ViewChild('ibTable', {static: true}) ibTable: IbTableComponent\n  selectableRows = true;\n  titles = [\n    {\n      key: 'guid',\n      value: 'GUID',\n      type: IbTableTitlesTypes.STRING,\n      width: '20%',\n    },\n    {\n      key: 'picture',\n      value: 'Link',\n      type: IbTableTitlesTypes.STRING,\n      filterable: true,\n      width: '20%',\n    },\n    {\n      key: 'company',\n      value: 'Company',\n      type: IbTableTitlesTypes.ANY,\n      filterable: true,\n      width: '10%',\n    },\n    {\n      key: 'age',\n      value: 'Età',\n      type: IbTableTitlesTypes.NUMBER,\n      format: '1.0-0',\n      filterable: true,\n      width: '2%'\n    },\n    {\n      key: 'isActive',\n      value: 'Attivo',\n      type: IbTableTitlesTypes.BOOLEAN,\n      filterable: true,\n      width: '10%'\n    },\n    {\n      key: 'balance',\n      value: 'Qt',\n      type: IbTableTitlesTypes.NUMBER,\n      filterable: true,\n      placeHolderInput: 'Inserisci qt',\n      width: '10%'\n    },\n    {\n      key: 'registered',\n      value: 'Data',\n      type: IbTableTitlesTypes.DATE,\n      filterable: true,\n      width: '10%'\n    },\n    {\n      key: 'label',\n      value: 'Etichetta',\n      type: IbTableTitlesTypes.TAG,\n      filterable: true,\n      width: '10%'\n    }\n  ];\n  items:IbTableItem[] = sampleData;\n\n\n  constructor() { }\n\n  stampa(item) {\n    console.log(item);\n  }\n\n  ngOnInit(): void {\n    this.ibTable.setFilter('balance', [\n      {\n        condition: '>',\n        value: '1000'\n      },\n      {\n        condition: '<=',\n        value: '2000'\n      }\n    ])\n\n\n    this.ibTable.setFilter('picture', 'place')\n\n  }\n\n  consolePrint(item){\n    console.log(item);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/*ib-table ::ng-deep .table-header{\n  background-color: #FF4931;\n}\nib-table ::ng-deep button.mat-sort-header-button,\nib-table ::ng-deep #select-row-name,\nib-table ::ng-deep #delete-row-name,\nib-table ::ng-deep .table-header-title{\n  font-family: 'Roboto', 'Regular', sans-serif;\n  color: #ffffff !important;\n}\nib-table ::ng-deep .table-row td, ib-table-header ::ng-deep .table-header-title {\n  border: none !important;\n}\nib-table ::ng-deep .mat-sort-header-arrow, ib-table ::ng-deep .table-sort-indicator {\n  color: #FCEE21 !important;\n}\nib-table ::ng-deep .table-row:hover > td{\n  color: #515151;\n  background-color: #F7F7F7;\n}\nib-table ::ng-deep td {\n  background-color: #ffffff;\n}\n*/\n.modal-selector {\n  position: absolute;\n  width: 150px;\n  height: 200px;\n  background-color: white;\n  border: 1px solid black;\n  color: black;\n  z-index: 100;\n}\n\n.modal-row {\n  border: 1px solid black;\n  background-color: yellow;\n}\n",
                    "styleUrl": "./table-example.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 75
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<ib-table\n  #ibTable\n  [tableName]=\"'pippo'\"\n  [titles]=\"titles\"\n  [items]=\"items\"\n  [enableReduxStore]=\"false\"\n  [selectableRows]=\"selectableRows\"\n  [hasExport]=\"false\"\n  [hasAdd]=\"false\"\n  [hasEdit]=\"false\"\n  [hasDelete]=\"false\"\n  (rowClicked)=\"consolePrint({ msg: 'row click', data: $event})\"\n  (rowChecked)=\"consolePrint({ msg: 'row selection change', data: $event})\"\n  >\n</ib-table>\n\n<ib-table\n  [titles]=\"titles\"\n  [items]=\"items\"\n  [enableReduxStore]=\"false\"\n  [selectableRows]=\"selectableRows\"\n  [hasExport]=\"false\"\n  [hasAdd]=\"false\"\n  [hasEdit]=\"false\"\n  [hasDelete]=\"false\"\n  (rowClicked)=\"consolePrint({ msg: 'row click', data: $event})\"\n  (rowChecked)=\"consolePrint({ msg: 'row selection change', data: $event})\"\n  >\n</ib-table>\n"
        },
        {
            "name": "IbTableExportComponent",
            "id": "component-IbTableExportComponent-d503c7f4c14e4ca678146f8423af69c1b67ae8d124995f6dad72aa50dea69039340dc32ebe71c339822cfe6ba016395725c004cfc6a2c1758f298cccfc9c9e4c",
            "file": "src/app/inobeta-ui/ui/table/components/table-export.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-table-export",
            "styleUrls": [],
            "styles": [],
            "template": "<ib-table-button\n  (click)=\"open()\"\n  label=\"shared.ibTable.export\"\n  color=\"basic\"\n></ib-table-button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "selectableRows",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "export",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "{\n    base: {},\n    form: {}\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';\n\n@Component({\n  selector: 'ib-table-export',\n  template: `\n  <ib-table-button\n    (click)=\"open()\"\n    label=\"shared.ibTable.export\"\n    color=\"basic\"\n  ></ib-table-button>\n  `,\n})\nexport class IbTableExportComponent {\n  @Input() selectableRows = false\n  @Output() export = new EventEmitter();\n\n  data = {\n    base: {},\n    form: {}\n  }\n\n  constructor(public dialog: MatDialog) { }\n\n  open() {\n    const dialog = this.dialog.open(IbTableExportDialogComponent, {\n      width: '400px',\n      data: {\n        selectableRows: this.selectableRows\n      }\n    });\n\n    dialog.afterClosed().subscribe(result => this.export.emit(result));\n  }\n}\n\n@Component({\n  selector: 'ib-table-export-dialog',\n  template: `\n    <h2 mat-dialog-title>{{ 'shared.ibTable.exportData.title' | translate }}</h2>\n    <mat-dialog-content>\n      <div>\n        <mat-form-field>\n          <mat-label>{{ 'shared.ibTable.exportData.format' | translate }}</mat-label>\n          <mat-select [(ngModel)]=\"format\">\n            <mat-option *ngFor=\"let format of formats\" [value]=\"format.value\">\n              {{format.viewValue}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n\n      <mat-radio-group [(ngModel)]=\"dataset\" style=\"display:flex;flex-direction:column;margin: 15px 0;\">\n        <mat-radio-button value=\"all\" style=\"margin: 4px\">{{ 'shared.ibTable.exportData.all' | translate }}</mat-radio-button>\n        <mat-radio-button *ngIf=\"this.data.selectableRows\" value=\"selected\" style=\"margin: 4px\">\n          {{ 'shared.ibTable.exportData.selectedRows' | translate }}\n        </mat-radio-button>\n        <mat-radio-button value=\"current\" style=\"margin: 4px\">{{ 'shared.ibTable.exportData.currentPage' | translate }}</mat-radio-button>\n      </mat-radio-group>\n\n    </mat-dialog-content>\n    <mat-dialog-actions align=\"end\">\n      <button mat-button (click)=\"onNoClick()\">{{ 'shared.ibModal.close' | translate }}</button>\n      <button mat-button color=\"primary\" [mat-dialog-close]=\"{ format: format, dataset: dataset }\">\n        {{ 'shared.ibTable.export' | translate }}\n      </button>\n    </mat-dialog-actions>\n  `,\n})\nexport class IbTableExportDialogComponent {\n  format = 'xlsx';\n  formats = [\n    { value: 'xlsx', viewValue: 'XLSX (Excel)' },\n    { value: 'csv', viewValue: 'CSV' },\n    { value: 'pdf', viewValue: 'PDF' }\n  ];\n  dataset = 'all';\n\n  constructor(\n    public dialogRef: MatDialogRef<IbTableExportDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any\n    ) {}\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "IbTableExportDialogComponent",
            "id": "component-IbTableExportDialogComponent-d503c7f4c14e4ca678146f8423af69c1b67ae8d124995f6dad72aa50dea69039340dc32ebe71c339822cfe6ba016395725c004cfc6a2c1758f298cccfc9c9e4c",
            "file": "src/app/inobeta-ui/ui/table/components/table-export.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-table-export-dialog",
            "styleUrls": [],
            "styles": [],
            "template": "<h2 mat-dialog-title>{{ 'shared.ibTable.exportData.title' | translate }}</h2>\n<mat-dialog-content>\n  <div>\n    <mat-form-field>\n      <mat-label>{{ 'shared.ibTable.exportData.format' | translate }}</mat-label>\n      <mat-select [(ngModel)]=\"format\">\n        <mat-option *ngFor=\"let format of formats\" [value]=\"format.value\">\n          {{format.viewValue}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n\n  <mat-radio-group [(ngModel)]=\"dataset\" style=\"display:flex;flex-direction:column;margin: 15px 0;\">\n    <mat-radio-button value=\"all\" style=\"margin: 4px\">{{ 'shared.ibTable.exportData.all' | translate }}</mat-radio-button>\n    <mat-radio-button *ngIf=\"this.data.selectableRows\" value=\"selected\" style=\"margin: 4px\">\n      {{ 'shared.ibTable.exportData.selectedRows' | translate }}\n    </mat-radio-button>\n    <mat-radio-button value=\"current\" style=\"margin: 4px\">{{ 'shared.ibTable.exportData.currentPage' | translate }}</mat-radio-button>\n  </mat-radio-group>\n\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n  <button mat-button (click)=\"onNoClick()\">{{ 'shared.ibModal.close' | translate }}</button>\n  <button mat-button color=\"primary\" [mat-dialog-close]=\"{ format: format, dataset: dataset }\">\n    {{ 'shared.ibTable.export' | translate }}\n  </button>\n</mat-dialog-actions>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dataset",
                    "defaultValue": "'all'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<IbTableExportDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "format",
                    "defaultValue": "'xlsx'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "formats",
                    "defaultValue": "[\n    { value: 'xlsx', viewValue: 'XLSX (Excel)' },\n    { value: 'csv', viewValue: 'CSV' },\n    { value: 'pdf', viewValue: 'PDF' }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 72
                }
            ],
            "methodsClass": [
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';\n\n@Component({\n  selector: 'ib-table-export',\n  template: `\n  <ib-table-button\n    (click)=\"open()\"\n    label=\"shared.ibTable.export\"\n    color=\"basic\"\n  ></ib-table-button>\n  `,\n})\nexport class IbTableExportComponent {\n  @Input() selectableRows = false\n  @Output() export = new EventEmitter();\n\n  data = {\n    base: {},\n    form: {}\n  }\n\n  constructor(public dialog: MatDialog) { }\n\n  open() {\n    const dialog = this.dialog.open(IbTableExportDialogComponent, {\n      width: '400px',\n      data: {\n        selectableRows: this.selectableRows\n      }\n    });\n\n    dialog.afterClosed().subscribe(result => this.export.emit(result));\n  }\n}\n\n@Component({\n  selector: 'ib-table-export-dialog',\n  template: `\n    <h2 mat-dialog-title>{{ 'shared.ibTable.exportData.title' | translate }}</h2>\n    <mat-dialog-content>\n      <div>\n        <mat-form-field>\n          <mat-label>{{ 'shared.ibTable.exportData.format' | translate }}</mat-label>\n          <mat-select [(ngModel)]=\"format\">\n            <mat-option *ngFor=\"let format of formats\" [value]=\"format.value\">\n              {{format.viewValue}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n\n      <mat-radio-group [(ngModel)]=\"dataset\" style=\"display:flex;flex-direction:column;margin: 15px 0;\">\n        <mat-radio-button value=\"all\" style=\"margin: 4px\">{{ 'shared.ibTable.exportData.all' | translate }}</mat-radio-button>\n        <mat-radio-button *ngIf=\"this.data.selectableRows\" value=\"selected\" style=\"margin: 4px\">\n          {{ 'shared.ibTable.exportData.selectedRows' | translate }}\n        </mat-radio-button>\n        <mat-radio-button value=\"current\" style=\"margin: 4px\">{{ 'shared.ibTable.exportData.currentPage' | translate }}</mat-radio-button>\n      </mat-radio-group>\n\n    </mat-dialog-content>\n    <mat-dialog-actions align=\"end\">\n      <button mat-button (click)=\"onNoClick()\">{{ 'shared.ibModal.close' | translate }}</button>\n      <button mat-button color=\"primary\" [mat-dialog-close]=\"{ format: format, dataset: dataset }\">\n        {{ 'shared.ibTable.export' | translate }}\n      </button>\n    </mat-dialog-actions>\n  `,\n})\nexport class IbTableExportDialogComponent {\n  format = 'xlsx';\n  formats = [\n    { value: 'xlsx', viewValue: 'XLSX (Excel)' },\n    { value: 'csv', viewValue: 'CSV' },\n    { value: 'pdf', viewValue: 'PDF' }\n  ];\n  dataset = 'all';\n\n  constructor(\n    public dialogRef: MatDialogRef<IbTableExportDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any\n    ) {}\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<IbTableExportDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<IbTableExportDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "IbTableHeaderComponent",
            "id": "component-IbTableHeaderComponent-e2bcb2d508a319048b3acd61defa467d2127c5b9515bb596731ba2cc21ed09628c99c28186a889547e506965bb75e340e688501ce86cd1b8326110f99adc6311",
            "file": "src/app/inobeta-ui/ui/table/components/table-header/table-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[ib-table-header]",
            "styleUrls": [
                "./table-header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./table-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columnFilter",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "{}",
                    "decorators": []
                },
                {
                    "name": "currentSort",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "hasConfig",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hasDelete",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hasEdit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selectableRows",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "stickyAreas",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "{}",
                    "decorators": []
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "templateButtons",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "IbTemplateModel[]",
                    "decorators": []
                },
                {
                    "name": "templateHeaders",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "titles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "IbTableTitles[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "handleSetFilter",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "columnTypes",
                    "defaultValue": "IbTableTitlesTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "ibStickyArea",
                    "defaultValue": "IbStickyAreas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "renderContextMenu",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "supportedFilters",
                    "defaultValue": "ibTableSupportedFilters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "visibleHeaders",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "clickout",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasCustomHeadersVisible",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadConf",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetCustomHeaderVisibility",
                    "args": [
                        {
                            "name": "event",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveConf",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setFilter",
                    "args": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "indexToSet",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "indexToSet",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, EventEmitter, Output, HostListener } from '@angular/core';\nimport { IbStickyAreas, ibTableSupportedFilters, IbTableTitles, IbTableTitlesTypes } from '../../models/titles.model';\nimport { IbTemplateModel } from '../../models/template.model';\nimport { Store } from '@ngrx/store';\nimport { IbModalMessageService } from '../../../modal/modal-message.service';\nimport { IbTableConfSaveComponent } from '../table-conf/table-conf-save.component';\nimport { ibTableActionLoadConfig, ibTableActionSaveConfig } from '../../store/actions/table.actions';\nimport { IbModalMessage } from '../../../modal/modal-message.model';\nimport { IbTableConfLoadComponent } from '../table-conf/table-conf-load.component';\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: '[ib-table-header]',\n  templateUrl: './table-header.component.html',\n  styleUrls: ['./table-header.component.css']\n})\nexport class IbTableHeaderComponent implements OnInit {\n  @Input() table: any;\n  @Input() titles: IbTableTitles[] = [];\n  @Input() selectableRows = true;\n  @Input() currentSort: any = {};\n  @Input() templateHeaders: any = {};\n  @Input() templateButtons: IbTemplateModel[] = [];\n  @Input() columnFilter = {};\n  @Input() hasEdit = false;\n  @Input() hasDelete = false;\n  @Input() hasConfig = true;\n  @Input() stickyAreas = [];\n  @Input() tableName: string;\n\n  renderContextMenu = {};\n  visibleHeaders = {};\n  columnTypes = IbTableTitlesTypes;\n  supportedFilters = ibTableSupportedFilters;\n  ibStickyArea = IbStickyAreas;\n\n  @Output() handleSetFilter = new EventEmitter<any>();\n\n  constructor(\n    private store: Store<any>,\n    private ibModal: IbModalMessageService\n  ) { }\n\n  ngOnInit() {\n  }\n\n  resetCustomHeaderVisibility(event = null) {\n    if (event) {\n      event.stopPropagation();\n    }\n    this.visibleHeaders = {};\n  }\n\n  setFilter(key, value, indexToSet = 0) {\n    this.handleSetFilter.emit({\n      key,\n      value,\n      indexToSet\n    });\n  }\n\n  @HostListener('document:click', ['$event'])\n  clickout(event) {\n    // tslint:disable-next-line: forin\n    for (const el in this.visibleHeaders) {\n      event.stopPropagation();\n      break;\n    }\n    this.resetCustomHeaderVisibility();\n  }\n\n  hasCustomHeadersVisible() {\n    return Object.keys(this.visibleHeaders).length > 0;\n  }\n\n  saveConf() {\n\n    console.log('saveConf');\n    this.ibModal.show({\n      title: 'shared.ibTable.saveConf.title',\n      message: 'shared.ibTable.saveConf.message',\n      tableName: this.tableName\n    } as IbTableConfDialogParams, IbTableConfSaveComponent).subscribe(data => {\n      if (data) {\n        this.store.dispatch(ibTableActionSaveConfig({ options: data, tableName: this.tableName }));\n      }\n    });\n  }\n  loadConf() {\n    this.ibModal.show({\n      title: 'shared.ibTable.loadConf.title',\n      message: 'shared.ibTable.loadConf.message',\n      tableName: this.tableName\n    } as IbTableConfDialogParams, IbTableConfLoadComponent).subscribe(data => {\n      if (data) {\n        this.store.dispatch(ibTableActionLoadConfig({ configName: data.name, tableName: this.tableName }));\n      }\n    });\n  }\n}\n\nexport interface IbTableConfDialogParams extends IbModalMessage {\n  tableName: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-sort-header-container {\n  align-items: center;\n  cursor: none !important;\n}\nth {\n  font-weight: normal;\n  padding: 10px;\n}\ntd {\n  border-bottom: 1px solid #ccc;\n  padding: 10px;\n}\n.table-header-title-custom ::ng-deep button{\n  cursor: default;\n}\n\n.table-header-title{\n  text-align: left;\n  cursor: pointer;\n}\n\n.filter-value{\n  font-size: 12px;\n  line-height: 15px;;\n}\n",
                    "styleUrl": "./table-header.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ibModal",
                        "type": "IbModalMessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ibModal",
                        "type": "IbModalMessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<th class=\"table-header-title\" [ibStickyColumn]=\"{ sticky: stickyAreas.includes(ibStickyArea.SELECT), key: 'ib-select'}\" width=\"1%\" *ngIf=\"selectableRows\">{{ 'shared.ibTable.select' | translate }}</th>\n\n<ng-template *ngFor=\"let t of titles\" [ngIf]=\"true\">\n  <th\n    style=\"white-space: nowrap;\"\n    class=\"table-header-title\"\n    [ibStickyColumn]=\"t\"\n    width=\"{{t.width}}\"\n    *ngIf=\"!templateHeaders[t.key]\">\n    <table cellpadding=\"0\" border=\"0\" cellspacing=\"0\" width=\"100%\">\n      <tr>\n        <th width=\"99%\" style=\"padding:0px;\">\n          <span  [mat-sort-header]=\"t.key\" fxLayoutAlign=\"start center\">\n            <span fxLayout=\"column\" fxLayoutAlign=\"center start\">\n              <span class=\"filter-value\" fxLayout=\"row\">\n                <ng-template [ngIf]=\"columnFilter[t.key] || columnFilter[t.key]===false\">\n                  <span *ngIf=\"t.type===columnTypes.BOOLEAN\">\n                    &nbsp;[{{((columnFilter[t.key]) ? 'shared.ibTable.true' : 'shared.ibTable.false') | translate}}]\n                  </span>\n                  <span *ngIf=\"t.type===columnTypes.STRING || t.type===columnTypes.ANY\">&nbsp;[{{columnFilter[t.key]}}]</span>\n                  <span  *ngIf=\"t.type===columnTypes.NUMBER || t.type===columnTypes.INPUT_NUMBER\">\n                    &nbsp;[\n                    <span *ngFor=\"let cond of columnFilter[t.key]; let last=last;\">\n                      {{ cond.condition }} {{ cond.value }} {{ !last ? ', ': ''}}\n                    </span>\n                    ]\n                  </span>\n                  <span  *ngIf=\"t.type===columnTypes.DATE\">\n                    &nbsp;[\n                    <span *ngFor=\"let cond of columnFilter[t.key]; let last=last;\">\n                      {{ cond.condition }} {{ cond.value }} {{ !last ? ', ': ''}}\n                    </span>\n                    ]\n                  </span>\n                  <i style=\"font-size: 14px;font-weight: bolder;cursor:pointer\" class=\"material-icons\"\n                    (click)=\"$event.stopPropagation(); setFilter(t.key, null);\">close</i>\n                </ng-template>\n              </span>\n              <span>{{ t.value | translate }}</span>\n            </span>\n          </span>\n        </th>\n        <th width=\"1%\" style=\"padding:0px;\">\n          <i\n            [hidden]=\"!(t.filterable && supportedFilters.indexOf(t.type) > -1)\"\n            class=\"material-icons filter-button\"\n            style=\"font-size: 14px;font-weight: bolder; float:right;\"\n            (click)=\"renderContextMenu[t.key] = true;\"\n            cdkOverlayOrigin\n            #trigger=\"cdkOverlayOrigin\"\n          >\n          filter_alt\n        </i>\n        <ng-template\n          *ngIf=\"t.filterable && supportedFilters.indexOf(t.type) > -1\"\n          cdkConnectedOverlay\n          [cdkConnectedOverlayOrigin]=\"trigger\"\n          [cdkConnectedOverlayOpen]=\"renderContextMenu[t.key]\"\n          (overlayOutsideClick)=\"renderContextMenu[t.key] = false\"\n        >\n          <div\n          style=\"width:100%;height:auto; padding: 0px;\"\n          >\n          <div\n            *ngIf=\"renderContextMenu[t.key]\"\n            ib-table-header-filter\n            [ibTable]=\"table\"\n            [col]=\"t\"\n            [filter]=\"columnFilter[t.key]\"\n            [cmList]=\"renderContextMenu\"\n            [key]=\"t.key\"\n          >\n          </div>\n          </div>\n        </ng-template>\n        </th>\n      </tr>\n    </table>\n  </th>\n  <th\n    style=\"white-space: nowrap;\"\n    class=\"table-header-title\"\n    width=\"{{t.width}}\"\n    *ngIf=\"templateHeaders[t.key]\"\n    [ibStickyColumn]=\"t\"\n    (click)=\"resetCustomHeaderVisibility($event); visibleHeaders[t.key] = !visibleHeaders[t.key]\"\n  >\n    <span fxLayout=\"row\" fxLayoutAlign=\"start center\">\n      <span fxLayout=\"column\" fxLayoutAlign=\"center start\">\n        <span fxLayout=\"row\" class=\"filter-value\">\n          <ng-template [ngIf]=\"columnFilter[t.key]\">\n            [{{columnFilter[t.key]}}]\n            <i style=\"font-size: 14px;font-weight: bolder;cursor:pointer\" class=\"material-icons\"\n              (click)=\"$event.stopPropagation(); setFilter(t.key, null);\">close</i>\n          </ng-template>\n        </span>\n        <span>\n          {{ t.value | translate}}\n        </span>\n      </span>\n      <i class=\"material-icons table-sort-indicator\" style=\"font-size: 14px;font-weight: bolder;\"\n        *ngIf=\"currentSort && currentSort.active==t.key && currentSort.direction=='asc'\">\n        arrow_upward\n      </i>\n      <i class=\"material-icons table-sort-indicator\" style=\"font-size: 14px;font-weight: bolder;\"\n        *ngIf=\"currentSort && currentSort.active==t.key && currentSort.direction=='desc'\">\n        arrow_downward\n      </i>\n      <ng-template [ngIf]=\"visibleHeaders[t.key]\">\n        <ng-container *ngTemplateOutlet=\"templateHeaders[t.key]; context: { ibTable: table, col: t}\">\n        </ng-container>\n      </ng-template>\n    </span>\n  </th>\n</ng-template>\n\n<th\n  [ibStickyColumn]=\"{ sticky: stickyAreas.includes(ibStickyArea.TEMPLATE) && 'end', key: 'ib-template-'+btn.columnName}\"\n  width=\"1%\" style=\"white-space: nowrap;\" class=\"table-header-title-custom\" [mat-sort-header]=\"btn.columnName\"\n  disabled=\"true\" *ngFor=\"let btn of templateButtons\">\n    {{btn.columnName | translate}}\n</th>\n<th\n  [ibStickyColumn]=\"{ sticky: stickyAreas.includes(ibStickyArea.EDIT) && 'end', key: 'ib-edit' }\"\n  width=\"1%\" *ngIf=\"hasEdit\" class=\"table-header-title-custom\" [mat-sort-header]=\"'sortable_edit'\" disabled=\"true\">\n    {{ 'shared.ibTable.edit' | translate}}\n</th>\n<th\n  [ibStickyColumn]=\"{ sticky: stickyAreas.includes(ibStickyArea.DELETE) && 'end', key: 'ib-delete' }\"\n  width=\"1%\" *ngIf=\"hasDelete\" class=\"table-header-title-custom\" [mat-sort-header]=\"'sortable_delete'\" disabled=\"true\">\n    {{ 'shared.ibTable.delete' | translate}}\n</th>\n<th\n[ibStickyColumn]=\"{ sticky: stickyAreas.includes(ibStickyArea.SETTINGS) && 'end', key: 'ib-settings' }\"\nfxLayout=\"row\"\nclass=\"table-header-title-custom\" disabled=\"true\"\n*ngIf=\"hasConfig\"\n  >\n  <i\n    class=\"material-icons ib-table-header-button\"\n    matRipple\n    (click)=\"$event.stopPropagation();saveConf();\"\n  >save</i>&nbsp;\n  <i\n    class=\"material-icons ib-table-header-button\"\n    matRipple\n    (click)=\"$event.stopPropagation();loadConf();\"\n  >settings</i>\n</th>\n<!--overlay pane for custom headers popups--->\n<div\nclass=\"ib-table-overlay\"\n*ngIf=\"hasCustomHeadersVisible()\"\nstyle=\"position:fixed; top:0px; left:0px;width:100%; height:100%; z-index:99; background-color:transparent;\"\n></div>\n"
        },
        {
            "name": "IbTableHeaderFilterComponent",
            "id": "component-IbTableHeaderFilterComponent-ce8dc12c4e9ed20386e37576d4fb6a6bfd168f3214dee0c007fd176c1d21c04eac7f269d0d51fbd40951fc718690c14c09ab4c61e1659af4ed4ffdb4f22798be",
            "file": "src/app/inobeta-ui/ui/table/components/table-header-filter-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[ib-table-header-filter]",
            "styleUrls": [],
            "styles": [
                "\n          .modal-selector {\n            /*width: 260px;*/\n            min-height: 200px;\n            max-height: 300px;\n            overflow-y: auto;\n            background-color: white;\n            -webkit-box-shadow: 40px 20px 70px 0 rgba(0, 0, 0, 0.49);\n            -moz-box-shadow: 40px 20px 70px 0 rgba(0, 0, 0, 0.49);\n            box-shadow: 40px 20px 70px 0 rgba(0, 0, 0, 0.49);\n            color: black;\n            z-index: 100;\n          }\n\n          .modal-row {\n            font-family: 'Red Hat Text';\n            font-weight: bold;\n            size: 18px;\n            color: #999999;\n            padding: 10px;\n            padding-right: 20px;\n            padding-left: 20px;\n          }\n\n          .mat-mdc-input-element {\n            font-family: 'Red Hat Text' !important;\n          }\n          /*\n          .modal-row:hover, .modal-row-active {\n            background-color: #F7F7F7;\n          }*/\n\n          .modal-icons {\n            float: right;\n            size: 10px;\n            font-weight: normal;\n          }\n\n          .inner-modal {\n            margin-left: 200px;\n            margin-top: 125px;\n            width: 300px;\n          }\n\n          .inner-modal .modal-row {\n            overflow-x: hidden;\n            text-overflow: ellipsis;\n          }\n\n        "
            ],
            "template": "<div class=\"modal-selector\" (click)=\"$event.stopPropagation();\">\n      <!--- filter type BOOLEAN -->\n      <div class=\"modal-row\"  *ngIf=\"col.type === columnTypes.BOOLEAN\" >\n      <div fxLayout=\"row\" [formGroup]=\"generalForm\">\n      <mat-form-field style=\"width:220px;\">\n        <mat-label>{{'shared.ibTable.filter' | translate}}</mat-label>\n        <mat-select\n          formControlName=\"filter\"\n          (selectionChange)=\"search(generalForm.controls.filter.value)\"\n        >\n          <mat-option\n            (click)=\"$event.stopPropagation()\"\n            [value]=\"\"\n          ></mat-option>\n          <mat-option\n            (click)=\"$event.stopPropagation()\"\n            [value]=\"true\"\n          >{{'shared.ibTable.true' | translate}}</mat-option>\n          <mat-option\n            (click)=\"$event.stopPropagation()\"\n            [value]=\"false\"\n          >{{'shared.ibTable.false' | translate}}</mat-option>\n        </mat-select>\n        </mat-form-field>\n      </div>\n    </div>\n\n\n  <!--- filter type STRING -->\n    <div class=\"modal-row\"  *ngIf=\"col.type === columnTypes.STRING || col.type === columnTypes.ANY\" >\n      <div fxLayout=\"row\">\n      <mat-form-field style=\"width:220px;\">\n      <mat-label>{{'shared.ibTable.filter' | translate}}</mat-label>\n        <input\n          #searchInput\n          autocomplete=\"off\"\n          matInput\n          [value]=\"filter || ''\"\n          (keyup)=\"search(searchInput.value)\"\n          />\n        <i\n        matSuffix\n        class=\"material-icons modal-icons\"\n        (click)=\"searchInput.value = ''; search(searchInput.value)\"\n        >close</i>\n        <!--<i\n        class=\"material-icons modal-icons\"\n        (click)=\"search(searchInput.value)\"\n        >search</i>-->\n        </mat-form-field>\n      </div>\n    </div>\n\n\n    <!--- filter type DATE or NUMBER or INPUT_NUMBER -->\n    <div\n      class=\"modal-row\"\n      *ngIf=\"[columnTypes.NUMBER, columnTypes.INPUT_NUMBER, columnTypes.DATE].indexOf(col.type) > -1 \"\n    >\n    <div fxLayout=\"column\">\n      <div\n        fxLayout=\"row\"\n        fxLayoutGap=\"5px\"\n        *ngFor=\"let cond of numericConditions; let last = last\"\n        [formGroup]=\"cond\"\n        >\n        <mat-form-field style=\"width:140px;\">\n          <mat-label>Condizione</mat-label>\n          <mat-select formControlName=\"condition\">\n            <mat-option\n              *ngFor=\"let op of compareClauses\"\n              (click)=\"$event.stopPropagation()\"\n              [value]=\"op.value\"\n            >{{op.label}}</mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field style=\"width:200px;\">\n          <mat-label>Valore</mat-label>\n          <input\n            formControlName=\"value\"\n            autocomplete=\"off\"\n            matInput\n            [type]=\"col.type === columnTypes.DATE ? 'date' : 'number'\"\n            />\n        </mat-form-field>\n        <i\n        *ngIf=\"!last || (last && numericConditions.length > 1)\"\n        class=\"material-icons modal-icons\"\n        style=\"line-height:50px;\"\n        (click)=\"removeClause(cond)\"\n        >delete</i>\n        <i\n        *ngIf=\"last && numericConditions.length < 2\"\n        class=\"material-icons modal-icons\"\n        style=\"line-height:50px;\"\n        (click)=\"addClause()\"\n        >add</i>\n      </div>\n      <ib-table-button\n        label=\"shared.ibTable.apply\"\n        color=\"primary\"\n        style=\"float:right\"\n        [disabled]=\"!numericFormsValid()\"\n        (click)=\"searchNumeric()\"\n      ></ib-table-button>\n      </div>\n\n    </div>\n  </div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cmList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 180,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "col",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 178,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 179,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "ibTable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 177,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 181,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columnTypes",
                    "defaultValue": "IbTableTitlesTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 184
                },
                {
                    "name": "compareClauses",
                    "defaultValue": "[\n    { value: '<', label: '<'},\n    { value: '<=', label: '<='},\n    { value: '==', label: '='},\n    { value: '>', label: '>'},\n    { value: '>=', label: '>='}\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 190
                },
                {
                    "name": "filterDistinct",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 187
                },
                {
                    "name": "generalForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 188
                },
                {
                    "name": "numericConditions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 198
                },
                {
                    "name": "searchSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 186
                }
            ],
            "methodsClass": [
                {
                    "name": "addClause",
                    "args": [
                        {
                            "name": "filter",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{\n    condition: '',\n    value: ''\n  }"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{\n    condition: '',\n    value: ''\n  }",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "doFilter",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initForm",
                    "args": [
                        {
                            "name": "col",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filter",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "col",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "numericFormsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeClause",
                    "args": [
                        {
                            "name": "cond",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cond",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "search",
                    "args": [
                        {
                            "name": "what",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "what",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchNumeric",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 234,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Subject } from 'rxjs';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { UntypedFormBuilder, UntypedFormControl, Validators } from '@angular/forms';\nimport { debounceTime } from 'rxjs/operators';\nimport { IbTableTitlesTypes } from '../models/titles.model';\n\n@Component({\n  selector: '[ib-table-header-filter]',\n  template: `\n  <div class=\"modal-selector\" (click)=\"$event.stopPropagation();\">\n        <!--- filter type BOOLEAN -->\n        <div class=\"modal-row\"  *ngIf=\"col.type === columnTypes.BOOLEAN\" >\n        <div fxLayout=\"row\" [formGroup]=\"generalForm\">\n        <mat-form-field style=\"width:220px;\">\n          <mat-label>{{'shared.ibTable.filter' | translate}}</mat-label>\n          <mat-select\n            formControlName=\"filter\"\n            (selectionChange)=\"search(generalForm.controls.filter.value)\"\n          >\n            <mat-option\n              (click)=\"$event.stopPropagation()\"\n              [value]=\"\"\n            ></mat-option>\n            <mat-option\n              (click)=\"$event.stopPropagation()\"\n              [value]=\"true\"\n            >{{'shared.ibTable.true' | translate}}</mat-option>\n            <mat-option\n              (click)=\"$event.stopPropagation()\"\n              [value]=\"false\"\n            >{{'shared.ibTable.false' | translate}}</mat-option>\n          </mat-select>\n          </mat-form-field>\n        </div>\n      </div>\n\n\n    <!--- filter type STRING -->\n      <div class=\"modal-row\"  *ngIf=\"col.type === columnTypes.STRING || col.type === columnTypes.ANY\" >\n        <div fxLayout=\"row\">\n        <mat-form-field style=\"width:220px;\">\n        <mat-label>{{'shared.ibTable.filter' | translate}}</mat-label>\n          <input\n            #searchInput\n            autocomplete=\"off\"\n            matInput\n            [value]=\"filter || ''\"\n            (keyup)=\"search(searchInput.value)\"\n            />\n          <i\n          matSuffix\n          class=\"material-icons modal-icons\"\n          (click)=\"searchInput.value = ''; search(searchInput.value)\"\n          >close</i>\n          <!--<i\n          class=\"material-icons modal-icons\"\n          (click)=\"search(searchInput.value)\"\n          >search</i>-->\n          </mat-form-field>\n        </div>\n      </div>\n\n\n      <!--- filter type DATE or NUMBER or INPUT_NUMBER -->\n      <div\n        class=\"modal-row\"\n        *ngIf=\"[columnTypes.NUMBER, columnTypes.INPUT_NUMBER, columnTypes.DATE].indexOf(col.type) > -1 \"\n      >\n      <div fxLayout=\"column\">\n        <div\n          fxLayout=\"row\"\n          fxLayoutGap=\"5px\"\n          *ngFor=\"let cond of numericConditions; let last = last\"\n          [formGroup]=\"cond\"\n          >\n          <mat-form-field style=\"width:140px;\">\n            <mat-label>Condizione</mat-label>\n            <mat-select formControlName=\"condition\">\n              <mat-option\n                *ngFor=\"let op of compareClauses\"\n                (click)=\"$event.stopPropagation()\"\n                [value]=\"op.value\"\n              >{{op.label}}</mat-option>\n            </mat-select>\n          </mat-form-field>\n          <mat-form-field style=\"width:200px;\">\n            <mat-label>Valore</mat-label>\n            <input\n              formControlName=\"value\"\n              autocomplete=\"off\"\n              matInput\n              [type]=\"col.type === columnTypes.DATE ? 'date' : 'number'\"\n              />\n          </mat-form-field>\n          <i\n          *ngIf=\"!last || (last && numericConditions.length > 1)\"\n          class=\"material-icons modal-icons\"\n          style=\"line-height:50px;\"\n          (click)=\"removeClause(cond)\"\n          >delete</i>\n          <i\n          *ngIf=\"last && numericConditions.length < 2\"\n          class=\"material-icons modal-icons\"\n          style=\"line-height:50px;\"\n          (click)=\"addClause()\"\n          >add</i>\n        </div>\n        <ib-table-button\n          label=\"shared.ibTable.apply\"\n          color=\"primary\"\n          style=\"float:right\"\n          [disabled]=\"!numericFormsValid()\"\n          (click)=\"searchNumeric()\"\n        ></ib-table-button>\n        </div>\n\n      </div>\n    </div>\n  `,\n  styles: [\n    `\n          .modal-selector {\n            /*width: 260px;*/\n            min-height: 200px;\n            max-height: 300px;\n            overflow-y: auto;\n            background-color: white;\n            -webkit-box-shadow: 40px 20px 70px 0 rgba(0, 0, 0, 0.49);\n            -moz-box-shadow: 40px 20px 70px 0 rgba(0, 0, 0, 0.49);\n            box-shadow: 40px 20px 70px 0 rgba(0, 0, 0, 0.49);\n            color: black;\n            z-index: 100;\n          }\n\n          .modal-row {\n            font-family: 'Red Hat Text';\n            font-weight: bold;\n            size: 18px;\n            color: #999999;\n            padding: 10px;\n            padding-right: 20px;\n            padding-left: 20px;\n          }\n\n          .mat-mdc-input-element {\n            font-family: 'Red Hat Text' !important;\n          }\n          /*\n          .modal-row:hover, .modal-row-active {\n            background-color: #F7F7F7;\n          }*/\n\n          .modal-icons {\n            float: right;\n            size: 10px;\n            font-weight: normal;\n          }\n\n          .inner-modal {\n            margin-left: 200px;\n            margin-top: 125px;\n            width: 300px;\n          }\n\n          .inner-modal .modal-row {\n            overflow-x: hidden;\n            text-overflow: ellipsis;\n          }\n\n        `\n\n  ]\n\n})\n\nexport class IbTableHeaderFilterComponent implements OnInit {\n  @Input() ibTable: any;\n  @Input() col: any;\n  @Input() filter: any;\n  @Input() cmList: any;\n  @Input() key: string;\n\n\n  columnTypes = IbTableTitlesTypes;\n\n  searchSubject = new Subject();\n  filterDistinct: any[] = [];\n  generalForm;\n\n  compareClauses = [\n    { value: '<', label: '<'},\n    { value: '<=', label: '<='},\n    { value: '==', label: '='},\n    { value: '>', label: '>'},\n    { value: '>=', label: '>='}\n  ];\n\n  numericConditions = [];\n\n  constructor(private fb: UntypedFormBuilder) {\n    this.searchSubject.pipe(\n      debounceTime(700)\n    ).subscribe((value) => this.doFilter(value));\n  }\n  ngOnInit(): void {\n    this.initForm(this.col, this.filter);\n  }\n\n  doFilter(value) {\n    this.ibTable.setFilter(this.col.key, value);\n  }\n\n  search(what) {\n    this.searchSubject.next(what);\n  }\n\n  removeClause(cond) {\n    const index = this.numericConditions.indexOf(cond);\n    this.numericConditions.splice(index, 1);\n  }\n\n  addClause(filter = {\n    condition: '',\n    value: ''\n  }) {\n    this.numericConditions.push(\n      this.fb.group({\n        condition: new UntypedFormControl(filter.condition, Validators.required),\n        value: new UntypedFormControl(filter.value, Validators.required)\n      })\n    );\n  }\n\n  searchNumeric() {\n    this.search(this.numericConditions.map(c => c.value));\n    this.cmList[this.key] = false;\n  }\n\n  numericFormsValid() {\n    return this.numericConditions.reduce((acc, el) => {\n      if (!el.valid) { return false }\n      return acc;\n    }, true);\n  }\n\n  initForm(col, filter) {\n\n    if ([\n      this.columnTypes.NUMBER,\n      this.columnTypes.INPUT_NUMBER,\n      this.columnTypes.DATE\n    ].indexOf(col.type) > -1) {\n      if (this.filter && filter.length > 0) {\n        filter.forEach(f => this.addClause(f));\n      } else {\n        this.addClause();\n      }\n    } else {\n      this.generalForm =  this.fb.group({\n        filter: new UntypedFormControl( this.filter )\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n          .modal-selector {\n            /*width: 260px;*/\n            min-height: 200px;\n            max-height: 300px;\n            overflow-y: auto;\n            background-color: white;\n            -webkit-box-shadow: 40px 20px 70px 0 rgba(0, 0, 0, 0.49);\n            -moz-box-shadow: 40px 20px 70px 0 rgba(0, 0, 0, 0.49);\n            box-shadow: 40px 20px 70px 0 rgba(0, 0, 0, 0.49);\n            color: black;\n            z-index: 100;\n          }\n\n          .modal-row {\n            font-family: 'Red Hat Text';\n            font-weight: bold;\n            size: 18px;\n            color: #999999;\n            padding: 10px;\n            padding-right: 20px;\n            padding-left: 20px;\n          }\n\n          .mat-mdc-input-element {\n            font-family: 'Red Hat Text' !important;\n          }\n          /*\n          .modal-row:hover, .modal-row-active {\n            background-color: #F7F7F7;\n          }*/\n\n          .modal-icons {\n            float: right;\n            size: 10px;\n            font-weight: normal;\n          }\n\n          .inner-modal {\n            margin-left: 200px;\n            margin-top: 125px;\n            width: 300px;\n          }\n\n          .inner-modal .modal-row {\n            overflow-x: hidden;\n            text-overflow: ellipsis;\n          }\n\n        \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "UntypedFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 198,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "UntypedFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "IbTableHeaderPopupComponent",
            "id": "component-IbTableHeaderPopupComponent-3ea20042f7ee09a131ad685b6094184cee953a8a972b5c123c11dfb4d6c04ab9e90c8b28c144d85e90954003b3164dd9e7247ec1058c9f710c268f357c7a2d22",
            "file": "src/app/inobeta-ui/ui/table/components/table-header-popup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-table-header-popup",
            "styleUrls": [],
            "styles": [
                "\n          .modal-selector {\n            position: absolute;\n            width: 200px;\n            max-height: 300px;\n            overflow-y: auto;\n            background-color: white;\n            -webkit-box-shadow: 40px 20px 70px 0 rgba(0, 0, 0, 0.49);\n            -moz-box-shadow: 40px 20px 70px 0 rgba(0, 0, 0, 0.49);\n            box-shadow: 40px 20px 70px 0 rgba(0, 0, 0, 0.49);\n            color: black;\n            z-index: 100;\n          }\n    \n          .modal-row {\n            font-family: 'Red Hat Text';\n            font-weight: bold;\n            size: 18px;\n            color: #999999;\n            padding: 10px;\n            padding-right: 20px;\n            padding-left: 20px;\n          }\n    \n          .mat-mdc-input-element {\n            font-family: 'Red Hat Text' !important;\n          }\n    \n          .modal-row:hover, .modal-row-active {\n            background-color: #F7F7F7;\n          }\n    \n          .modal-icons {\n            float: right;\n            size: 10px;\n            font-weight: normal;\n          }\n    \n          .inner-modal {\n            margin-left: 200px;\n            margin-top: 125px;\n            width: 300px;\n          }\n    \n          .inner-modal .modal-row {\n            overflow-x: hidden;\n            text-overflow: ellipsis;\n          }\n    \n        "
            ],
            "template": "  <div class=\"modal-selector\" (click)=\"$event.stopPropagation();\">\n      <div class=\"modal-row\" (click)=\"ibTable.sortData({active: col.key, direction: 'asc'})\">\n        {{ 'shared.tableHeaderPopup.sort' | translate}}\n        <i class=\"material-icons modal-icons\">arrow_upward</i>\n      </div>\n      <div class=\"modal-row\" (click)=\"ibTable.sortData({active: col.key, direction: 'desc'})\">\n        {{ 'shared.tableHeaderPopup.sort' | translate}}\n        <i class=\"material-icons modal-icons\">arrow_downward</i>\n      </div>\n      <div class=\"modal-row\" >\n        <div fxLayout=\"row\">\n          <input\n            #searchInput\n            autocomplete=\"off\"\n            matInput\n            [placeholder]=\"'shared.tableHeaderPopup.filter' | translate\"\n            (keyup)=\"search(searchInput.value)\"\n            />\n          <i\n          class=\"material-icons modal-icons\"\n          (click)=\"search(searchInput.value)\"\n          >search</i>\n        </div>\n      </div>\n<!--\n      <div class=\"modal-row\" >\n        {{ 'shared.tableHeaderPopup.elementsToFilter' | translate}}\n      </div>-->\n    </div>\n    <!--<div class=\"modal-selector inner-modal\">\n      <div\n        class=\"modal-row\"\n        *ngFor=\"let item of filterDistinct\"\n        (click)=\"ibTable.setFilter(col.key, item);\"\n        >\n        {{ item }}\n      </div>\n    </div>-->\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "col",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 104,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "ibTable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 103,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filterDistinct",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "searchSubject",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 106
                }
            ],
            "methodsClass": [
                {
                    "name": "alignFilterDistinct",
                    "args": [
                        {
                            "name": "items",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "doFilter",
                    "args": [
                        {
                            "name": "text",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "search",
                    "args": [
                        {
                            "name": "what",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "what",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'ib-table-header-popup',\n  template: /*template*/`\n              <div class=\"modal-selector\" (click)=\"$event.stopPropagation();\">\n                  <div class=\"modal-row\" (click)=\"ibTable.sortData({active: col.key, direction: 'asc'})\">\n                    {{ 'shared.tableHeaderPopup.sort' | translate}}\n                    <i class=\"material-icons modal-icons\">arrow_upward</i>\n                  </div>\n                  <div class=\"modal-row\" (click)=\"ibTable.sortData({active: col.key, direction: 'desc'})\">\n                    {{ 'shared.tableHeaderPopup.sort' | translate}}\n                    <i class=\"material-icons modal-icons\">arrow_downward</i>\n                  </div>\n                  <div class=\"modal-row\" >\n                    <div fxLayout=\"row\">\n                      <input\n                        #searchInput\n                        autocomplete=\"off\"\n                        matInput\n                        [placeholder]=\"'shared.tableHeaderPopup.filter' | translate\"\n                        (keyup)=\"search(searchInput.value)\"\n                        />\n                      <i\n                      class=\"material-icons modal-icons\"\n                      (click)=\"search(searchInput.value)\"\n                      >search</i>\n                    </div>\n                  </div>\n            <!--\n                  <div class=\"modal-row\" >\n                    {{ 'shared.tableHeaderPopup.elementsToFilter' | translate}}\n                  </div>-->\n                </div>\n                <!--<div class=\"modal-selector inner-modal\">\n                  <div\n                    class=\"modal-row\"\n                    *ngFor=\"let item of filterDistinct\"\n                    (click)=\"ibTable.setFilter(col.key, item);\"\n                    >\n                    {{ item }}\n                  </div>\n                </div>-->\n              `,\n  styles: [\n    `\n          .modal-selector {\n            position: absolute;\n            width: 200px;\n            max-height: 300px;\n            overflow-y: auto;\n            background-color: white;\n            -webkit-box-shadow: 40px 20px 70px 0 rgba(0, 0, 0, 0.49);\n            -moz-box-shadow: 40px 20px 70px 0 rgba(0, 0, 0, 0.49);\n            box-shadow: 40px 20px 70px 0 rgba(0, 0, 0, 0.49);\n            color: black;\n            z-index: 100;\n          }\n    \n          .modal-row {\n            font-family: 'Red Hat Text';\n            font-weight: bold;\n            size: 18px;\n            color: #999999;\n            padding: 10px;\n            padding-right: 20px;\n            padding-left: 20px;\n          }\n    \n          .mat-mdc-input-element {\n            font-family: 'Red Hat Text' !important;\n          }\n    \n          .modal-row:hover, .modal-row-active {\n            background-color: #F7F7F7;\n          }\n    \n          .modal-icons {\n            float: right;\n            size: 10px;\n            font-weight: normal;\n          }\n    \n          .inner-modal {\n            margin-left: 200px;\n            margin-top: 125px;\n            width: 300px;\n          }\n    \n          .inner-modal .modal-row {\n            overflow-x: hidden;\n            text-overflow: ellipsis;\n          }\n    \n        `\n\n  ]\n\n})\nexport class IbTableHeaderPopupComponent implements OnChanges {\n  @Input() ibTable: any;\n  @Input() col: any;\n\n  searchSubject = new Subject();\n  filterDistinct: any[] = [];\n  constructor() {\n    console.warn('ib-table-header-popup is deprecated');\n    this.searchSubject.pipe(\n      debounceTime(700)\n    ).subscribe((text) => this.doFilter(text));\n  }\n\n  doFilter(text) {\n    this.ibTable.setFilter(this.col.key, text);\n  }\n\n  search(what) {\n    this.searchSubject.next(what);\n  }\n\n  ngOnChanges(changes: import ('@angular/core').SimpleChanges): void {\n    if (changes.ibTable && changes.ibTable.currentValue) {\n      this.alignFilterDistinct(changes.ibTable.currentValue.items);\n    }\n  }\n\n  alignFilterDistinct(items) {\n    this.filterDistinct = [... new Set(items.map(i => i[this.col.key]))].sort();\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n          .modal-selector {\n            position: absolute;\n            width: 200px;\n            max-height: 300px;\n            overflow-y: auto;\n            background-color: white;\n            -webkit-box-shadow: 40px 20px 70px 0 rgba(0, 0, 0, 0.49);\n            -moz-box-shadow: 40px 20px 70px 0 rgba(0, 0, 0, 0.49);\n            box-shadow: 40px 20px 70px 0 rgba(0, 0, 0, 0.49);\n            color: black;\n            z-index: 100;\n          }\n    \n          .modal-row {\n            font-family: 'Red Hat Text';\n            font-weight: bold;\n            size: 18px;\n            color: #999999;\n            padding: 10px;\n            padding-right: 20px;\n            padding-left: 20px;\n          }\n    \n          .mat-mdc-input-element {\n            font-family: 'Red Hat Text' !important;\n          }\n    \n          .modal-row:hover, .modal-row-active {\n            background-color: #F7F7F7;\n          }\n    \n          .modal-icons {\n            float: right;\n            size: 10px;\n            font-weight: normal;\n          }\n    \n          .inner-modal {\n            margin-left: 200px;\n            margin-top: 125px;\n            width: 300px;\n          }\n    \n          .inner-modal .modal-row {\n            overflow-x: hidden;\n            text-overflow: ellipsis;\n          }\n    \n        \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 107
            },
            "implements": [
                "OnChanges"
            ]
        },
        {
            "name": "IbTablePaginatorComponent",
            "id": "component-IbTablePaginatorComponent-0dac4d0b6a64a186c5ee90f4901775c6688b784f307b7cd6e6a633eae87c51cc8e9d96540d5b96d750edae2bbbaa20652318feb0cac61a1ad1f80778c915b162",
            "file": "src/app/inobeta-ui/ui/table/components/table-paginator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-table-paginator",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <mat-paginator\n    style=\"margin-top: 10px;background-color: transparent;\"\n    [length]=\"paginationInfo.length\"\n    [pageSize]=\"paginationInfo.pageSize\"\n    [pageSizeOptions]=\"[5, 10, 25, 100]\"\n    [showFirstLastButtons]=\"true\"\n    [pageIndex]=\"paginationInfo.pageIndex\"\n    (page)=\"pageChangeHandle.emit($event)\">\n  </mat-paginator>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "elemForPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "numOfElements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "paginationInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "pageChangeHandle",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector: 'ib-table-paginator',\n  template: `\n    <div>\n      <mat-paginator\n        style=\"margin-top: 10px;background-color: transparent;\"\n        [length]=\"paginationInfo.length\"\n        [pageSize]=\"paginationInfo.pageSize\"\n        [pageSizeOptions]=\"[5, 10, 25, 100]\"\n        [showFirstLastButtons]=\"true\"\n        [pageIndex]=\"paginationInfo.pageIndex\"\n        (page)=\"pageChangeHandle.emit($event)\">\n      </mat-paginator>\n    </div>\n  `,\n})\nexport class IbTablePaginatorComponent {\n  @Input() numOfElements;\n  @Input() paginationInfo;\n  @Input() elemForPage = 0;\n  \n  @Output() pageChangeHandle = new EventEmitter();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "IbTableRowComponent",
            "id": "component-IbTableRowComponent-79a86be9cc5c58975a6bab86581dd93edf38c2b0217c2b05ff73b9ec53b69fc571a0cc6ba1ecb8f01d43fc8791088e154ff51a6b46ac4fcb89e0376f48ec2c4f",
            "file": "src/app/inobeta-ui/ui/table/components/table-row.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[ib-table-row]",
            "styleUrls": [],
            "styles": [],
            "template": "<!--CHECKBOX-->\n<td *ngIf=\"selectableRows\" [ibStickyColumn]=\"{ sticky: stickyAreas.includes(ibStickyArea.SELECT), key: 'ib-select'}\" [formGroup]=\"formRow\" style=\"text-align:center;\">\n  <mat-checkbox\n    formControlName=\"isChecked\"\n    (click)=\"$event.stopPropagation();\"\n    (change)=\"rowChecked.emit(objectToEmit())\"\n  ></mat-checkbox>\n</td>\n\n<td\n  *ngFor=\"let t of titles\"\n  style=\"padding: 10px 15px;\"\n  [ngStyle]=\"{\n     'text-align': (t.align) ? t.align : alignEnum.LEFT\n  }\"\n  class=\"{{ 'ib-table-column-type-' + t.type }}\"\n  [ibStickyColumn]=\"t\"\n  [ngClass]=\"(t.getClassByCondition) ? t.getClassByCondition(item) : null\">\n\n  <!--TYPE = ANY-->\n  <span *ngIf=\"!t.type || t.type === typeEnum.ANY\" class=\"{{t.className}}}\">\n    {{item[t.key] | translate}}\n  </span>\n\n  <!--TYPE = NUMBER-->\n  <span *ngIf=\"t.type === typeEnum.NUMBER\" class=\"{{t.className}}\">\n      {{item[t.key] | number:t.format:'it'}}\n  </span>\n\n  <!--TYPE = DATE-->\n  <span *ngIf=\"t.type === typeEnum.DATE\" class=\"{{t.className}}\">\n    {{item[t.key] | date: 'dd/MM/yyyy'}}\n  </span>\n\n  <!--TYPE = HOUR-->\n  <span *ngIf=\"t.type === typeEnum.HOUR\" class=\"{{t.className}}\">\n    {{item[t.key] | date: 'HH:mm:ss'}}\n  </span>\n\n  <!--TYPE = STRING-->\n  <span *ngIf=\"t.type === typeEnum.STRING\" class=\"{{t.className}}\">\n    {{item[t.key]}}\n  </span>\n\n\n  <!--TYPE = TAG-->\n  <span *ngIf=\"t.type === typeEnum.TAG\" class=\"{{t.className}}\">\n     <mat-chip-listbox>\n       <mat-chip-option\n         *ngFor=\"let tag of item[t.key]\"\n         [ngStyle]=\"{\n           'background-color': tag.background || '#f2536e',\n           '--mdc-chip-label-text-color': tag.color\n         }\"\n         >\n         {{ (tag.name | translate)?.toUpperCase() }}\n       </mat-chip-option>\n     </mat-chip-listbox>\n   </span>\n\n  <!--TYPE = COMBOBOX-->\n  <span *ngIf=\"t.type === typeEnum.COMBOBOX\" class=\"{{t.className}}\">\n    {{ t.comboOptions[item[t.key]] | translate }}\n  </span>\n\n  <!--TYPE = BOOLEAN-->\n  <span *ngIf=\"t.type === typeEnum.BOOLEAN\" class=\"{{t.className}}\">\n    <i\n      class=\"material-icons\"\n      style=\"color:green;\"\n      *ngIf=\"item[t.key] === true\">check\n    </i>\n    <i\n      class=\"material-icons\"\n      style=\"color:gray;\"\n      *ngIf=\"item[t.key] === false\">clear\n    </i>\n   </span>\n\n  <!--TYPE = INPUT-->\n  <span *ngIf=\"t.type === typeEnum.INPUT_NUMBER\" class=\"{{t.className}}\">\n    <mat-form-field>\n      <input\n        [(ngModel)]=\"item[t.key]\"\n        matInput\n        type=\"number\"\n        (change)=\"t.change ? t.change(item, $event['value']) : null\"\n        placeholder=\"{{ t.placeHolderInput | translate }}\"\n        value=\"{{item[t.key]}}\">\n      </mat-form-field>\n  </span>\n\n  <!--TYPE = CUSTOM-->\n  <span *ngIf=\"t.type === typeEnum.CUSTOM\" class=\"{{t.className}}\">\n    <ng-container\n      *ngTemplateOutlet=\"customItemTemplate[t.key]; context: objectToEmit()\">\n  </ng-container>\n  </span>\n</td>\n<td [ibStickyColumn]=\"{ sticky: stickyAreas.includes(ibStickyArea.TEMPLATE) && 'end', key: 'ib-template-'+btn.columnName}\"\n   style=\"text-align: center\" *ngFor=\"let btn of templateButtons\">\n  <ng-container\n    *ngTemplateOutlet=\"btn.template; context: objectToEmit()\">\n  </ng-container>\n</td>\n<td\n  [ibStickyColumn]=\"{ sticky: stickyAreas.includes(ibStickyArea.EDIT) && 'end', key: 'ib-edit' }\"\n  style=\"text-align:center;\" *ngIf=\"hasEdit\">\n  <i\n    class=\"material-icons ib-table-row-button\"\n    matRipple\n    (click)=\"$event.stopPropagation(); edit.emit(objectToEmit())\"\n  >{{ iconSet.edit }}</i>\n</td>\n<td\n  [ibStickyColumn]=\"{ sticky: stickyAreas.includes(ibStickyArea.DELETE) && 'end', key: 'ib-delete' }\"\n  style=\"text-align:center;\" *ngIf=\"hasDelete\">\n  <i\n    class=\"material-icons ib-table-row-button\"\n    matRipple\n    (click)=\"$event.stopPropagation(); handleDelete()\"\n  >{{ iconSet.delete }}</i>\n</td>\n<td\n  [ibStickyColumn]=\"{ sticky: stickyAreas.includes(ibStickyArea.SETTINGS) && 'end', key: 'ib-settings' }\"\n></td>\n\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "customItemTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 144,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "deleteConfirm",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 150,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formRow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 147,
                    "type": "UntypedFormGroup",
                    "decorators": []
                },
                {
                    "name": "hasDelete",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 149,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hasEdit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 148,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "iconSet",
                    "defaultValue": "{\n    edit: 'edit',\n    delete: 'delete'\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 151,
                    "type": "{ edit: string; delete: string; }",
                    "decorators": []
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 142,
                    "type": "IbTableItem",
                    "decorators": []
                },
                {
                    "name": "selectableRows",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 145,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "stickyAreas",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 155,
                    "type": "{}",
                    "decorators": []
                },
                {
                    "name": "templateButtons",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 146,
                    "type": "IbTemplateModel[]",
                    "decorators": []
                },
                {
                    "name": "titles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 143,
                    "type": "IbTableTitles[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "delete",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 159,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "edit",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 158,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "rowChecked",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 157,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "alignEnum",
                    "defaultValue": "IbTableCellAligns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 162
                },
                {
                    "name": "ibStickyArea",
                    "defaultValue": "IbStickyAreas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 163
                },
                {
                    "name": "typeEnum",
                    "defaultValue": "IbTableTitlesTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 161
                }
            ],
            "methodsClass": [
                {
                    "name": "handleDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "objectToEmit",
                    "args": [],
                    "optional": false,
                    "returnType": "{ item: IbTableItem; isChecked: any; form: UntypedFormGroup; }",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { UntypedFormGroup } from '@angular/forms';\nimport { IbModalMessageService } from '../../modal/modal-message.service';\nimport { IbTableItem } from '../models/table-item.model';\nimport { IbTemplateModel } from '../models/template.model';\nimport { IbStickyAreas, IbTableCellAligns, IbTableTitles, IbTableTitlesTypes } from '../models/titles.model';\n\n@Component({\n  selector: '[ib-table-row]',\n  template: `\n  <!--CHECKBOX-->\n  <td *ngIf=\"selectableRows\" [ibStickyColumn]=\"{ sticky: stickyAreas.includes(ibStickyArea.SELECT), key: 'ib-select'}\" [formGroup]=\"formRow\" style=\"text-align:center;\">\n    <mat-checkbox\n      formControlName=\"isChecked\"\n      (click)=\"$event.stopPropagation();\"\n      (change)=\"rowChecked.emit(objectToEmit())\"\n    ></mat-checkbox>\n  </td>\n\n  <td\n    *ngFor=\"let t of titles\"\n    style=\"padding: 10px 15px;\"\n    [ngStyle]=\"{\n       'text-align': (t.align) ? t.align : alignEnum.LEFT\n    }\"\n    class=\"{{ 'ib-table-column-type-' + t.type }}\"\n    [ibStickyColumn]=\"t\"\n    [ngClass]=\"(t.getClassByCondition) ? t.getClassByCondition(item) : null\">\n\n    <!--TYPE = ANY-->\n    <span *ngIf=\"!t.type || t.type === typeEnum.ANY\" class=\"{{t.className}}}\">\n      {{item[t.key] | translate}}\n    </span>\n\n    <!--TYPE = NUMBER-->\n    <span *ngIf=\"t.type === typeEnum.NUMBER\" class=\"{{t.className}}\">\n        {{item[t.key] | number:t.format:'it'}}\n    </span>\n\n    <!--TYPE = DATE-->\n    <span *ngIf=\"t.type === typeEnum.DATE\" class=\"{{t.className}}\">\n      {{item[t.key] | date: 'dd/MM/yyyy'}}\n    </span>\n\n    <!--TYPE = HOUR-->\n    <span *ngIf=\"t.type === typeEnum.HOUR\" class=\"{{t.className}}\">\n      {{item[t.key] | date: 'HH:mm:ss'}}\n    </span>\n\n    <!--TYPE = STRING-->\n    <span *ngIf=\"t.type === typeEnum.STRING\" class=\"{{t.className}}\">\n      {{item[t.key]}}\n    </span>\n\n\n    <!--TYPE = TAG-->\n    <span *ngIf=\"t.type === typeEnum.TAG\" class=\"{{t.className}}\">\n       <mat-chip-listbox>\n         <mat-chip-option\n           *ngFor=\"let tag of item[t.key]\"\n           [ngStyle]=\"{\n             'background-color': tag.background || '#f2536e',\n             '--mdc-chip-label-text-color': tag.color\n           }\"\n           >\n           {{ (tag.name | translate)?.toUpperCase() }}\n         </mat-chip-option>\n       </mat-chip-listbox>\n     </span>\n\n    <!--TYPE = COMBOBOX-->\n    <span *ngIf=\"t.type === typeEnum.COMBOBOX\" class=\"{{t.className}}\">\n      {{ t.comboOptions[item[t.key]] | translate }}\n    </span>\n\n    <!--TYPE = BOOLEAN-->\n    <span *ngIf=\"t.type === typeEnum.BOOLEAN\" class=\"{{t.className}}\">\n      <i\n        class=\"material-icons\"\n        style=\"color:green;\"\n        *ngIf=\"item[t.key] === true\">check\n      </i>\n      <i\n        class=\"material-icons\"\n        style=\"color:gray;\"\n        *ngIf=\"item[t.key] === false\">clear\n      </i>\n     </span>\n\n    <!--TYPE = INPUT-->\n    <span *ngIf=\"t.type === typeEnum.INPUT_NUMBER\" class=\"{{t.className}}\">\n      <mat-form-field>\n        <input\n          [(ngModel)]=\"item[t.key]\"\n          matInput\n          type=\"number\"\n          (change)=\"t.change ? t.change(item, $event['value']) : null\"\n          placeholder=\"{{ t.placeHolderInput | translate }}\"\n          value=\"{{item[t.key]}}\">\n        </mat-form-field>\n    </span>\n\n    <!--TYPE = CUSTOM-->\n    <span *ngIf=\"t.type === typeEnum.CUSTOM\" class=\"{{t.className}}\">\n      <ng-container\n        *ngTemplateOutlet=\"customItemTemplate[t.key]; context: objectToEmit()\">\n    </ng-container>\n    </span>\n  </td>\n  <td [ibStickyColumn]=\"{ sticky: stickyAreas.includes(ibStickyArea.TEMPLATE) && 'end', key: 'ib-template-'+btn.columnName}\"\n     style=\"text-align: center\" *ngFor=\"let btn of templateButtons\">\n    <ng-container\n      *ngTemplateOutlet=\"btn.template; context: objectToEmit()\">\n    </ng-container>\n  </td>\n  <td\n    [ibStickyColumn]=\"{ sticky: stickyAreas.includes(ibStickyArea.EDIT) && 'end', key: 'ib-edit' }\"\n    style=\"text-align:center;\" *ngIf=\"hasEdit\">\n    <i\n      class=\"material-icons ib-table-row-button\"\n      matRipple\n      (click)=\"$event.stopPropagation(); edit.emit(objectToEmit())\"\n    >{{ iconSet.edit }}</i>\n  </td>\n  <td\n    [ibStickyColumn]=\"{ sticky: stickyAreas.includes(ibStickyArea.DELETE) && 'end', key: 'ib-delete' }\"\n    style=\"text-align:center;\" *ngIf=\"hasDelete\">\n    <i\n      class=\"material-icons ib-table-row-button\"\n      matRipple\n      (click)=\"$event.stopPropagation(); handleDelete()\"\n    >{{ iconSet.delete }}</i>\n  </td>\n  <td\n    [ibStickyColumn]=\"{ sticky: stickyAreas.includes(ibStickyArea.SETTINGS) && 'end', key: 'ib-settings' }\"\n  ></td>\n\n  `\n})\n\nexport class IbTableRowComponent implements OnInit {\n  @Input() item: IbTableItem;\n  @Input() titles: IbTableTitles[] = [];\n  @Input() customItemTemplate: any;\n  @Input() selectableRows = true;\n  @Input() templateButtons: IbTemplateModel[] = [];\n  @Input() formRow: UntypedFormGroup;\n  @Input() hasEdit = false;\n  @Input() hasDelete = false;\n  @Input() deleteConfirm = true;\n  @Input() iconSet = {\n    edit: 'edit',\n    delete: 'delete'\n  };\n  @Input() stickyAreas = [];\n\n  @Output() rowChecked: EventEmitter<any> = new EventEmitter<any>();\n  @Output() edit: EventEmitter<any> = new EventEmitter<any>();\n  @Output() delete: EventEmitter<any> = new EventEmitter<any>();\n\n  typeEnum = IbTableTitlesTypes;\n  alignEnum = IbTableCellAligns;\n  ibStickyArea = IbStickyAreas;\n\n\n  objectToEmit() {\n    return { item: this.item, isChecked: (this.formRow.controls.isChecked.value || false), form: this.formRow };\n  }\n  constructor(private ibModal: IbModalMessageService) { }\n\n  ngOnInit() {\n  }\n\n  handleDelete() {\n    if (this.deleteConfirm) {\n      return this.ibModal.show({\n        title: 'shared.ibTable.confirmDeleteTitle',\n        message: 'shared.ibTable.confirmDeleteMessage'\n      }).subscribe(r => {\n        if (r) {\n          this.delete.emit(this.objectToEmit())\n        }\n      })\n    }\n\n    this.delete.emit(this.objectToEmit())\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ibModal",
                        "type": "IbModalMessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 168,
                "jsdoctags": [
                    {
                        "name": "ibModal",
                        "type": "IbModalMessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "IbTableStickyExampleComponent",
            "id": "component-IbTableStickyExampleComponent-bae8a12da43657d7f9209cb19b0096ee4a22c094641349c5756890095b7d01e97c275561e243f0ea83e307321f161e8c2f799d0fca9f74dbae8b27de231efc48",
            "file": "src/app/examples/table-example/table-sticky/table-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-table-example",
            "styleUrls": [
                "./table-example.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "table-example.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "defaultValue": "[\n    {\n      label: 'test accent',\n      color: 'accent',\n      handler: (selectedItems) => this.consolePrint(selectedItems)\n    },\n    {\n      label: 'test warn',\n      color: 'warn',\n      handler: (selectedItems) => this.consolePrint(selectedItems)\n    },\n    {\n      label: 'test primary',\n      color: 'primary',\n      handler: (selectedItems) => this.consolePrint(selectedItems)\n    },\n    {\n      label: 'test link',\n      color: 'link',\n      handler: (selectedItems) => this.consolePrint(selectedItems)\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTableAction[]",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "ibTable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTableComponent",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'ibTable', {static: true}"
                        }
                    ]
                },
                {
                    "name": "ibTableActionsPosition",
                    "defaultValue": "IbTableActionsPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "items",
                    "defaultValue": "sampleData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTableItem[]",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "pdfCustomStyles",
                    "defaultValue": "{\n    headStyles: { fillColor: [232, 202, 232] },\n    columnStyles: { sender: { halign: 'center' }},\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 105
                },
                {
                    "name": "pdfSetup",
                    "defaultValue": "{\n    orientation: 'p'\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "selectableRows",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "stickyAreas",
                    "defaultValue": "[\n    IbStickyAreas.HEADER,\n    IbStickyAreas.FOOTER,\n    IbStickyAreas.EDIT,\n    IbStickyAreas.DELETE,\n    IbStickyAreas.SELECT,\n    IbStickyAreas.SETTINGS\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "tableName",
                    "defaultValue": "'sticky'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "titles",
                    "defaultValue": "[\n    {\n      key: 'guid',\n      value: 'GUID',\n      type: IbTableTitlesTypes.CUSTOM,\n      width: '20%',\n    },\n    {\n      key: 'picture',\n      value: 'Link',\n      type: IbTableTitlesTypes.STRING,\n      filterable: true,\n      width: '20%',\n    },\n    {\n      key: 'company',\n      value: 'Company',\n      type: IbTableTitlesTypes.ANY,\n      filterable: true,\n      width: '10%',\n      sticky: 'start'\n    },\n    {\n      key: 'age',\n      value: 'Età',\n      type: IbTableTitlesTypes.NUMBER,\n      format: '1.0-0',\n      filterable: true,\n      width: '2%',\n    },\n    {\n      key: 'isActive',\n      value: 'Attivo',\n      type: IbTableTitlesTypes.BOOLEAN,\n      filterable: true,\n      width: '10%',\n    },\n    {\n      key: 'registered',\n      value: 'Data',\n      type: IbTableTitlesTypes.DATE,\n      filterable: true,\n      width: '10%'\n    },\n    {\n      key: 'label',\n      value: 'Etichetta',\n      type: IbTableTitlesTypes.TAG,\n      filterable: true,\n      width: '10%',\n      sticky: 'end',\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "consolePrint",
                    "args": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBaseElem",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "rowClass",
                    "args": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ 'evidence-row': boolean; }",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setValidators",
                    "args": [
                        {
                            "name": "form",
                            "type": "UntypedFormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UntypedFormGroup",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "UntypedFormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport { UntypedFormGroup, Validators } from '@angular/forms';\nimport { IbMatTextboxControl } from 'src/app/inobeta-ui/ui/material-forms/controls/textbox';\nimport { IbTableItem } from 'src/app/inobeta-ui/ui/table/models/table-item.model';\nimport { IbStickyAreas, IbTableAction, IbTableActionsPosition, IbTableTitlesTypes } from 'src/app/inobeta-ui/ui/table/models/titles.model';\nimport { IbTableComponent } from 'src/app/inobeta-ui/ui/table/table.component';\nimport { sampleData } from '../json-data';\n\n@Component({\n  selector: 'ib-table-example',\n  templateUrl: 'table-example.component.html',\n  styleUrls: ['./table-example.component.css']\n})\n//ANY, HOUR, COMBOBOX\nexport class IbTableStickyExampleComponent implements OnInit {\n  @ViewChild('ibTable', {static: true}) ibTable: IbTableComponent;\n  stickyAreas = [\n    IbStickyAreas.HEADER,\n    IbStickyAreas.FOOTER,\n    IbStickyAreas.EDIT,\n    IbStickyAreas.DELETE,\n    IbStickyAreas.SELECT,\n    IbStickyAreas.SETTINGS\n  ];\n  selectableRows = true;\n  tableName = 'sticky';\n  ibTableActionsPosition = IbTableActionsPosition;\n  titles = [\n    {\n      key: 'guid',\n      value: 'GUID',\n      type: IbTableTitlesTypes.CUSTOM,\n      width: '20%',\n    },\n    {\n      key: 'picture',\n      value: 'Link',\n      type: IbTableTitlesTypes.STRING,\n      filterable: true,\n      width: '20%',\n    },\n    {\n      key: 'company',\n      value: 'Company',\n      type: IbTableTitlesTypes.ANY,\n      filterable: true,\n      width: '10%',\n      sticky: 'start'\n    },\n    {\n      key: 'age',\n      value: 'Età',\n      type: IbTableTitlesTypes.NUMBER,\n      format: '1.0-0',\n      filterable: true,\n      width: '2%',\n    },\n    {\n      key: 'isActive',\n      value: 'Attivo',\n      type: IbTableTitlesTypes.BOOLEAN,\n      filterable: true,\n      width: '10%',\n    },\n    {\n      key: 'registered',\n      value: 'Data',\n      type: IbTableTitlesTypes.DATE,\n      filterable: true,\n      width: '10%'\n    },\n    {\n      key: 'label',\n      value: 'Etichetta',\n      type: IbTableTitlesTypes.TAG,\n      filterable: true,\n      width: '10%',\n      sticky: 'end',\n    }\n  ];\n  items: IbTableItem[] = sampleData\n\n  actions: IbTableAction[] = [\n    {\n      label: 'test accent',\n      color: 'accent',\n      handler: (selectedItems) => this.consolePrint(selectedItems)\n    },\n    {\n      label: 'test warn',\n      color: 'warn',\n      handler: (selectedItems) => this.consolePrint(selectedItems)\n    },\n    {\n      label: 'test primary',\n      color: 'primary',\n      handler: (selectedItems) => this.consolePrint(selectedItems)\n    },\n    {\n      label: 'test link',\n      color: 'link',\n      handler: (selectedItems) => this.consolePrint(selectedItems)\n    }\n  ];\n  pdfCustomStyles = {\n    headStyles: { fillColor: [232, 202, 232] },\n    columnStyles: { sender: { halign: 'center' }},\n  };\n\n  pdfSetup = {\n    orientation: 'p'\n  };\n  constructor() { }\n\n  ngOnInit(): void { console.log(this.ibTable)}\n\n  consolePrint(item) {\n    console.log(item);\n    console.log(this.ibTable.isValidForm(), this.ibTable.getFormValues());\n  }\n\n  getBaseElem() {\n    return new IbMatTextboxControl({\n      key: 'balance',\n      label: 'qt',\n      type: 'number',\n      required: true,\n      validators: [Validators.min(0)]\n    });\n  }\n\n  setValidators(form: UntypedFormGroup) {\n    form.controls.balance.setValidators([Validators.required, Validators.min(1)]);\n    return form;\n  }\n\n  rowClass(item) {\n    return {\n      'evidence-row': item.guid === 'e8ab3af6-9725-4163-8706-476b5dd09dfb'\n    };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/*ib-table ::ng-deep .table-header{\n  background-color: #FF4931;\n}\nib-table ::ng-deep button.mat-sort-header-button,\nib-table ::ng-deep #select-row-name,\nib-table ::ng-deep #delete-row-name,\nib-table ::ng-deep .table-header-title{\n  font-family: 'Roboto', 'Regular', sans-serif;\n  color: #ffffff !important;\n}\nib-table ::ng-deep .table-row td, ib-table-header ::ng-deep .table-header-title {\n  border: none !important;\n}\nib-table ::ng-deep .mat-sort-header-arrow, ib-table ::ng-deep .table-sort-indicator {\n  color: #FCEE21 !important;\n}\nib-table ::ng-deep .table-row:hover > td{\n  color: #515151;\n  background-color: #F7F7F7;\n}\nib-table ::ng-deep td {\n  background-color: #ffffff;\n}\n*/\n.modal-selector {\n  position: absolute;\n  width: 150px;\n  height: 200px;\n  background-color: white;\n  border: 1px solid black;\n  color: black;\n  z-index: 100;\n}\n\n.modal-row {\n  border: 1px solid black;\n  background-color: yellow;\n}\n",
                    "styleUrl": "./table-example.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 112
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-template #rowActionTemplate let-item=\"item\" let-isChecked=\"isChecked\">\n  <span class=\"delete-button\" (click)=\"$event.stopPropagation();consolePrint({item: item, isChecked: isChecked})\">\n      <i class=\"material-icons ib-table-row-button\" matRipple>search</i>\n  </span>\n</ng-template>\n\n<div fxLayout=\"row\">\n  <div fxFlex=\"10%\">example content on the left</div>\n  <div fxFlex=\"90%\">\n    <ib-table\n      #ibTable\n      [tableName]=\"tableName\"\n      [pdfCustomStyles]=\"pdfCustomStyles\"\n      [pdfSetup]=\"pdfSetup\"\n      [titles]=\"titles\"\n      [items]=\"items\"\n      [enableReduxStore]=\"true\"\n      [selectableRows]=\"selectableRows\"\n      [hasExport]=\"true\"\n      [hasAdd]=\"true\"\n      [hasEdit]=\"true\"\n      [hasDelete]=\"true\"\n      [stickyAreas]=\"stickyAreas\"\n      [customItemTemplate]=\"{ guid: lotTemplate }\"\n      [templateButtons]=\"[{\n        template: rowActionTemplate,\n        columnName: 'Action'\n      }]\"\n      [actions]=\"actions\"\n      [actionsPosition]=\"ibTableActionsPosition.BOTH\"\n      [rowClass]=\"rowClass\"\n      (add)=\"consolePrint('clicked on new')\"\n      (edit)=\"consolePrint({ msg: 'edit click', data: $event})\"\n      (delete)=\"consolePrint({ msg: 'delete click', data: $event})\"\n      (rowClicked)=\"consolePrint({ msg: 'row click', data: $event})\"\n      (rowChecked)=\"consolePrint({ msg: 'row selection change', data: $event})\"\n      >\n    <ng-template #lotTemplate let-item=\"item\">\n      <div style=\"font-weight: bold; color: red;\">{{item.guid}}</div>\n    </ng-template>\n  </ib-table>\n  </div>\n</div>\n\n\n\n"
        },
        {
            "name": "IbTableTotalRowApplyDialogComponent",
            "id": "component-IbTableTotalRowApplyDialogComponent-2e82d5e2cf828510c59c8ab1a3383a1f67fde1bbbd9d1c03430e8acc47f117ca0305f2f54390a10b2960d09adb795396076a40e618dcf2145f8f93df5ae5ed4f",
            "file": "src/app/inobeta-ui/ui/table/components/table-total-row/table-total-row-apply-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-table-row-apply-dialog",
            "styleUrls": [],
            "styles": [],
            "template": "<h1 mat-dialog-title>{{ 'shared.ibTable.func.dialog.title' | translate }}</h1>\n<mat-dialog-content>\n  <mat-form-field appearance=\"fill\" style=\"width: 100%\">\n    <mat-label>{{ 'shared.ibTable.func.dialog.selectFunction' | translate }}</mat-label>\n    <mat-select [(ngModel)]=\"function\">\n      <mat-option *ngFor=\"let function of functions\" [value]=\"function.value\">\n        {{function.viewValue | translate}}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n</mat-dialog-content>\n<div mat-dialog-actions align=\"end\">\n  <button mat-button color=\"warn\" [mat-dialog-close]=\"{\n    func: '_default'\n  }\" *ngIf=\"data.isSet\">{{ 'shared.ibTable.func.dialog.remove' | translate }}</button>\n  <button mat-button color=\"primary\" [mat-dialog-close]=\"{\n    func: function\n  }\">\n    {{ 'shared.ibTable.apply' | translate }}\n  </button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<IbTableTotalRowApplyDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "function",
                    "defaultValue": "'sum'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "functions",
                    "defaultValue": "Object.entries(TotalRowService.components)\n    .filter(([fun]) => fun !== '_default')\n    .map(([fun]) => ({ value: fun, viewValue: `shared.ibTable.func.${fun}.name`}))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { TotalRowService } from './total-row.service';\n\n@Component({\n  selector: 'ib-table-row-apply-dialog',\n  template: `\n    <h1 mat-dialog-title>{{ 'shared.ibTable.func.dialog.title' | translate }}</h1>\n    <mat-dialog-content>\n      <mat-form-field appearance=\"fill\" style=\"width: 100%\">\n        <mat-label>{{ 'shared.ibTable.func.dialog.selectFunction' | translate }}</mat-label>\n        <mat-select [(ngModel)]=\"function\">\n          <mat-option *ngFor=\"let function of functions\" [value]=\"function.value\">\n            {{function.viewValue | translate}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    </mat-dialog-content>\n    <div mat-dialog-actions align=\"end\">\n      <button mat-button color=\"warn\" [mat-dialog-close]=\"{\n        func: '_default'\n      }\" *ngIf=\"data.isSet\">{{ 'shared.ibTable.func.dialog.remove' | translate }}</button>\n      <button mat-button color=\"primary\" [mat-dialog-close]=\"{\n        func: function\n      }\">\n        {{ 'shared.ibTable.apply' | translate }}\n      </button>\n    </div>\n  `,\n})\nexport class IbTableTotalRowApplyDialogComponent {\n  function = 'sum';\n  functions = Object.entries(TotalRowService.components)\n    .filter(([fun]) => fun !== '_default')\n    .map(([fun]) => ({ value: fun, viewValue: `shared.ibTable.func.${fun}.name`}));\n\n  constructor(\n    // public trService: TotalRowService,\n    public dialogRef: MatDialogRef<IbTableTotalRowApplyDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any) { } \n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<IbTableTotalRowApplyDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<IbTableTotalRowApplyDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "IbTableTotalRowComponent",
            "id": "component-IbTableTotalRowComponent-9ce4b681c93d3249e403baf01012eeaff0c7982ca8922b0812c267f436c43ee3b7d1e4d435bd7f3073ebaa0febf67f725c7a36ed65e75c35bda9deab7d12339c",
            "file": "src/app/inobeta-ui/ui/table/components/table-total-row/table-total-row.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[ib-table-total-row]",
            "styleUrls": [
                "./table-total-row.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./table-total-row.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "filteredData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "IbTableItem[]",
                    "decorators": []
                },
                {
                    "name": "hasDelete",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hasEdit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selectableRows",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "sortedData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "IbTableItem[]",
                    "decorators": []
                },
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "templateButtons",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "IbTemplateModel[]",
                    "decorators": []
                },
                {
                    "name": "testData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "{}",
                    "decorators": []
                },
                {
                    "name": "titles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "IbTableTitles[]",
                    "decorators": []
                },
                {
                    "name": "totalRowDef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "IbTableTotalRowState[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getTotalRowCellComponent",
                    "args": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IbTableItem } from '../../models/table-item.model';\nimport { IbTemplateModel } from '../../models/template.model';\nimport { IbTableTitles } from '../../models/titles.model';\nimport { IbTableTotalRowState } from '../../store/reducers/table.reducer';\nimport { TotalRowService } from './total-row.service';\n\n@Component({\n  selector: '[ib-table-total-row]',\n  templateUrl: './table-total-row.component.html',\n  styleUrls: ['./table-total-row.component.css']\n})\nexport class IbTableTotalRowComponent {\n  @Input() titles: IbTableTitles[] = [];\n  @Input() selectableRows = true;\n  @Input() templateButtons: IbTemplateModel[] = [];\n  @Input() hasEdit = false;\n  @Input() hasDelete = false;\n  @Input() testData = [];\n  @Input() sortedData: IbTableItem[];\n  @Input() filteredData: IbTableItem[];\n  @Input() totalRowDef: IbTableTotalRowState[];\n  @Input() tableName: string;\n\n  constructor(\n    private totalRowService: TotalRowService\n  ){}\n\n  public getTotalRowCellComponent(key) {\n    return this.totalRowService.getComponentByFunctionName(this.totalRowDef?.find(t => t.columnName === key)?.func);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".ib-table-total-row-cell {\n  box-shadow: 0 -1px #ccc;\n}\n\n.ib-table-total-row-cell ::ng-deep div {\n  display: flex;\n  flex-direction: column;\n}",
                    "styleUrl": "./table-total-row.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "totalRowService",
                        "type": "TotalRowService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "totalRowService",
                        "type": "TotalRowService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<td *ngIf=\"selectableRows\" class=\"ib-table-total-row-cell\"></td>\n<td ib-total-row-default-cell\n  *ngFor=\"let t of titles\"\n  [ibStickyColumn]=\"t\"\n  style=\"padding: 10px 15px; text-align: right;\"\n  class=\"ib-table-column-type-number ib-table-total-row-cell\"\n  [title]=\"t\"\n  [sortedData]=\"sortedData\"\n  [filteredData]=\"filteredData\"\n  [initialCell]=\"getTotalRowCellComponent(t.key)\"\n  [tableName]=\"tableName\"\n  ></td>\n<td *ngFor=\"let i of templateButtons\" class=\"ib-table-total-row-cell\"></td>\n<td *ngIf=\"hasEdit\" class=\"ib-table-total-row-cell\"></td>\n<td *ngIf=\"hasDelete\" class=\"ib-table-total-row-cell\"></td>\n<td class=\"ib-table-total-row-cell\"></td>\n"
        },
        {
            "name": "IbTagFilter",
            "id": "component-IbTagFilter-d67995354d55d63edd01541d4ed5157edaf1ecc9af0cc9999c2742e3f8ba43b09e7b7e8ec7731d6fb1d78b90cf9d11c0e6457d0bc8c0faf49c71b621d46a704b",
            "file": "src/app/inobeta-ui/ui/kai-filter/filters/tag/filter-tag.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: IbFilterBase, useExisting: forwardRef(() => IbTagFilter) }"
                }
            ],
            "selector": "ib-tag-filter",
            "styleUrls": [
                "./filter-tag.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./filter-tag.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "multiple",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "ibTableColumnName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "IbFilterBase"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "IbFilterBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_options",
                    "defaultValue": "new Set()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Set<string>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "build",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "matSelectionList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSelectionList",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSelectionList"
                        }
                    ]
                },
                {
                    "name": "searchCriteria",
                    "defaultValue": "new FormControl([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFilterButton",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "IbFilterButton"
                        }
                    ],
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFilter",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "applyFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "IbFilterBase"
                    }
                },
                {
                    "name": "populateOptionsFromColumn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "update",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "update",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  forwardRef,\n  Input,\n  ViewChild,\n  ViewEncapsulation,\n} from \"@angular/core\";\nimport { IbFilterBase } from \"../base/filter-base\";\nimport { MatSelectionList } from \"@angular/material/list\";\nimport { FormControl } from \"@angular/forms\";\nimport { IbFilterDef } from \"../../filter.types\";\nimport { eq, or } from \"../../filters\";\n\n@Component({\n  selector: \"ib-tag-filter\",\n  templateUrl: \"./filter-tag.component.html\",\n  styleUrls: [\"./filter-tag.component.scss\"],\n  providers: [\n    { provide: IbFilterBase, useExisting: forwardRef(() => IbTagFilter) },\n  ],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class IbTagFilter extends IbFilterBase {\n  @ViewChild(MatSelectionList) matSelectionList: MatSelectionList;\n\n  private _options: Set<string> = new Set();\n\n  searchCriteria = new FormControl([]);\n\n  @Input() multiple = true;\n  @Input()\n  set options(value: string[]) {\n    value = value.sort((a, b) => (a.toLowerCase() > b.toLowerCase() ? 1 : -1));\n    this._options = new Set(value);\n  }\n\n  get options() {\n    return Array.from(this._options);\n  }\n\n  get displayValue() {\n    const items = this.selected;\n    if (!items || items?.length == 0) {\n      return \"\";\n    }\n\n    return items[0].value;\n  }\n\n  get displayLength() {\n    return this.selected?.length > 1 ? ` +${this.selected.length - 1}` : \"\";\n  }\n\n  get selected() {\n    return this.matSelectionList?.selectedOptions?.selected;\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (!this._options.size && this.filter?.ibTable) {\n      this.populateOptionsFromColumn();\n    }\n  }\n\n  populateOptionsFromColumn() {\n    this.options = this.filter.ibTable.dataSource.data.map((x) => x[this.name]);\n  }\n\n  applyFilter() {\n    if (!this.selected.length) {\n      this.searchCriteria.patchValue(null);\n    }\n\n    this.filter.update();\n    this.button.closeMenu();\n  }\n\n  build = (): IbFilterDef =>\n    this.selected?.length ? or(this.selected.map((s) => eq(s.value))) : null;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"@angular/material\" as mat;\nsection.ib-tag-filter {\n  overflow-y: auto;\n  height: 300px;\n  @include mat.list-density(-4);\n}\n\nspan.ib-filter-value {\n  display: table-cell;\n\n  max-width: 32ch;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n}\n\n:host cdk-virtual-scroll-viewport {\n  height: max-content;\n}\n",
                    "styleUrl": "./filter-tag.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "IbFilterBase",
            "accessors": {
                "options": {
                    "name": "options",
                    "setSignature": {
                        "name": "options",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "",
                        "line": 37
                    }
                },
                "displayValue": {
                    "name": "displayValue",
                    "getSignature": {
                        "name": "displayValue",
                        "type": "",
                        "returnType": "",
                        "line": 41
                    }
                },
                "displayLength": {
                    "name": "displayLength",
                    "getSignature": {
                        "name": "displayLength",
                        "type": "",
                        "returnType": "",
                        "line": 50
                    }
                },
                "selected": {
                    "name": "selected",
                    "getSignature": {
                        "name": "selected",
                        "type": "",
                        "returnType": "",
                        "line": 54
                    }
                }
            },
            "templateData": "<ib-filter-button>\n  <span ib-filter-name *ngIf=\"!isDirty || !searchCriteria.value?.length\"\n    ><ng-content></ng-content\n  ></span>\n  <span ib-filter-value>\n    <span class=\"ib-filter-value\">{{ displayValue }}</span\n    >{{ displayLength }}\n  </span>\n\n  <section [formGroup]=\"filter?.form\">\n    <section class=\"ib-tag-filter\" cdkVirtualScrollingElement>\n      <mat-selection-list\n        [multiple]=\"multiple\"\n        [formControlName]=\"name\"\n        disableRipple=\"true\"\n      >\n        <cdk-virtual-scroll-viewport\n          appendOnly\n          itemSize=\"40\"\n          minBufferPx=\"300\"\n          maxBufferPx=\"300\"\n        >\n          <mat-list-option\n            togglePosition=\"before\"\n            checkboxPosition=\"before\"\n            *cdkVirtualFor=\"let option of options\"\n            [value]=\"option\"\n          >\n            {{ option }}\n          </mat-list-option>\n        </cdk-virtual-scroll-viewport>\n      </mat-selection-list>\n    </section>\n  </section>\n\n  <ib-filter-actions>\n    <ib-apply-filter-button (click)=\"applyFilter()\"></ib-apply-filter-button>\n    <button mat-button (click)=\"clear()\" [disabled]=\"!isDirty\">\n      {{ \"shared.ibFilter.clear\" | translate }}\n    </button>\n  </ib-filter-actions>\n</ib-filter-button>\n"
        },
        {
            "name": "IbTextFilter",
            "id": "component-IbTextFilter-291269d3a9a5764e4778385b3230bcd9a6f2cf130ed67070f64027dd7601c1266eef170c6f613d1e45f3bb7089f439608a7b1de3990e4b49794fde23a37b6bda",
            "file": "src/app/inobeta-ui/ui/kai-filter/filters/text/filter-text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: IbFilterBase, useExisting: forwardRef(() => IbTextFilter) }"
                }
            ],
            "selector": "ib-text-filter",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "filter-text.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ibTableColumnName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "IbFilterBase"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "IbFilterBase"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "build",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "operators",
                    "defaultValue": "[\n    {\n      value: IbFilterOperator.EQUALS,\n      displayValue: \"shared.ibFilter.eq\",\n    },\n    {\n      value: IbFilterOperator.CONTAINS,\n      displayValue: \"shared.ibFilter.contains\",\n    },\n    {\n      value: IbFilterOperator.STARTS_WITH,\n      displayValue: \"shared.ibFilter.startsWith\",\n    },\n    {\n      value: IbFilterOperator.ENDS_WITH,\n      displayValue: \"shared.ibFilter.endsWith\",\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "searchCriteria",
                    "defaultValue": "new FormGroup({\n    operator: new FormControl(null, [Validators.required]),\n    value: new FormControl(\"\", [Validators.required]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFilterButton",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "IbFilterButton"
                        }
                    ],
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbFilter",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "IbFilterBase"
                    }
                },
                {
                    "name": "applyFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "update",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "update",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                },
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "_IbFilterBase"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, forwardRef } from \"@angular/core\";\nimport { IbFilterBase } from \"../base/filter-base\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { IbFilterDef, IbFilterOperator } from \"../../filter.types\";\nimport { none } from \"../../filters\";\n\n@Component({\n  selector: \"ib-text-filter\",\n  templateUrl: \"filter-text.component.html\",\n  providers: [\n    { provide: IbFilterBase, useExisting: forwardRef(() => IbTextFilter) },\n  ],\n})\nexport class IbTextFilter extends IbFilterBase {\n  searchCriteria = new FormGroup({\n    operator: new FormControl(null, [Validators.required]),\n    value: new FormControl(\"\", [Validators.required]),\n  });\n\n  operators = [\n    {\n      value: IbFilterOperator.EQUALS,\n      displayValue: \"shared.ibFilter.eq\",\n    },\n    {\n      value: IbFilterOperator.CONTAINS,\n      displayValue: \"shared.ibFilter.contains\",\n    },\n    {\n      value: IbFilterOperator.STARTS_WITH,\n      displayValue: \"shared.ibFilter.startsWith\",\n    },\n    {\n      value: IbFilterOperator.ENDS_WITH,\n      displayValue: \"shared.ibFilter.endsWith\",\n    },\n  ];\n\n  get isDirty() {\n    return this.searchCriteria.valid;\n  }\n\n  get displayCondition() {\n    const operator = this.searchCriteria.value.operator;\n    return this.operators.find((o) => o.value === operator)?.displayValue ?? \"\";\n  }\n\n  get displayValue() {\n    return this.searchCriteria.value.value;\n  }\n\n  build = (): IbFilterDef => {\n    if (this.searchCriteria.invalid) {\n      return none();\n    }\n    \n    return ({\n      operator: this.searchCriteria.value.operator,\n      value: this.searchCriteria.value.value,\n    });\n  };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": "IbFilterBase",
            "accessors": {
                "isDirty": {
                    "name": "isDirty",
                    "getSignature": {
                        "name": "isDirty",
                        "type": "",
                        "returnType": "",
                        "line": 39
                    }
                },
                "displayCondition": {
                    "name": "displayCondition",
                    "getSignature": {
                        "name": "displayCondition",
                        "type": "",
                        "returnType": "",
                        "line": 43
                    }
                },
                "displayValue": {
                    "name": "displayValue",
                    "getSignature": {
                        "name": "displayValue",
                        "type": "",
                        "returnType": "",
                        "line": 48
                    }
                }
            },
            "templateData": "<ib-filter-button>\n  <span ib-filter-name><ng-content></ng-content></span>\n  <span ib-filter-value *ngIf=\"isDirty\">\n    {{ displayCondition | translate | lowercase }} \"{{ displayValue }}\"\n  </span>\n\n  <section [formGroup]=\"filter?.form\" style=\"padding: 0.5em 1em 0 1em\">\n    <section [formGroupName]=\"name\">\n      <mat-form-field style=\"width: 100%\">\n        <mat-label>{{ \"shared.ibFilter.condition\" | translate }}</mat-label>\n        <mat-select formControlName=\"operator\">\n          <mat-option\n            *ngFor=\"let operator of operators\"\n            [value]=\"operator.value\"\n          >\n            {{ operator.displayValue | translate }}\n          </mat-option>\n        </mat-select>\n        <mat-error\n          >{{ \"shared.ibFilter.condition\" | translate }}\n          {{ \"shared.ibForms.errors.required\" | translate }}</mat-error\n        >\n      </mat-form-field>\n      <mat-form-field style=\"width: 100%\">\n        <mat-label>{{ \"shared.ibFilter.value\" | translate }}</mat-label>\n        <input matInput formControlName=\"value\" />\n        <mat-error\n          >{{ \"shared.ibFilter.value\" | translate }}\n          {{ \"shared.ibForms.errors.required\" | translate }}</mat-error\n        >\n      </mat-form-field>\n    </section>\n  </section>\n\n  <ib-filter-actions>\n    <ib-apply-filter-button (click)=\"applyFilter()\"></ib-apply-filter-button>\n    <button mat-button (click)=\"clear()\" [disabled]=\"!isDirty\">\n      {{ \"shared.ibFilter.clear\" | translate }}\n    </button>\n  </ib-filter-actions>\n</ib-filter-button>\n"
        },
        {
            "name": "IbToastExampleComponent",
            "id": "component-IbToastExampleComponent-231dd2803f2ee5b9ab0fa48f1a3034de23203733a4c1badf180390fc2c2a409c2180b52c89f6da967551b7728437e66a2f4006628b923acc4c1dd83c4f26356e",
            "file": "src/app/examples/toast-example/toast-example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-toast-example",
            "styleUrls": [],
            "styles": [],
            "template": "<div fxLayout=\"column\" fxLayoutGap=\"10px\" fxFlex=\"30%\">\n  <button (click)=\"open()\">open success toast</button>\n  <button (click)=\"open('warning')\">open warning toast</button>\n  <button (click)=\"open('error')\">open error toast</button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'success'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'success'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { IbToastNotification } from 'src/app/inobeta-ui/ui/toast/toast.service';\n\n@Component({\n  selector: 'ib-toast-example',\n  template: `\n  <div fxLayout=\"column\" fxLayoutGap=\"10px\" fxFlex=\"30%\">\n    <button (click)=\"open()\">open success toast</button>\n    <button (click)=\"open('warning')\">open warning toast</button>\n    <button (click)=\"open('error')\">open error toast</button>\n  </div>\n  `\n})\n\nexport class IbToastExampleComponent {\n  constructor(private toast: IbToastNotification) { }\n\n  open(type = 'success'){\n    this.toast.open('examples.toastMessage', type)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toast",
                        "type": "IbToastNotification",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "toast",
                        "type": "IbToastNotification",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "IbTotalRowAddCellComponent",
            "id": "component-IbTotalRowAddCellComponent-12378c13f2289e768cee0ddbe1c2b3b8c167360b73cb72734c08c2dccaa728b3bd0b68891ea7cf3336c23ebab39e17ddf19473848f6c9b169cd326befff61105",
            "file": "src/app/inobeta-ui/ui/table/components/table-total-row/cells/ib-total-row-add-cell/ib-total-row-add-cell.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-total-row-add-cell",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./ib-total-row-add-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "IbTotalRowBaseCellComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "addCell",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "IbTotalRowBaseCellComponent"
                    }
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { IbTotalRowBaseCellComponent } from '../ib-total-row-base-cell/ib-total-row-base-cell.component';\nimport { TotalRowCell } from '../ib-total-row-default-cell/ib-total-row-default-cell.component';\n\n@Component({\n  selector: 'ib-total-row-add-cell',\n  templateUrl: './ib-total-row-add-cell.component.html',\n})\nexport class IbTotalRowAddCellComponent extends IbTotalRowBaseCellComponent implements TotalRowCell {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": "IbTotalRowBaseCellComponent",
            "implements": [
                "TotalRowCell"
            ],
            "templateData": "<button mat-button color=\"primary\" (click)=\"addCell.emit()\">\n  <mat-icon>add</mat-icon>\n  {{ 'shared.ibTable.func.add' | translate }}\n</button>\n"
        },
        {
            "name": "IbTotalRowAvgCellComponent",
            "id": "component-IbTotalRowAvgCellComponent-1634739957066ea940517ff75141f6680b7ce11dfafb2b59019aaaaf0fa515ff06b3cd881de21188be761882b067f1c9c686bf8e284a3d1d3e7875bd4166d91d",
            "file": "src/app/inobeta-ui/ui/table/components/table-total-row/cells/ib-total-row-avg-cell/ib-total-row-avg-cell.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-total-row-avg-cell",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./ib-total-row-avg-cell.template.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "IbTotalRowBaseCellComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "addCell",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "IbTotalRowBaseCellComponent"
                    }
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "apply",
                    "args": [
                        {
                            "name": "rows",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rows",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { IbTotalRowBaseCellComponent } from '../ib-total-row-base-cell/ib-total-row-base-cell.component';\n\n@Component({\n  selector: 'ib-total-row-avg-cell',\n  templateUrl: './ib-total-row-avg-cell.template.html',\n})\nexport class IbTotalRowAvgCellComponent extends IbTotalRowBaseCellComponent {\n  apply(rows: any[]) {\n    return rows.reduce((acc, cur) => acc + cur[this.data.title.key], 0) / rows.length;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": "IbTotalRowBaseCellComponent",
            "templateData": "<div style=\"white-space:nowrap;\" class=\"ib-total-row-avg-cell\" >\n  <span>\n    {{ 'shared.ibTable.func.avg.currentPage' | translate }}\n    {{ apply(data.sortedData) | number:data.title.format:'it' }}\n  </span>\n  <span>\n    {{ 'shared.ibTable.func.avg.allPages' | translate }}\n    {{ apply(data.filteredData) | number:data.title.format:'it' }}\n  </span>\n  <button mat-button color=\"primary\" (click)=\"addCell?.emit()\">\n    <mat-icon>loop</mat-icon>\n    {{ 'shared.ibTable.func.change' | translate }}\n  </button>\n</div>\n"
        },
        {
            "name": "IbTotalRowBaseCellComponent",
            "id": "component-IbTotalRowBaseCellComponent-47eccc35070d2d7eabf841e65c978da36959b9d453da4504ac72a5491c5c1aff008cf7601454b8399964be97c18cdbecb587d4f551885cdc11f002f2eebf8cb5",
            "file": "src/app/inobeta-ui/ui/table/components/table-total-row/cells/ib-total-row-base-cell/ib-total-row-base-cell.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-total-row-base-cell",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "addCell",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { TotalRowCell } from '../ib-total-row-default-cell/ib-total-row-default-cell.component';\n\n@Component({\n  selector: 'ib-total-row-base-cell',\n  template: ``,\n})\nexport class IbTotalRowBaseCellComponent implements TotalRowCell {\n  @Input() data: any;\n  @Output() addCell = new EventEmitter<any>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "TotalRowCell"
            ]
        },
        {
            "name": "IbTotalRowDefaultCellComponent",
            "id": "component-IbTotalRowDefaultCellComponent-5b7881dcab62641449e8c56ef52691f8769e615544cd765ded05443d7e92dd0151527ec137230752261dcd72e3e8b7ff56c40a8db0ba81394f03433643e4289f",
            "file": "src/app/inobeta-ui/ui/table/components/table-total-row/cells/ib-total-row-default-cell/ib-total-row-default-cell.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[ib-total-row-default-cell]",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-template cellHost></ng-template>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "filteredData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "IbTableItem[]",
                    "decorators": []
                },
                {
                    "name": "initialCell",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "Type<any>",
                    "decorators": []
                },
                {
                    "name": "sortedData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "IbTableItem[]",
                    "decorators": []
                },
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "IbTableTitles",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cellHost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTableTotalRowCellDirective",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "IbTableTotalRowCellDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "componentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<IbTotalRowBaseCellComponent>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleAddCell",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "handleDialogClosed",
                    "args": [
                        {
                            "name": "result",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadComponent",
                    "args": [
                        {
                            "name": "component",
                            "type": "Type<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "Type<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ComponentFactoryResolver, ComponentRef, Directive, Input, OnChanges, OnInit, SimpleChanges, Type, ViewChild, ViewContainerRef } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Store } from '@ngrx/store';\nimport { IbTableItem } from '../../../../models/table-item.model';\nimport { IbTableTitles, IbTableTitlesTypes } from '../../../../models/titles.model';\nimport { ibTableActionSetTotalRowCell } from '../../../../store/actions/table.actions';\nimport { IbTableTotalRowApplyDialogComponent } from '../../table-total-row-apply-dialog.component';\nimport { IbTotalRowAddCellComponent } from '../ib-total-row-add-cell/ib-total-row-add-cell.component';\nimport { IbTotalRowBaseCellComponent } from '../ib-total-row-base-cell/ib-total-row-base-cell.component';\n\n@Directive({\n  selector: '[cellHost]',\n})\nexport class IbTableTotalRowCellDirective {\n  constructor(public viewContainerRef: ViewContainerRef) { }\n}\n\nexport interface TotalRowCell {\n  data: any;\n}\n\n@Component({\n  selector: '[ib-total-row-default-cell]',\n  template: '<ng-template cellHost></ng-template>'\n})\nexport class IbTotalRowDefaultCellComponent implements OnInit, OnChanges {\n  @Input() title: IbTableTitles;\n  @Input() sortedData: IbTableItem[];\n  @Input() filteredData: IbTableItem[];\n  @Input() initialCell: Type<any>;\n  @Input() tableName: string;\n\n  @ViewChild(IbTableTotalRowCellDirective, { static: true }) cellHost: IbTableTotalRowCellDirective;\n\n  private componentRef: ComponentRef<IbTotalRowBaseCellComponent>;\n\n  constructor(\n    public dialog: MatDialog,\n    private store: Store,\n    private componentFactoryResolver: ComponentFactoryResolver) { }\n\n  ngOnInit(): void {\n    if (this.initialCell) {\n      return this.loadComponent(this.initialCell);\n    }\n\n    if (this.title.type === IbTableTitlesTypes.NUMBER) {\n      this.loadComponent(IbTotalRowAddCellComponent);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const initialCellChanges = changes.initialCell;\n    const sortedDataChanges = changes.sortedData;\n\n    const shouldChange = this.componentRef && initialCellChanges && !initialCellChanges.isFirstChange();\n    if (shouldChange) {\n      this.loadComponent(this.initialCell);\n    }\n\n    if (sortedDataChanges && !sortedDataChanges.isFirstChange() && this.componentRef) {\n      this.componentRef.instance.data = {\n        ...this.componentRef.instance.data,\n        sortedData: this.sortedData,\n        filteredData: this.filteredData\n      };\n    }\n  }\n\n  loadComponent(component: Type<any>) {\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);\n    const viewContainerRef = this.cellHost.viewContainerRef;\n    viewContainerRef.clear();\n\n    this.componentRef = viewContainerRef.createComponent<any>(componentFactory);\n    this.componentRef.instance.data = {\n      title: this.title,\n      sortedData: this.sortedData,\n      filteredData: this.filteredData,\n    };\n    this.componentRef.instance.addCell.subscribe(this.handleAddCell.bind(this));\n  }\n\n  openDialog() {\n    const dialog = this.dialog.open(IbTableTotalRowApplyDialogComponent, {\n      width: '380px',\n      data: { isSet: Boolean(this.initialCell) }\n    });\n    dialog.afterClosed().subscribe(this.handleDialogClosed.bind(this));\n  }\n\n  private handleAddCell() {\n    this.openDialog();\n  }\n\n  private handleDialogClosed(result: any) {\n    if (!result) {\n      return;\n    }\n    console.log('result', result);\n    // this.loadComponent(result.component);\n    this.store.dispatch(ibTableActionSetTotalRowCell({\n      state: {\n        columnName: this.title.key,\n        func: result.func\n      },\n      tableName: this.tableName\n    }));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ]
        },
        {
            "name": "IbTotalRowSumCellComponent",
            "id": "component-IbTotalRowSumCellComponent-c860f82c2add484144ea0df848642f1fbe231178697b96675b7e3c13621ce149537fc8fbd8fb9114554adc0a63d33e6928499e68aaeb002e204f77091c3b73be",
            "file": "src/app/inobeta-ui/ui/table/components/table-total-row/cells/ib-total-row-sum-cell/total-row-sum-cell.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-total-row-sum-cell",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./total-row-sum-cell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": [],
                    "inheritance": {
                        "file": "IbTotalRowBaseCellComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "addCell",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "IbTotalRowBaseCellComponent"
                    }
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "apply",
                    "args": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { IbTotalRowBaseCellComponent } from '../ib-total-row-base-cell/ib-total-row-base-cell.component';\nimport { TotalRowCell } from '../ib-total-row-default-cell/ib-total-row-default-cell.component';\n\n@Component({\n  selector: 'ib-total-row-sum-cell',\n  templateUrl: './total-row-sum-cell.component.html',\n  styles: []\n})\nexport class IbTotalRowSumCellComponent extends IbTotalRowBaseCellComponent implements TotalRowCell {\n  apply(data: any[]) {\n    return data.reduce((acc, cur) => acc + cur[this.data.title.key], 0);\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": "IbTotalRowBaseCellComponent",
            "implements": [
                "TotalRowCell"
            ],
            "templateData": "<div style=\"white-space:nowrap;\" class=\"ib-total-row-sum-cell\">\n  <span>\n    {{ 'shared.ibTable.func.sum.currentPage' | translate }}\n    {{ apply(data.sortedData) | number:data.title.format:'it' }}\n  </span>\n  <span>\n    {{ 'shared.ibTable.func.sum.allPages' | translate }}\n    {{ apply(data.filteredData) | number:data.title.format:'it' }}\n  </span>\n  <button mat-button color=\"primary\" (click)=\"addCell?.emit()\">\n    <mat-icon>loop</mat-icon>\n    {{ 'shared.ibTable.func.change' | translate }}\n  </button>\n</div>\n"
        },
        {
            "name": "IbTranslateCell",
            "id": "component-IbTranslateCell-07b3d0b60079370a6cb133bb26f46177038dffd109032f4fd143c5dafdc436b63d10cd18e068cfaa42be48124359676e876a286abe3b85a0154b08cd3d042563",
            "file": "src/app/inobeta-ui/ui/kai-table/cells.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-cell-translate",
            "styleUrls": [],
            "styles": [],
            "template": "{{text()}}",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbCellData",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "IB_CELL_DATA"
                        },
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "IbCell"
                    }
                },
                {
                    "name": "text",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "translate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TranslateService",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { formatDate, formatNumber } from \"@angular/common\";\nimport { Component, ChangeDetectionStrategy, Inject, Optional } from \"@angular/core\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport { IB_CELL_DATA } from \"./table.component\";\nimport { IbCellData, IbColumnDef } from \"./table.types\";\n\n@Component({\n  selector: 'ib-cell',\n  template: '<div class=\"ib-cell-{{this.column.columnDef}}\">{{column.cell(row)}}</div>',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IbCell {\n  get cell() { return this.data.column.cell(this.data.row) }\n  get column() { return this.data.column }\n  get row() { return this.data.row }\n  get send() { return this.data.send }\n\n  constructor(@Inject(IB_CELL_DATA) @Optional() public data: IbCellData) { }\n}\n\ninterface IbContextAction {\n  /** Unique action type identifier. Used in `IbTableRowEvent.type` */\n  type: string;\n  /** Icon name for the action. Only supports material icons names. */\n  icon?: string;\n}\n\n@Component({\n  selector: 'ib-cell-ctx',\n  template: `<div *ngFor=\"let action of actions\" class=\"action-section ib-action-{{action.type}}\">\n    <button mat-icon-button (click)=\"send({ type: action.type, row: row }); $event.stopPropagation();\">\n      <mat-icon>{{ action?.icon ?? action.type }}</mat-icon>\n    </button>\n</div>`,\n  styles: [`\n  :host {\n    display: flex;\n    gap: 4px;\n    justify-content: flex-end;\n  }\n\n  .button-infos {\n    cursor: pointer;\n    user-select: none;\n  }`],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IbContextActionCell extends IbCell {\n  get actions(): IbContextAction[] { return this.data.column.cell(this.data.row) }\n}\n\n@Component({\n  selector: 'ib-cell-translate',\n  template: `{{text()}}`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IbTranslateCell extends IbCell {\n  text = () => this.translate.instant(this.cell.key, this.cell.params);\n  constructor(\n    @Inject(IB_CELL_DATA) @Optional() public data: IbCellData,\n    public translate: TranslateService) {\n    super(data);\n  }\n}\n\n/**\n *\n * @param {cell} cell - Data accessor. Same as `IbColumnDef.cell`, but returns\n *  an {IbContextAction} array.\n * @returns\n */\nexport const useContextCell = <T>(cell: (e: T) => IbContextAction[]): IbColumnDef => ({\n  component: IbContextActionCell,\n  columnDef: '_ctxActions',\n  header: '',\n  cell,\n})\nexport const useContextColumn = useContextCell;\n\nexport const useColumn = <T>(columnName: string, propertyName?: string, sort?: boolean): IbColumnDef => ({\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => e[propertyName ?? columnName],\n  sort\n});\n\nexport const useDateColumn = <T>(\n  columnName: string,\n  propertyName?: string,\n  sort?: boolean,\n  format: string = 'dd/MM/yyyy HH:mm z',\n  locale: string = 'it'\n): IbColumnDef => ({\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => `${formatDate(e[propertyName ?? columnName], format, locale)}`,\n  sort\n});\n\n\nexport const useNumberColumn = <T>(\n  columnName: string,\n  propertyName?: string,\n  sort?: boolean,\n  format: string = '1.2-2',\n  locale: string = 'it'\n): IbColumnDef => ({\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => `${formatNumber(e[propertyName ?? columnName], locale, format)}`,\n  sort\n});\n\nexport const useTranslateColumn = <T>(\n  columnName: string,\n  propertyName?: string,\n  sort?: boolean,\n  params: any = {},\n): IbColumnDef => ({\n  component: IbTranslateCell,\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => ({ key: e[propertyName ?? columnName], params }),\n  sort\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "IbCellData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "IbCellData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "IbCell"
        },
        {
            "name": "IbUploaderComponent",
            "id": "component-IbUploaderComponent-33df715c38bc276ccdb4d4d4ec41714b974d3adeb02fe8d205228117f093555569ab4e459d81c181239523750ccdddabd762cf4eadc595963850566868747a72",
            "file": "src/app/inobeta-ui/ui/uploader/uploader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-uploader",
            "styleUrls": [],
            "styles": [],
            "template": "<div fxFlex fxLayout=\"column\" fxLayoutAlign=\"center center\">\n  <input (change)=\"onChooseChange()\" #uploader style=\"display:none;\"type=\"file\"/>\n  <button fxFlex mat-button (click)=\"onChooseClick()\" >{{textKey | translate}}</button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "textKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onFileSelected",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "uploader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'uploader'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onChooseChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChooseClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, EventEmitter, Input, Output, ViewChild} from '@angular/core';\n\n@Component ({\n  selector: 'ib-uploader',\n  template: `\n    <div fxFlex fxLayout=\"column\" fxLayoutAlign=\"center center\">\n      <input (change)=\"onChooseChange()\" #uploader style=\"display:none;\"type=\"file\"/>\n      <button fxFlex mat-button (click)=\"onChooseClick()\" >{{textKey | translate}}</button>\n    </div>\n  `\n})\nexport class IbUploaderComponent {\n  @ViewChild('uploader') uploader !: ElementRef;\n  @Input() textKey: string;\n  @Output() onFileSelected: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor() {}\n\n  onChooseClick() {\n    this.uploader.nativeElement.click();\n  }\n\n  onChooseChange() {\n    if (this.uploader.nativeElement.files && this.uploader.nativeElement.files.length > 0) {\n      this.onFileSelected.emit(this.uploader.nativeElement.files[0]);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            }
        },
        {
            "name": "LazyLoadedComponent",
            "id": "component-LazyLoadedComponent-1e8e53179b2830005b1f2caf7d6c9e66b90747b4eb1d63878e281c39f69c833bdbfe081f4aeb6ec173997ccfa29e1032047df07daa59c6574d875207585a1de0",
            "file": "src/app/examples/lazy-loaded/lazy-loaded.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-lazy",
            "styleUrls": [],
            "styles": [],
            "template": "redux hydration test\n<pre>{{exampleValue$ | async }}</pre>\n<button (click)=\"setValue()\">set a value</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "exampleValue$",
                    "defaultValue": "this.store.select(selectExampleValue)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { exampleActions } from './store/example/actions';\nimport { selectExampleValue } from './store/example/selectors';\n\n@Component({\n  selector: 'ib-lazy',\n  template: `\n  redux hydration test\n  <pre>{{exampleValue$ | async }}</pre>\n  <button (click)=\"setValue()\">set a value</button>\n  `\n})\n\nexport class LazyLoadedComponent implements OnInit {\n  exampleValue$: Observable<string> = this.store.select(selectExampleValue)\n  constructor(\n    private store: Store\n  ) { }\n\n  ngOnInit() { }\n\n  setValue(){\n    this.store.dispatch(exampleActions.exampleAction())\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "MyCounterComponent",
            "id": "component-MyCounterComponent-a1bdf22c52e823d4277b4d703e1efcf37fcd1a4b03222f86be3f6ced2e79e190ec8d1bc0b4cb0bfddf8a5deef92601b9cc14b575f6ed156ccd8448950a9f8825",
            "file": "src/app/examples/redux-example/my-counter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ib-my-counter",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./my-counter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "count$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "addingNumber",
                    "args": [
                        {
                            "name": "n",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "n",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "decrement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "increment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {Store, select} from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { CounterActions } from './counter.action';\n\n@Component({\n  selector: 'ib-my-counter',\n  templateUrl: './my-counter.component.html'\n})\nexport class MyCounterComponent {\n  count$: Observable<number>;\n\n  constructor(private store: Store<any>) {\n    this.count$ = store.pipe(select(rootState => rootState.countState.number));\n  }\n\n  increment() {\n    this.store.dispatch (CounterActions.increment());\n  }\n\n  decrement() {\n    this.store.dispatch(CounterActions.decrement());\n  }\n\n  reset() {\n    this.store.dispatch(CounterActions.reset());\n  }\n\n  addingNumber(n) {\n    this.store.dispatch(CounterActions.addingNumber({numberToAdd: n}));\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<button id=\"increment\" (click)=\"increment()\">Increment</button>\n\n<div>Current Count: {{ count$ | async }}</div>\n\n<button id=\"decrement\" (click)=\"decrement()\">Decrement</button>\n\n<button id=\"reset\" (click)=\"reset()\">Reset Counter</button>\n\n<button id=\"addingNumber\" (click)=\"addingNumber(5)\">Adding 5</button>\n\n\n<!--<ib-table>\n  <tf-searchbar></tf-searchbar>\n</ib-table>-->\n"
        },
        {
            "name": "MyCustomTextboxComponent",
            "id": "component-MyCustomTextboxComponent-00f665eba68fdadd29f0c81964fecc47747e87e34411b4a05e2e7ac29b7331492251bbdf660bffe116136c2ac8b484cb4083cb7327a5991ca8ca26a08fec7b49",
            "file": "src/app/examples/dynamic-forms-example/my-custom-textbox.model.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[ib-my-custom-textbox]",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-form-field appearance=\"fill\" style=\"width: 100%;\" [formGroup]=\"data.form\">\n  <mat-label>{{data.base.label | translate}} {{data.base.testField}}</mat-label>\n  <input\n    matInput\n    [formControlName]=\"data.base.key\"\n    [id]=\"data.base.key\"\n    [type]=\"data.base.type\"\n    (keyup)=\"data.base.change(data.self)\"\n    (change)=\"data.base.change(data.self)\"\n  />\n  <mat-icon style=\"cursor:pointer;color:#666;\" matSuffix (click)=\"data.form.controls[data.base.key].reset()\">{{'clear'}}</mat-icon>\n  <mat-error>\n    <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n  </mat-error>\n</mat-form-field>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { IbFormControlBase, IbFormControlBaseParams, IbFormControlInterface, IbFormControlBaseComponent } from 'src/app/inobeta-ui/ui/forms';\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: '[ib-my-custom-textbox]',\n  template: `\n  <mat-form-field appearance=\"fill\" style=\"width: 100%;\" [formGroup]=\"data.form\">\n    <mat-label>{{data.base.label | translate}} {{data.base.testField}}</mat-label>\n    <input\n      matInput\n      [formControlName]=\"data.base.key\"\n      [id]=\"data.base.key\"\n      [type]=\"data.base.type\"\n      (keyup)=\"data.base.change(data.self)\"\n      (change)=\"data.base.change(data.self)\"\n    />\n    <mat-icon style=\"cursor:pointer;color:#666;\" matSuffix (click)=\"data.form.controls[data.base.key].reset()\">{{'clear'}}</mat-icon>\n    <mat-error>\n      <ng-container *ngTemplateOutlet=\"data.formControlErrors;context: this\"></ng-container>\n    </mat-error>\n  </mat-form-field>\n  `\n})\n\nexport class MyCustomTextboxComponent implements IbFormControlInterface {\n  @Input() data: any;\n}\n\n\nexport class MyCustomTextbox extends IbFormControlBase<string>{\n  testField = 'Questa è una prova';\n  constructor(options: MyCustomTextboxParams){\n    super(options)\n    this.testField = options.testField;\n    this.control = new IbFormControlBaseComponent(MyCustomTextboxComponent, {\n      base: this\n    })\n  }\n}\n\nexport interface MyCustomTextboxParams extends IbFormControlBaseParams<string> {\n  testField: string;\n}\n\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "IbFormControlInterface"
            ]
        },
        {
            "name": "NavComponent",
            "id": "component-NavComponent-d5a5483dab0b747da682946ba5d46a75035bd76b7818e006fab82dad5577730e87f99dc377706f23e46876ffed5f6dc54a7df5750d2986a14fe6829b17fbf6c7",
            "file": "src/app/examples/nav/nav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nav",
            "styleUrls": [
                "./nav.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./nav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-nav',\n  templateUrl: './nav.component.html',\n  styleUrls: ['./nav.component.css']\n})\nexport class NavComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "ul {\n  list-style: none;\n  margin: 0;\n  padding: 1em;\n  display: flex;\n  gap: 1em;\n}\n\na {\n  font-family: 'Roboto', sans-serif;\n  text-decoration: none;\n  color: #777;\n}\n\na.active-link {\n  text-decoration: none;\n  color: #030303\n}",
                    "styleUrl": "./nav.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<div fxLayout=\"column\">\n  <div fxLayout=\"row\" fxLayoutAlign=\"start center\" >\n  <ib-main-menu-example></ib-main-menu-example>\n  <ib-material-breadcrumb  fxFlex></ib-material-breadcrumb>\n  </div>\n  <div fxFlex=\"90%\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-badb6d8cee577661da79ba82ad8f599604afd40fa34e36c7b88d71d77a4fbc7184228cba2f0d73e255d0b7bc51c4c7a8e7b0128b3624aeb0255abab9030fa59a",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport type { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\n.storybook-page h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\n.storybook-page ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.storybook-page .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-e21dca225b561f4a3e85c5a304f6a5af831c575b4e84fba273a555918d6e69ecdb5c70c6e91c8b0384d96e59fdccef89131bb1ce2f76ae88849dc1a52146c88c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { RoutingModule } from './routing.module';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@Inobeta/flex-layout';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { environment } from '../environments/environment';\nimport { IbTableExampleComponent } from 'src/app/examples/table-example/table-with-redux/table-example.component';\nimport { NavComponent } from './examples/nav/nav.component';\nimport { DynamicFormsExampleComponent } from './examples/dynamic-forms-example/dynamic-forms-example.component';\nimport { ActionReducerMap, StoreModule } from '@ngrx/store';\nimport { IbTableModule } from './inobeta-ui/ui/table/table.module';\nimport { IbDynamicFormsModule } from './inobeta-ui/ui/forms/forms.module';\nimport { IbBreadcrumbModule } from './inobeta-ui/ui/breadcrumb/breadcrumb.module';\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\nimport { HttpClient } from '@angular/common/http';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { IbMaterialFormModule } from './inobeta-ui/ui/material-forms/material-form.module';\nimport { HttpExampleComponent } from './examples/http-example.component';\nimport { MyCounterComponent } from './examples/redux-example/my-counter.component';\nimport { IbHttpModule } from './inobeta-ui/http/http.module';\nimport { ICounterState, counterReducer } from './examples/redux-example/counter.reducer';\nimport { DialogExampleComponent } from './examples/dialog-example/dialog-example.component';\nimport { IbModalModule } from './inobeta-ui/ui/modal';\nimport { MyCustomTextboxComponent } from './examples/dynamic-forms-example/my-custom-textbox.model';\nimport { IbToastExampleComponent } from './examples/toast-example/toast-example.component';\nimport { IbToastModule } from './inobeta-ui/ui/toast/toast.module';\nimport { IbTableExampleNoReduxComponent } from './examples/table-example/table-without-redux/table-example.component';\nimport { ITableFiltersState } from './inobeta-ui/ui/table/redux/table.reducer';\nimport { ISessionState } from './inobeta-ui/http/auth/redux/session.reducer';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { IbTableStickyExampleComponent } from './examples/table-example/table-sticky/table-example.component';\nimport { EffectsModule } from '@ngrx/effects';\nimport { TableEffects } from './inobeta-ui/ui/table/store/effects/table.effects';\nimport { IbMainMenuModule } from './inobeta-ui/ui/main-menu/main-menu.module';\nimport { IbMainMenuExampleComponent } from './examples/main-menu-example/main-menu-example.component';\nimport { ibSetupHydration } from './inobeta-ui/hydration';\nimport { IbKaiTableExamplePage } from './examples/kai-table-example/kai-table-example';\nimport { IbKaiTableContextActionExamplePage } from './examples/kai-table-example/kai-table-context-action-example';\nimport { IbKaiTableFullExamplePage } from './examples/kai-table-example/kai-table-full-example';\nimport { IbKaiTableModule } from './inobeta-ui/ui/kai-table';\nimport { IbKaiTableApiExamplePage } from './examples/kai-table-example/kai-table-api-example';\nimport { IbFilterModule } from './inobeta-ui/ui/kai-filter';\n//import { IbTableViewModule } from './inobeta-ui/ui/kai-table-view/table-view.module';\n\nexport interface IAppState {\n  sessionState?: ISessionState;\n  countState: ICounterState;\n}\n\nconst reducers: ActionReducerMap<IAppState> = {\n  countState: counterReducer\n};\n\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n\nexport const statusErrorMessages = { 404: 'Risorsa non trovata'};\n\n\nconst reduxStorageSave = ibSetupHydration('__redux-store-inobeta-ui__', ['sessionState', 'ibTable', 'lazyLoaded']);\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    IbTableExampleComponent,\n    NavComponent,\n    DynamicFormsExampleComponent,\n    HttpExampleComponent,\n    MyCounterComponent,\n    DialogExampleComponent,\n    MyCustomTextboxComponent,\n    IbToastExampleComponent,\n    IbTableExampleNoReduxComponent,\n    IbTableStickyExampleComponent,\n    IbMainMenuExampleComponent,\n    IbKaiTableExamplePage,\n    IbKaiTableContextActionExamplePage,\n    IbKaiTableFullExamplePage,\n    IbKaiTableApiExamplePage\n  ],\n  imports: [\n    CommonModule,\n    IbTableModule,\n    IbMainMenuModule,\n    IbBreadcrumbModule,\n    IbDynamicFormsModule,\n    IbMaterialFormModule,\n    RoutingModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    FlexLayoutModule,\n    IbHttpModule,\n    IbModalModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n    IbToastModule,\n    MatMenuModule,\n    MatRippleModule,\n    MatButtonModule,\n    MatGridListModule,\n    IbKaiTableModule,\n    IbFilterModule,\n    StoreModule.forRoot(reducers, {\n      metaReducers: reduxStorageSave.metareducers,\n      runtimeChecks: {\n        strictStateImmutability: false,\n        strictActionImmutability: false,\n      },\n    }),\n    EffectsModule.forRoot([TableEffects, ...reduxStorageSave.effects]),\n    StoreDevtoolsModule.instrument({\n      maxAge: 25,\n      logOnly: environment.production,\n      features: {\n        pause: true,\n        lock: true,\n        persist: true\n      },\n    }),\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      }\n    }),\n\n    MatCardModule\n  ],\n  exports: [\n    FlexLayoutModule\n  ],\n  providers: [\n    //{provide: 'ibSessionStorageKey', useValue: '__redux-store-inobeta-ui__'},\n    //{provide: 'ibReduxPersistKeys', useValue: ['sessionState', 'ibTable', 'lazyLoaded']},\n    {provide: 'HttpMode', useValue: 'NORMAL'},\n    {provide: 'ibHttpToastOnStatusCode', useValue: statusErrorMessages },\n    {provide: 'ibHttpToastErrorCode', useValue: 'code' },\n    {provide: 'ibHttpUrlExcludedFromLoader', useValue: [{url: 'http://repubblica.it', method: 'GET'}] }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "DialogExampleComponent"
                        },
                        {
                            "name": "DynamicFormsExampleComponent"
                        },
                        {
                            "name": "HttpExampleComponent"
                        },
                        {
                            "name": "IbKaiTableApiExamplePage"
                        },
                        {
                            "name": "IbKaiTableContextActionExamplePage"
                        },
                        {
                            "name": "IbKaiTableExamplePage"
                        },
                        {
                            "name": "IbKaiTableFullExamplePage"
                        },
                        {
                            "name": "IbMainMenuExampleComponent"
                        },
                        {
                            "name": "IbTableExampleComponent"
                        },
                        {
                            "name": "IbTableExampleNoReduxComponent"
                        },
                        {
                            "name": "IbTableStickyExampleComponent"
                        },
                        {
                            "name": "IbToastExampleComponent"
                        },
                        {
                            "name": "MyCounterComponent"
                        },
                        {
                            "name": "MyCustomTextboxComponent"
                        },
                        {
                            "name": "NavComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IbBreadcrumbModule"
                        },
                        {
                            "name": "IbDynamicFormsModule"
                        },
                        {
                            "name": "IbFilterModule"
                        },
                        {
                            "name": "IbHttpModule"
                        },
                        {
                            "name": "IbKaiTableModule"
                        },
                        {
                            "name": "IbMainMenuModule"
                        },
                        {
                            "name": "IbMaterialFormModule"
                        },
                        {
                            "name": "IbModalModule"
                        },
                        {
                            "name": "IbTableModule"
                        },
                        {
                            "name": "IbToastModule"
                        },
                        {
                            "name": "RoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IbBreadcrumbModule",
            "id": "module-IbBreadcrumbModule-6c1fbb7d9b7c15c4c758a572f8533bbde39bb9b3330772f199722db2a3dfdd268c736b718e43c3962af7e96cde41a21683648433e47146206cc7675748b6baa2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/ui/breadcrumb/breadcrumb.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IbBreadcrumbComponent } from './breadcrumb.component';\nimport { RouterModule } from '@angular/router';\nimport { IbMaterialBreadcrumbComponent } from './material-breadcrumb/material-breadcrumb.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  declarations: [\n    IbBreadcrumbComponent,\n    IbMaterialBreadcrumbComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule,\n    TranslateModule.forChild({\n        extend: true\n    }),\n    MatIconModule\n  ],\n  exports: [\n    IbBreadcrumbComponent,\n    IbMaterialBreadcrumbComponent\n  ]\n})\nexport class IbBreadcrumbModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IbBreadcrumbComponent"
                        },
                        {
                            "name": "IbMaterialBreadcrumbComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IbBreadcrumbComponent"
                        },
                        {
                            "name": "IbMaterialBreadcrumbComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IbDynamicFormsModule",
            "id": "module-IbDynamicFormsModule-6133b1d0869e02c39b1e7fb26e8f24e23adac8ee70cd63e5ae97a139caad53fa8b3fbb674a40e6a3e5e0eb12fff75d67198df6967df4a9f1864b82973befbf86",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/ui/forms/forms.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { IbDynamicFormControlComponent } from './dynamic-form-control/dynamic-form-control.component';\nimport { IbDynamicFormComponent } from './dynamic-form/dynamic-form.component';\nimport { IbFormControlService } from './form-control.service';\n\n@NgModule({\n  declarations: [IbDynamicFormControlComponent, IbDynamicFormComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n  ],\n  providers: [IbFormControlService],\n  exports: [IbDynamicFormComponent, IbDynamicFormControlComponent]\n})\nexport class IbDynamicFormsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "IbFormControlService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IbDynamicFormComponent"
                        },
                        {
                            "name": "IbDynamicFormControlComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IbDynamicFormComponent"
                        },
                        {
                            "name": "IbDynamicFormControlComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IbFilterModule",
            "id": "module-IbFilterModule-c3f7a6a266bec12d411aae9621472cf5e485abb0957f0af5d59682a367c5a0b39bd9f56cf4b5ba0d13efcba0c4aad3fc6f0b36c0bb93ab99402151da810b7136",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/ui/kai-filter/filters.module.ts",
            "methods": [],
            "sourceCode": "import { PortalModule } from \"@angular/cdk/portal\";\nimport { ScrollingModule } from \"@angular/cdk/scrolling\";\nimport { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatChipsModule } from \"@angular/material/chips\";\nimport { MatDatepickerModule } from \"@angular/material/datepicker\";\nimport { MatDividerModule } from \"@angular/material/divider\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatListModule } from \"@angular/material/list\";\nimport { MatMenuModule } from \"@angular/material/menu\";\nimport { MatRadioModule } from \"@angular/material/radio\";\nimport { MatSelectModule } from \"@angular/material/select\";\nimport { MatSliderModule } from \"@angular/material/slider\";\nimport { TranslateModule } from \"@ngx-translate/core\";\nimport { IbApplyFilterButton } from \"./filter-actions/apply-filter-button.component\";\nimport { IbFilterActions } from \"./filter-actions/filter-actions.component\";\nimport { IbFilterButton } from \"./filter-button/filter-button.component\";\nimport { IbFilter } from \"./filter.component\";\nimport { IbFilterBase } from \"./filters/base/filter-base\";\nimport { IbDateFilter } from \"./filters/date/filter-date.component\";\nimport { IbNumberFilter } from \"./filters/number/filter-number.component\";\nimport { IbTagFilter } from \"./filters/tag/filter-tag.component\";\nimport { IbTextFilter } from \"./filters/text/filter-text.component\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PortalModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ScrollingModule,\n    MatInputModule,\n    MatButtonModule,\n    MatIconModule,\n    MatMenuModule,\n    MatSelectModule,\n    MatChipsModule,\n    MatFormFieldModule,\n    MatDividerModule,\n    MatListModule,\n    MatSliderModule,\n    MatRadioModule,\n    MatDatepickerModule,\n    TranslateModule.forChild({\n      extend: true,\n    }),\n  ],\n  exports: [\n    IbFilter,\n    IbFilterBase,\n    IbFilterButton,\n    IbTextFilter,\n    IbTagFilter,\n    IbNumberFilter,\n    IbDateFilter,\n    IbFilterActions,\n    IbApplyFilterButton,\n  ],\n  declarations: [\n    IbFilter,\n    IbFilterBase,\n    IbFilterButton,\n    IbTextFilter,\n    IbTagFilter,\n    IbNumberFilter,\n    IbDateFilter,\n    IbFilterActions,\n    IbApplyFilterButton,\n  ]\n})\nexport class IbFilterModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IbApplyFilterButton"
                        },
                        {
                            "name": "IbDateFilter"
                        },
                        {
                            "name": "IbFilter"
                        },
                        {
                            "name": "IbFilterActions"
                        },
                        {
                            "name": "IbFilterBase"
                        },
                        {
                            "name": "IbFilterButton"
                        },
                        {
                            "name": "IbNumberFilter"
                        },
                        {
                            "name": "IbTagFilter"
                        },
                        {
                            "name": "IbTextFilter"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IbApplyFilterButton"
                        },
                        {
                            "name": "IbDateFilter"
                        },
                        {
                            "name": "IbFilter"
                        },
                        {
                            "name": "IbFilterActions"
                        },
                        {
                            "name": "IbFilterBase"
                        },
                        {
                            "name": "IbFilterButton"
                        },
                        {
                            "name": "IbNumberFilter"
                        },
                        {
                            "name": "IbTagFilter"
                        },
                        {
                            "name": "IbTextFilter"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IbHttpModule",
            "id": "module-IbHttpModule-ca07283a093c4868a6eee6209e9f8302f15d86ae5310383018ffba0f85fdcff0e5daf4dc5faaabbbc96ccaaf409de77d1653582fc5c86170871dc54a1f78d23e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/http/http.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [],
                    "optional": false,
                    "returnType": "ModuleWithProviders<IbHttpModule>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "sourceCode": "import { Injector, ModuleWithProviders, NgModule } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { IbHttpClientService } from './http/http-client.service';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { IbResponseHandlerService } from './http/response-handler.service';\nimport { IbAuthService } from './auth/auth.service';\nimport { IbSessionService } from './auth/session.service';\nimport { IbAuthGuard, IbLoginGuard } from './auth/guard.service';\nimport { IbSpinnerLoadingComponent } from './http/spinner-loading.component';\nimport { IbLoginComponent } from './pages/login.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { IbToastModule } from '../ui/toast/toast.module';\nimport { IbAuthInterceptor } from './http/auth.interceptor';\nimport { IbErrorInterceptor } from './http/error.interceptor';\nimport { ibSessionReducer } from './auth/redux/session.reducer';\nimport { StoreModule } from '@ngrx/store';\nimport { IbStorageModule } from '../storage/storage.module';\n\n\n\nconst components = [\n  IbSpinnerLoadingComponent,\n  IbLoginComponent\n];\n@NgModule({\n  imports: [\n    TranslateModule.forChild({\n      extend: true\n    }),\n    CommonModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    IbToastModule,\n    IbStorageModule,\n    StoreModule.forFeature('sessionState', ibSessionReducer),\n  ],\n  exports: [\n    ...components\n  ],\n  declarations: [\n    ...components\n  ],\n  providers: [\n    IbHttpClientService,\n    IbResponseHandlerService,\n    { provide: HTTP_INTERCEPTORS, useClass: IbAuthInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: IbErrorInterceptor, multi: true },\n\n  ]\n})\n\nexport class IbHttpModule {\n  static injector: Injector = null;\n\n  constructor(injector: Injector) {\n    IbHttpModule.injector = injector;\n  }\n\n  static forRoot(): ModuleWithProviders<IbHttpModule> {\n    return {\n      ngModule: IbHttpModule,\n      providers: [\n        IbAuthService,\n        IbSessionService,\n        IbAuthGuard,\n        IbLoginGuard,\n      ]\n    };\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "IbAuthInterceptor"
                        },
                        {
                            "name": "IbErrorInterceptor"
                        },
                        {
                            "name": "IbHttpClientService"
                        },
                        {
                            "name": "IbResponseHandlerService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IbLoginComponent"
                        },
                        {
                            "name": "IbSpinnerLoadingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IbStorageModule"
                        },
                        {
                            "name": "IbToastModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IbLoginComponent"
                        },
                        {
                            "name": "IbSpinnerLoadingComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IbHttpTestModule",
            "id": "module-IbHttpTestModule-06d4cf18bd4e3630061b4f43836d83e1fa410f789e80d685d012d507ac962e39fbd6444bac8daffa3c89ce48d977cb25d846a5b04fe66812ceebc20a624619e3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/http/http-test.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { IbHttpClientService } from './http/http-client.service';\nimport { IbResponseHandlerService } from './http/response-handler.service';\nimport { IbAuthService } from './auth/auth.service';\nimport { IbSessionService } from './auth/session.service';\nimport { SpinnerLoadingStubComponent } from './http/spinner-loading.stub.spec';\nimport { authServiceStub } from './auth/auth.service.stub.spec';\nimport { localStorageStub } from './auth/local-storage.stub.spec';\nimport { sessionServiceStub } from './auth/session.stub.spec';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { responseHandlerStub } from './http/response-handler.service.stub.spec';\n\n\n\n@NgModule({\n  imports: [\n    HttpClientTestingModule\n  ],\n  exports: [\n    SpinnerLoadingStubComponent\n  ],\n  declarations: [\n    SpinnerLoadingStubComponent\n  ],\n  providers: [\n    IbHttpClientService,\n    IbResponseHandlerService,\n    { provide: IbAuthService, useValue: authServiceStub},\n    { provide: IbSessionService, useValue: sessionServiceStub},\n    { provide: IbResponseHandlerService, useValue: responseHandlerStub}\n  ]\n})\nexport class IbHttpTestModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "IbHttpClientService"
                        },
                        {
                            "name": "IbResponseHandlerService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IbKaiTableModule",
            "id": "module-IbKaiTableModule-d88272f6b11b813aaad91d3d17fae8933bb2a3ac6a917c3eb05ea5c932e78bb8002ea2d9eff2ac4e0b5926afdee04e8ab693d6a27451e3fb7c16f5231d7e976a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/ui/kai-table/table.module.ts",
            "methods": [],
            "sourceCode": "import { PortalModule } from \"@angular/cdk/portal\";\nimport { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatCheckboxModule } from \"@angular/material/checkbox\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport {\n  MatPaginatorIntl,\n  MatPaginatorModule\n} from \"@angular/material/paginator\";\nimport { MatProgressBarModule } from \"@angular/material/progress-bar\";\nimport { MatSortModule } from \"@angular/material/sort\";\nimport { MatTableModule } from \"@angular/material/table\";\nimport { TranslateModule, TranslateService } from \"@ngx-translate/core\";\nimport { ibMatPaginatorTranslate } from \"../table\";\nimport { IbContextActionCell } from \"./cells\";\nimport { IbKaiRowGroupDirective } from \"./rowgroup\";\nimport { IbSelectionColumn } from \"./selection-column\";\nimport { IbTable } from \"./table.component\";\n\n@NgModule({\n  exports: [IbTable, IbKaiRowGroupDirective, IbSelectionColumn],\n  declarations: [\n    IbTable,\n    IbContextActionCell,\n    IbKaiRowGroupDirective,\n    IbSelectionColumn,\n  ],\n  imports: [\n    CommonModule,\n    PortalModule,\n    MatTableModule,\n    MatSortModule,\n    MatPaginatorModule,\n    MatIconModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatProgressBarModule,\n    TranslateModule.forChild({\n      extend: true,\n    }),\n  ],\n  providers: [\n    {\n      provide: MatPaginatorIntl,\n      deps: [TranslateService],\n      useFactory: ibMatPaginatorTranslate,\n    },\n  ],\n})\nexport class IbKaiTableModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IbContextActionCell"
                        },
                        {
                            "name": "IbKaiRowGroupDirective"
                        },
                        {
                            "name": "IbSelectionColumn"
                        },
                        {
                            "name": "IbTable"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IbKaiRowGroupDirective"
                        },
                        {
                            "name": "IbSelectionColumn"
                        },
                        {
                            "name": "IbTable"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IbMainMenuModule",
            "id": "module-IbMainMenuModule-0fe060878fb429f155346ce777428949ee6889700a3649af35bff646edc53d063aaafa490a138b91e4e746a067c14da3f18537770a06c0ee49ad81217876f24a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/ui/main-menu/main-menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { FlexLayoutModule } from '@Inobeta/flex-layout';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { IbMainMenuBarComponent } from './components/main-menu-bar/main-menu-bar.component';\nimport { IbMainMenuExpandedComponent } from './components/main-menu-expanded/main-menu-expanded.component';\nimport { IbMainMenuDialogComponent } from './components/main-menu-dialog/main-menu-dialog.component';\nimport { RouterModule } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { IbMainMenuHeaderFooterButtonsComponent } from './components/main-menu-expanded/header-footer-buttons.component';\n\n@NgModule({\n  declarations: [\n    IbMainMenuBarComponent,\n    IbMainMenuDialogComponent,\n    IbMainMenuExpandedComponent,\n    IbMainMenuHeaderFooterButtonsComponent\n  ],\n  imports: [\n    CommonModule,\n    MatIconModule,\n    MatDialogModule,\n    MatButtonModule,\n    FlexLayoutModule,\n    RouterModule,\n    TranslateModule.forChild({\n      extend: true\n    }),\n  ],\n  exports: [\n    IbMainMenuBarComponent,\n    IbMainMenuDialogComponent,\n    IbMainMenuExpandedComponent,\n    IbMainMenuHeaderFooterButtonsComponent\n  ]\n})\nexport class IbMainMenuModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IbMainMenuBarComponent"
                        },
                        {
                            "name": "IbMainMenuDialogComponent"
                        },
                        {
                            "name": "IbMainMenuExpandedComponent"
                        },
                        {
                            "name": "IbMainMenuHeaderFooterButtonsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IbMainMenuBarComponent"
                        },
                        {
                            "name": "IbMainMenuDialogComponent"
                        },
                        {
                            "name": "IbMainMenuExpandedComponent"
                        },
                        {
                            "name": "IbMainMenuHeaderFooterButtonsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IbMainMenuTestModule",
            "id": "module-IbMainMenuTestModule-5699c09fb01d5c4f00191fdce0a579dec38fe7deec51f88d9820c85d33452f45a34c13d62814130262cc33fa7c22d4a6e3717798a6dfbcf1b280b18cabd3782b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/ui/main-menu/main-menu-test.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { IbMainMenuBarStubComponent } from \"./components/main-menu-bar/main-menu-bar.stub.spec\";\n\n\n@NgModule({\n  declarations: [\n    IbMainMenuBarStubComponent,\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    IbMainMenuBarStubComponent\n  ]\n})\nexport class IbMainMenuTestModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IbMaterialFormModule",
            "id": "module-IbMaterialFormModule-995f0dab1843b3447fe4f83ed0be5ec3e0b9ae9e9deaf0d9dc945126426a65f7bbccb3bc79add82a0c4e362600f5d00b73af48e8f52d8636c8b4a297f512f81b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/ui/material-forms/material-form.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { IbMaterialFormComponent } from './material-form/material-form.component';\nimport { IbMaterialFormControlComponent, IbFormControlDirective } from './material-form-control/material-form-control.component';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MAT_DATE_FORMATS, DateAdapter, MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MatOptionModule } from '@angular/material/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\nimport { FlexLayoutModule } from '@Inobeta/flex-layout';\nimport { IbMatTextboxComponent } from './controls/textbox';\nimport { IbMatDropdownComponent } from './controls/dropdown';\nimport { IbMatRadioComponent } from './controls/radio';\nimport { IbMatCheckboxComponent } from './controls/checkbox';\nimport { IbMatDatepickerComponent } from './controls/datepicker';\nimport { IbMatAutocompleteComponent } from './controls/autocomplete';\nimport { IbMatLabelComponent } from './controls/label';\nimport { IbMatTextareaComponent } from './controls/textarea';\nimport { IbMatButtonComponent } from './controls/button';\nimport { IbMatPaddingComponent } from './controls/padding';\nimport { IbMatSlideToggleComponent } from './controls/slide-toggle';\nimport { IbMatDateAdapter, IbMatDatepickerI18n } from './intl/datepicker.intl';\nimport { IbModalModule } from '../modal/modal.module';\nimport { Platform, PlatformModule } from '@angular/cdk/platform';\n\nconst components = [\n  IbMatTextboxComponent,\n  IbMatDropdownComponent,\n  IbMatRadioComponent,\n  IbMatCheckboxComponent,\n  IbMatDatepickerComponent,\n  IbMatAutocompleteComponent,\n  IbMatLabelComponent,\n  IbMatTextareaComponent,\n  IbMatButtonComponent,\n  IbMatPaddingComponent,\n  IbMatSlideToggleComponent,\n  IbMaterialFormComponent,\n  IbMaterialFormControlComponent,\n  IbFormControlDirective\n];\n\n\nexport function ibMatDatepickerTranslate(translateService: TranslateService) {\n  return new IbMatDatepickerI18n(translateService).getDateFormats();\n}\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    TranslateModule.forChild({\n      extend: true\n    }),\n    MatButtonModule,\n    MatFormFieldModule,\n    MatOptionModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatCheckboxModule,\n    MatInputModule,\n    MatDatepickerModule,\n    MatAutocompleteModule,\n    MatIconModule,\n    MatGridListModule,\n    FlexLayoutModule,\n    MatTooltipModule,\n    MatSlideToggleModule,\n    IbModalModule,\n    PlatformModule\n  ],\n  exports: [\n    ...components\n  ],\n  declarations: [\n    ...components\n  ],\n  providers: [\n    { provide: DateAdapter, useClass: IbMatDateAdapter, deps: [MAT_DATE_LOCALE, Platform] },\n    { provide: MAT_DATE_FORMATS, deps: [TranslateService], useFactory: ibMatDatepickerTranslate},\n  ]\n})\nexport class IbMaterialFormModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IbLoginComponent"
                        },
                        {
                            "name": "IbSpinnerLoadingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IbModalModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IbLoginComponent"
                        },
                        {
                            "name": "IbSpinnerLoadingComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IbMaterialFormTestModule",
            "id": "module-IbMaterialFormTestModule-97f1dad90eee474781ed3ca904d2c9a1a2c5171ebce4dd07133b780a57d42de91b6c1d354327adb59b4c023d0777a36acda71aeea49a44803d457d6ccc10a3fe",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/ui/material-forms/material-form-test.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { IbMaterialFormStubComponent } from './material-form/material-form.stub.spec';\n\n\nconst components = [\n  IbMaterialFormStubComponent\n];\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule\n  ],\n  exports: [\n    ...components\n  ],\n  declarations: [\n    ...components\n  ],\n  providers: []\n})\nexport class IbMaterialFormTestModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IbLoginComponent"
                        },
                        {
                            "name": "IbSpinnerLoadingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IbLoginComponent"
                        },
                        {
                            "name": "IbSpinnerLoadingComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IbModalModule",
            "id": "module-IbModalModule-9699a15521896aa9460a48c2a718ff9120233a573d29ab308b6a0c0cc785fb9c85a67a2ed519672afca682125f8dfe2a2b13a82a8c3b6be54783758a47337775",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/ui/modal/modal.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { IbModalMessageComponent } from './modal-message.component';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { IbModalMessageService } from './modal-message.service';\n\n\n@NgModule({\n  imports: [\n    TranslateModule.forChild({\n      extend: true\n    }),\n    CommonModule,\n    MatDialogModule,\n    MatButtonModule\n  ],\n  exports: [\n    IbModalMessageComponent\n  ],\n  declarations: [\n    IbModalMessageComponent\n  ],\n  providers: [\n    IbModalMessageService\n  ]\n})\nexport class IbModalModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "IbModalMessageService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IbModalMessageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IbModalMessageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IbModalTestModule",
            "id": "module-IbModalTestModule-ced96f3eaf9d18dbcc4ca781ed5dd5290e42a564f26ddb797eca53c70eed06ba0a630069a7cb8579183b627380bab58698778b6f4cc7926a83f64d1ed7c150fc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/ui/modal/modal-test.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IbModalMessageService } from './modal-message.service';\nimport { IbModalMessageServiceStub } from './modal-message.service.stub.spec';\n\n\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  exports: [\n  ],\n  declarations: [\n  ],\n  providers: [\n    { provide: IbModalMessageService, useClass: IbModalMessageServiceStub}\n  ]\n})\nexport class IbModalTestModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IbStickyAreaModule",
            "id": "module-IbStickyAreaModule-cfb69270ed46eae8abb964e8f687e79d44ef478dc17705dfc781e61f67241cd0425cdfcca29f8b7e54ba040c97a48eba33a6be4d68ed0243813a33498ed1cbc5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/ui/table/directives/sticky-area/sticky-area.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IbStickyColumnDirective } from './sticky-column.directive';\n\n@NgModule({\n  declarations: [IbStickyColumnDirective],\n  imports: [\n    CommonModule\n  ],\n  exports: [IbStickyColumnDirective]\n})\nexport class IbStickyAreaModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IbStickyColumnDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IbStickyColumnDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IbStorageModule",
            "id": "module-IbStorageModule-d0fc90f8f9cee80b17700355bb09064484ac88cc62c32d95053a71cce1fa753b2538dcaa2da12a164fe8b5d61d5d49e29e7de2053976180695b51ef2d8a56153",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/storage/storage.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { IbStorageService } from './storage.service';\n\n\n@NgModule({\n  imports: [],\n  exports: [],\n  declarations: [],\n  providers: [\n    IbStorageService\n  ],\n})\nexport class IbStorageModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "IbStorageService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IbStorageTestModule",
            "id": "module-IbStorageTestModule-24b67ba52dcf83f0514510f3ed2c2b69ceb77821bd1bb52074ab8247c7146a97d1164f07664f0c7cee9f8ce937e4e7254f2a4207a340b555710a0830438ebb1e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/storage/storage-test.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { IbStorageService } from './storage.service';\nimport { IbStorageServiceStub } from './storage.stub.spec';\n\n\n@NgModule({\n  imports: [],\n  exports: [],\n  declarations: [],\n  providers: [\n    { provide: IbStorageService, useClass: IbStorageServiceStub}\n  ],\n})\nexport class IbStorageTestModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IbTableConfigModule",
            "id": "module-IbTableConfigModule-7ce99844a50458e63adf2248e35a065de3b301c9595ad81a5839d3c2d51bde4e817c190a81429b206ddbb5143f102d177438eafc29dc1e7e28e099ef105141fc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/ui/table/components/table-conf/table-config.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatListModule } from '@angular/material/list';\nimport { IbTableConfService } from '../../services/table-conf.service';\nimport { IbTableConfLoadComponent } from './table-conf-load.component';\nimport { IbTableConfSaveComponent } from './table-conf-save.component';\nimport { IbMaterialFormModule } from '../../../material-forms/material-form.module';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\n\n\n@NgModule({\n  declarations: [\n    IbTableConfSaveComponent,\n    IbTableConfLoadComponent\n  ],\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatListModule,\n    MatDialogModule,\n    MatIconModule,\n    TranslateModule.forChild({\n      extend: true\n    }),\n    IbMaterialFormModule\n  ],\n  exports: [\n    IbTableConfSaveComponent,\n    IbTableConfLoadComponent\n  ],\n  providers: [\n    IbTableConfService\n  ]\n})\nexport class IbTableConfigModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "IbTableConfService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IbTableConfLoadComponent"
                        },
                        {
                            "name": "IbTableConfSaveComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IbMaterialFormModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IbTableConfLoadComponent"
                        },
                        {
                            "name": "IbTableConfSaveComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IbTableModule",
            "id": "module-IbTableModule-1b8c6a6203098a872855c1ba694cee12ce1633e71caebb7d3d234cbd1594568872d64bea0da53b9321de6035d4441e16536c3a48908737d3ee61c723dc0fc16e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/ui/table/table.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule, registerLocaleData } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@Inobeta/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatPaginatorModule, MatPaginatorIntl } from '@angular/material/paginator';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\nimport { IbTableExportDialogComponent, IbTableExportComponent } from './components/table-export.component';\nimport { IbTableHeaderComponent } from './components/table-header/table-header.component';\nimport { IbTablePaginatorComponent } from './components/table-paginator.component';\nimport { IbTableHeaderPopupComponent } from './components/table-header-popup.component';\nimport { IbTableComponent } from './table.component';\nimport { IbTableRowComponent } from './components/table-row.component';\nimport { IbTableActionsComponent } from './components/table-actions.component';\nimport { IbTableButtonComponent } from './components/table-button.component';\nimport { IbTableHeaderFilterComponent } from './components/table-header-filter-component';\nimport localeIt from '@angular/common/locales/it';\nimport { IbModalModule } from '../modal/modal.module';\nimport { IbMatPaginatorI18n } from './material-intl/paginator.intl';\nimport { StoreModule } from '@ngrx/store';\nimport { ibTableFiltersReducer } from './redux/table.reducer';\nimport { TotalRowModule } from './components/table-total-row/total-row.module';\nimport { IbStickyAreaModule } from './directives/sticky-area/sticky-area.module';\nimport { EffectsModule } from '@ngrx/effects';\nimport { TableEffects } from './store/effects/table.effects';\nimport { ibTableFeatureKey, ibTableFeatureReducer } from './store/reducers/table.reducer';\nimport { RouterModule } from '@angular/router';\nimport { IbMaterialFormModule } from '../material-forms/material-form.module';\nimport { IbTableConfigModule } from './components/table-conf/table-config.module';\nimport { OverlayModule } from '@angular/cdk/overlay';\nregisterLocaleData(localeIt, 'it');\n\nexport function ibMatPaginatorTranslate(translateService: TranslateService) {\n  return new IbMatPaginatorI18n(translateService).getPaginatorIntl();\n}\n\n\n@NgModule({\n  declarations: [\n    IbTableComponent,\n    IbTableHeaderComponent,\n    IbTableExportComponent,\n    IbTablePaginatorComponent,\n    IbTableHeaderPopupComponent,\n    IbTableExportDialogComponent,\n    IbTableRowComponent,\n    IbTableActionsComponent,\n    IbTableButtonComponent,\n    IbTableHeaderFilterComponent,\n    IbTableExportDialogComponent,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FlexLayoutModule,\n    MatMenuModule,\n    MatSortModule,\n    MatChipsModule,\n    MatCheckboxModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n    MatDialogModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatPaginatorModule,\n    MatButtonModule,\n    MatSnackBarModule,\n    MatCardModule,\n    MatRippleModule,\n    TranslateModule.forChild({\n      extend: true\n    }),\n    IbModalModule,\n    StoreModule.forFeature('tableFiltersState', ibTableFiltersReducer),\n    IbStickyAreaModule,\n    TotalRowModule,\n    StoreModule.forFeature(ibTableFeatureKey, ibTableFeatureReducer),\n    EffectsModule.forFeature([TableEffects]),\n    RouterModule,\n    IbTableConfigModule,\n    OverlayModule\n  ],\n  exports: [\n    IbTableComponent,\n    IbTableHeaderComponent,\n    IbTableExportComponent,\n    IbTablePaginatorComponent,\n    IbTableHeaderPopupComponent,\n    IbTableExportDialogComponent,\n    IbTableRowComponent,\n    IbTableActionsComponent,\n    IbTableButtonComponent,\n    IbTableHeaderFilterComponent,\n    IbTableExportDialogComponent,\n  ],\n  providers: [\n    {\n      provide: MatPaginatorIntl, deps: [TranslateService],\n      useFactory: ibMatPaginatorTranslate\n    }\n  ]\n})\nexport class IbTableModule { }\n\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IbTableActionsComponent"
                        },
                        {
                            "name": "IbTableButtonComponent"
                        },
                        {
                            "name": "IbTableComponent"
                        },
                        {
                            "name": "IbTableExportComponent"
                        },
                        {
                            "name": "IbTableExportDialogComponent"
                        },
                        {
                            "name": "IbTableExportDialogComponent"
                        },
                        {
                            "name": "IbTableHeaderComponent"
                        },
                        {
                            "name": "IbTableHeaderFilterComponent"
                        },
                        {
                            "name": "IbTableHeaderPopupComponent"
                        },
                        {
                            "name": "IbTablePaginatorComponent"
                        },
                        {
                            "name": "IbTableRowComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IbModalModule"
                        },
                        {
                            "name": "IbStickyAreaModule"
                        },
                        {
                            "name": "IbTableConfigModule"
                        },
                        {
                            "name": "TotalRowModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IbTableActionsComponent"
                        },
                        {
                            "name": "IbTableButtonComponent"
                        },
                        {
                            "name": "IbTableComponent"
                        },
                        {
                            "name": "IbTableExportComponent"
                        },
                        {
                            "name": "IbTableExportDialogComponent"
                        },
                        {
                            "name": "IbTableExportDialogComponent"
                        },
                        {
                            "name": "IbTableHeaderComponent"
                        },
                        {
                            "name": "IbTableHeaderFilterComponent"
                        },
                        {
                            "name": "IbTableHeaderPopupComponent"
                        },
                        {
                            "name": "IbTablePaginatorComponent"
                        },
                        {
                            "name": "IbTableRowComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IbTableTestModule",
            "id": "module-IbTableTestModule-6ccccfea1e6400ea58af32daf8ddf6c55572c3a8a5efebc951b892e6b419fa4543bea92ee398a726f2ec0694cf17f0fcc32143a881f7d90a43612a0a3f4de977",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/ui/table/table-test.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IbTableStubComponent } from './table.stub.spec';\n\nconst COMPONENTS = [\n  IbTableStubComponent\n];\n\n@NgModule({\n    declarations: [\n        ...COMPONENTS,\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [...COMPONENTS]\n})\nexport class IbTableTestModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IbTableStubComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IbTableStubComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IbToastModule",
            "id": "module-IbToastModule-55fa9ac0621f99e9cad44bf143bf3e2d6a72b20a2c794e1d51f71ff08f9b00eb79d0eacde1479def0c251f188c26dd42a9c46b72094e90414fe6b0ebfb9eb6e1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/ui/toast/toast.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { IbToastNotification } from './toast.service';\n\n\n@NgModule({\n  imports: [\n    MatSnackBarModule\n  ],\n  exports: [],\n  declarations: [\n  ],\n  providers: [IbToastNotification],\n})\nexport class IbToastModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "IbToastNotification"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IbToastTestModule",
            "id": "module-IbToastTestModule-f993b525e54e7ebf32c46e28c3b3f6f63e02230d4cc9c7cffbeffc35f694e2418a0d50671bdc83bc2df5ca610437b56cb0b838c7c60e20da6531199ba41b0264",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/ui/toast/toast-test.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { IbToastNotification } from './toast.service';\nimport { toastServiceStub } from './toast.service.stub.spec';\n\n\n@NgModule({\n  imports: [\n  ],\n  exports: [],\n  declarations: [\n  ],\n  providers: [\n    { provide: IbToastNotification, useValue: toastServiceStub}\n  ],\n})\nexport class IbToastTestModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IbToolTestModule",
            "id": "module-IbToolTestModule-bab53685e2ac2c4e77da703fed026627ddfe8e65fcb3657de7b7c9555559b90f4383e76b794bfe41233f7e4e27b997dec9c6908a0762879f1c90bfebb5716f68",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/tools/tools-test.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { IbMockTranslatePipeDirective } from './stubs/mock-translate.directive.stub.spec';\nimport { TranslateService } from '@ngx-translate/core';\nimport { translateServiceStub } from './stubs/translate.service.stub.spec';\nimport { registerLocaleData } from '@angular/common';\nimport localeIt from '@angular/common/locales/it';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { serviceDialogStub } from './stubs/dialog.stub.spec';\n\nregisterLocaleData(localeIt, 'it');\n\nconst components = [\n  IbMockTranslatePipeDirective\n];\n\nconst services = [\n  { provide: TranslateService, useValue: translateServiceStub},\n  { provide: MatDialogRef, useValue: serviceDialogStub}\n];\n\n\n@NgModule({\n  imports: [\n    HttpClientTestingModule\n  ],\n  exports: [\n    ...components\n  ],\n  declarations: [\n    ...components\n  ],\n  providers: [\n    ...services\n  ]\n})\nexport class IbToolTestModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IbLoginComponent"
                        },
                        {
                            "name": "IbSpinnerLoadingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IbLoginComponent"
                        },
                        {
                            "name": "IbSpinnerLoadingComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IbUploaderModule",
            "id": "module-IbUploaderModule-80208b17a6365eebadc0a0906ea88cd824582890f35952ab0b5bd9a62832f7bc3374c5f0e3a2b17891816fea8e2f45010a5591ed3bfa16f13578f8d26b7a0fcd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/ui/uploader/uploader.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { IbUploaderComponent } from './uploader.component';\n\nconst components = [\n  IbUploaderComponent\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    TranslateModule.forChild({\n      extend: true\n  }),\n    MatButtonModule\n  ],\n  exports: [\n    ...components\n  ],\n  declarations: [\n    ...components\n  ],\n  providers: []\n})\nexport class IbUploaderModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IbLoginComponent"
                        },
                        {
                            "name": "IbSpinnerLoadingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IbLoginComponent"
                        },
                        {
                            "name": "IbSpinnerLoadingComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LazyLoadedModule",
            "id": "module-LazyLoadedModule-ce5757b0f51ef075f9f78083b6b4c07cad95d866b500576fe6272c9e8ce9aa09b58b6592163b0a127c3a722d6ac105032a67bb7ae2f4dd99ecd694c73eb58d76",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/examples/lazy-loaded/lazy-loaded.module.ts",
            "methods": [],
            "sourceCode": "import { lazyLoadedFeatureKey, lazyLoadedReducers, lazyLoadedEffects } from './store';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { LazyLoadedComponent } from './lazy-loaded.component';\nimport { LazyLoadedRoutingModule } from './lazy-loaded.routing';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LazyLoadedRoutingModule,\n    StoreModule.forFeature(lazyLoadedFeatureKey, lazyLoadedReducers),\n    EffectsModule.forFeature([...lazyLoadedEffects])\n  ],\n  exports: [],\n  declarations: [\n    LazyLoadedComponent\n  ],\n  providers: [],\n})\nexport class LazyLoadedModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LazyLoadedComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LazyLoadedRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LazyLoadedRoutingModule",
            "id": "module-LazyLoadedRoutingModule-e28eb703fb4ea73f6a25ccf559c559f6bc7939cf72cc0e6090ef2ab62d4fd6bb14aa4e383889885a4fd88b439d94d36c5ca90e7d4703abc1922cb4a635669e9e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/examples/lazy-loaded/lazy-loaded.routing.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { LazyLoadedComponent } from \"./lazy-loaded.component\";\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LazyLoadedComponent,\n    data: { breadcrumb: '' },\n  },\n  {\n    path: '',\n    redirectTo: 'all',\n    pathMatch: 'full'\n  },\n]\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [],\n  declarations: [],\n  providers: [],\n})\nexport class LazyLoadedRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RoutingModule",
            "id": "module-RoutingModule-6ef6efe2fdbd405a53ec507dfe06a62dab84882c17d1c8624aa8ddfa5055b9704381845244878aa54a6c7b509430cf4d1309d162783e4fe6223073698b9196d1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/routing.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {RouterModule, Routes} from '@angular/router';\nimport { IbTableExampleComponent } from 'src/app/examples/table-example/table-with-redux/table-example.component';\nimport { DynamicFormsExampleComponent } from './examples/dynamic-forms-example/dynamic-forms-example.component';\nimport { HttpExampleComponent } from './examples/http-example.component';\nimport { MyCounterComponent } from './examples/redux-example/my-counter.component';\nimport { DialogExampleComponent } from './examples/dialog-example/dialog-example.component';\nimport { IbToastExampleComponent } from './examples/toast-example/toast-example.component';\nimport { IbTableExampleNoReduxComponent } from './examples/table-example/table-without-redux/table-example.component';\nimport { IbTableStickyExampleComponent } from './examples/table-example/table-sticky/table-example.component';\nimport { NavComponent } from './examples/nav/nav.component';\nimport { IbKaiTableExamplePage } from './examples/kai-table-example/kai-table-example';\nimport { IbKaiTableContextActionExamplePage } from './examples/kai-table-example/kai-table-context-action-example';\nimport { IbKaiTableFullExamplePage } from './examples/kai-table-example/kai-table-full-example';\nimport { IbKaiTableApiExamplePage } from './examples/kai-table-example/kai-table-api-example';\n\nconst appRoutes: Routes = [\n  {\n    path: 'home',\n    component: NavComponent,\n    children: [\n      {\n        path: 'table',\n        data: { breadcrumb: 'Table' },\n        children: [\n          {\n            path: 'redux',\n            component: IbTableExampleComponent,\n            data: { breadcrumb: '' },\n          },\n          {\n            path: 'noredux',\n            data: { breadcrumb: 'Without redux' },\n            component: IbTableExampleNoReduxComponent\n          },\n          {\n            path: 'sticky',\n            data: { breadcrumb: 'Sticky' },\n            component: IbTableStickyExampleComponent\n          },\n          {\n            path: '',\n            redirectTo: 'redux',\n            pathMatch: 'full'\n          }\n        ]\n      },\n      {\n        path: 'forms',\n        data: { breadcrumb: 'Forms' },\n        component: DynamicFormsExampleComponent,\n      },\n      {\n        path: 'redux',\n        data: { breadcrumb: 'Redux' },\n        children: [{\n          path: 'base',\n          component: MyCounterComponent,\n          data: { breadcrumb: 'Base' },\n         },\n         {\n          path: 'lazy',\n          data: { breadcrumb: 'Lazy loaded' },\n          loadChildren: () => \"import('./examples/lazy-loaded/lazy-loaded.module').then(m => m.LazyLoadedModule)\"\n        }]\n      },\n      {\n        path: 'http',\n        data: { breadcrumb: 'Http' },\n        component: HttpExampleComponent,\n      },\n      {\n        path: 'dialog',\n        data: { breadcrumb: 'Dialog' },\n        component: DialogExampleComponent,\n      },\n      {\n        path: 'toast',\n        data: { breadcrumb: 'examples.toastMenu' },\n        component: IbToastExampleComponent\n      },\n      {\n        path: 'kai-table',\n        data: { breadcrumb: 'Table' },\n        children: [\n          {\n            path: 'simple',\n            data: { breadcrumb: 'Simple' },\n            component: IbKaiTableExamplePage\n          },\n          {\n            path: 'context-action',\n            data: { breadcrumb: 'Context Action' },\n            component: IbKaiTableContextActionExamplePage\n          },\n          {\n            path: 'api',\n            data: { breadcrumb: 'Api' },\n            component: IbKaiTableApiExamplePage\n          },\n          {\n            path: 'full',\n            data: { breadcrumb: 'Full' },\n            component: IbKaiTableFullExamplePage\n          }\n        ]\n      },\n      {\n        path: '',\n        redirectTo: 'table',\n        pathMatch: 'full'\n      }\n    ]\n  },\n  {\n    path: '**',\n    redirectTo: 'home',\n    pathMatch: 'full'\n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forRoot(appRoutes, {})\n  ],\n  exports: [\n    RouterModule\n  ],\n})\nexport class RoutingModule {}\n\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TotalRowModule",
            "id": "module-TotalRowModule-b1d7c126449d96e824970c807f2e66ff318bc1bce95cd8eba503a19acc2142b7a3d19a1ce532149df84060d7cf65db63847fd1a8f8fdbf5c959fd4206b658dee",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/inobeta-ui/ui/table/components/table-total-row/total-row.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IbTableTotalRowComponent } from './table-total-row.component';\nimport { IbTableTotalRowApplyDialogComponent } from './table-total-row-apply-dialog.component';\nimport { IbTableTotalRowCellDirective, IbTotalRowDefaultCellComponent } from './cells/ib-total-row-default-cell/ib-total-row-default-cell.component';\nimport { IbTotalRowAddCellComponent } from './cells/ib-total-row-add-cell/ib-total-row-add-cell.component';\nimport { IbTotalRowAvgCellComponent } from './cells/ib-total-row-avg-cell/ib-total-row-avg-cell.component';\nimport { IbTotalRowBaseCellComponent } from './cells/ib-total-row-base-cell/ib-total-row-base-cell.component';\nimport { IbTotalRowSumCellComponent } from './cells/ib-total-row-sum-cell/total-row-sum-cell.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { IbStickyAreaModule } from '../../directives/sticky-area/sticky-area.module';\n\n@NgModule({\n  declarations: [\n    IbTableTotalRowComponent,\n    IbTableTotalRowApplyDialogComponent,\n    IbTableTotalRowCellDirective,\n    IbTotalRowSumCellComponent,\n    IbTotalRowDefaultCellComponent,\n    IbTotalRowAddCellComponent,\n    IbTotalRowAvgCellComponent,\n    IbTotalRowBaseCellComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    TranslateModule.forChild({\n      extend: true\n    }),\n    MatDialogModule,\n    MatSelectModule,\n    MatIconModule,\n    MatButtonModule,\n    IbStickyAreaModule\n  ],\n  exports: [\n    IbTableTotalRowComponent,\n    IbTableTotalRowApplyDialogComponent,\n    IbTableTotalRowCellDirective,\n    IbTotalRowSumCellComponent,\n    IbTotalRowDefaultCellComponent,\n    IbTotalRowAddCellComponent,\n    IbTotalRowAvgCellComponent,\n    IbTotalRowBaseCellComponent\n  ]\n})\nexport class TotalRowModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IbTableTotalRowApplyDialogComponent"
                        },
                        {
                            "name": "IbTableTotalRowCellDirective"
                        },
                        {
                            "name": "IbTableTotalRowComponent"
                        },
                        {
                            "name": "IbTotalRowAddCellComponent"
                        },
                        {
                            "name": "IbTotalRowAvgCellComponent"
                        },
                        {
                            "name": "IbTotalRowBaseCellComponent"
                        },
                        {
                            "name": "IbTotalRowDefaultCellComponent"
                        },
                        {
                            "name": "IbTotalRowSumCellComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IbStickyAreaModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IbTableTotalRowApplyDialogComponent"
                        },
                        {
                            "name": "IbTableTotalRowCellDirective"
                        },
                        {
                            "name": "IbTableTotalRowComponent"
                        },
                        {
                            "name": "IbTotalRowAddCellComponent"
                        },
                        {
                            "name": "IbTotalRowAvgCellComponent"
                        },
                        {
                            "name": "IbTotalRowBaseCellComponent"
                        },
                        {
                            "name": "IbTotalRowDefaultCellComponent"
                        },
                        {
                            "name": "IbTotalRowSumCellComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "addFilterToTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/redux/table.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Ib Table Filters] Update filters', props<{tableName: string, filterName: string, filterValue: any}>())",
                "rawdescription": "deprecated\nView store/reducer for new actions",
                "description": "<p>deprecated\nView store/reducer for new actions</p>\n"
            },
            {
                "name": "addPaginatorFiltersToTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/redux/table.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Ib Table Filters] Update paginator filters', props<{tableName: string, previousPageIndex: number, pageIndex: number, pageSize: number, lengthP: number}>())",
                "rawdescription": "deprecated\nView store/reducer for new actions",
                "description": "<p>deprecated\nView store/reducer for new actions</p>\n"
            },
            {
                "name": "addSortToTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/redux/table.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Ib Table Filters] Update sort', props<{tableName: string, sortType: Sort, emitChange: boolean}>())",
                "rawdescription": "deprecated\nView store/reducer for new actions",
                "description": "<p>deprecated\nView store/reducer for new actions</p>\n"
            },
            {
                "name": "and",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.AND,\n  value,\n})"
            },
            {
                "name": "ANON_USER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/store/effects/table.effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'ib-anon'"
            },
            {
                "name": "changeNameSurname",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/http/auth/redux/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[IbSession Service] Change Name And Surname', props<{ name: string, surname: string}>())"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/http/http.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  IbSpinnerLoadingComponent,\n  IbLoginComponent\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/tools/tools-test.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  IbMockTranslatePipeDirective\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/material-forms/material-form-test.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  IbMaterialFormStubComponent\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/material-forms/material-form.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  IbMatTextboxComponent,\n  IbMatDropdownComponent,\n  IbMatRadioComponent,\n  IbMatCheckboxComponent,\n  IbMatDatepickerComponent,\n  IbMatAutocompleteComponent,\n  IbMatLabelComponent,\n  IbMatTextareaComponent,\n  IbMatButtonComponent,\n  IbMatPaddingComponent,\n  IbMatSlideToggleComponent,\n  IbMaterialFormComponent,\n  IbMaterialFormControlComponent,\n  IbFormControlDirective\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/uploader/uploader.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  IbUploaderComponent\n]"
            },
            {
                "name": "COMPONENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/table-test.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  IbTableStubComponent\n]"
            },
            {
                "name": "contains",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.CONTAINS,\n  value,\n})"
            },
            {
                "name": "CounterActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/examples/redux-example/counter.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  increment: createAction('[Counter Component] Increment'),\n  decrement: createAction('[Counter Component] Decrement'),\n  reset: createAction('[Counter Component] Reset'),\n  addingNumber: createAction('[Counter Component] Adding number', props<{ numberToAdd: number}>())\n}"
            },
            {
                "name": "defaultTableDef",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/kai-table/table.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IbTableDef",
                "defaultValue": "{\n  paginator: {\n    pageSizeOptions: [5, 10, 25, 100],\n    showFirstLastButtons: true,\n    pageSize: 10,\n  },\n}"
            },
            {
                "name": "endsWith",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.ENDS_WITH,\n  value,\n})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "eq",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.EQUALS,\n  value,\n})"
            },
            {
                "name": "exampleActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/examples/lazy-loaded/store/example/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    exampleAction: createAction(\n    '[LazyLoaded/Example] exampleAction'\n  )\n}"
            },
            {
                "name": "FRUITS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/examples/kai-table-example/users.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string[]",
                "defaultValue": "[\n  'blueberry',\n  'lychee',\n  'kiwi',\n  'mango',\n  'peach',\n  'lime',\n  'pomegranate',\n  'pineapple',\n  'banana',\n  'apple',\n  'pear',\n  'orange',\n]"
            },
            {
                "name": "getIbHydrationMetaReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/hydration/reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(ibSessionStorageKey: string, ibReduxPersistKeys: string[]) => {\n  return (\n    reducer: ActionReducer<any>\n  ): ActionReducer<any> => {\n    return (state, action) => {\n\n      switch(action.type){\n        case HydrationActions.ibHydrate.type:\n        case UPDATE:\n          return {\n            ...state,\n            ...loadState(ibSessionStorageKey, ibReduxPersistKeys)\n          };\n        default:\n          return reducer(state, action);\n      }\n    };\n  };\n}"
            },
            {
                "name": "getIbMetaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/hydration/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(ibSessionStorageKey: string, ibReduxPersistKeys: string[]): MetaReducer<any, any>[] => {\n   return [\n    getIbHydrationMetaReducer(ibSessionStorageKey, ibReduxPersistKeys)\n  ]\n}"
            },
            {
                "name": "gt",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.GREATHER_THAN,\n  value,\n})"
            },
            {
                "name": "gte",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.GREATHER_THAN_EQUALS,\n  value,\n})"
            },
            {
                "name": "IB_CELL_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/kai-table/table.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<IbCellData>(\"IbCellData\")"
            },
            {
                "name": "IB_TABLE_ANON_USER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/services/table-conf.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'ib-anon'"
            },
            {
                "name": "IB_TABLE_STORAGE_NAME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/services/table-conf.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'ib-table-store'"
            },
            {
                "name": "ibHydrate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/hydration/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\"[IbHydration] Hydrate\")"
            },
            {
                "name": "ibSetupHydration",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/hydration/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(ibSessionStorageKey: string, ibReduxPersistKeys: string[]) => {\n  HydrationEffects.ibSessionStorageKey = ibSessionStorageKey;\n  HydrationEffects.ibReduxPersistKeys = ibReduxPersistKeys;\n  return {\n    effects: [\n      HydrationEffects\n    ],\n    metareducers: getIbMetaReducers(ibSessionStorageKey, ibReduxPersistKeys)\n  }\n}"
            },
            {
                "name": "ibTableActionAddFilterField",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/store/actions/table.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[IbTable] IbTableAction Add Filter Field',\n  props<{state: IbTableFilterState, tableName: string}>()\n)"
            },
            {
                "name": "ibTableActionLoadConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/store/actions/table.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[IbTable] IbTableAction LoadConfig',\n  props<{ configName: string, tableName: string }>()\n)"
            },
            {
                "name": "ibTableActionSaveConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/store/actions/table.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[IbTable] IbTableAction SaveConfig',\n  props<{ options: any, tableName: string }>()\n)"
            },
            {
                "name": "ibTableActionSelectSortingField",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/store/actions/table.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[IbTable] IbTableAction Select Sorting Field',\n  props<{options: IbTableSortState, tableName: string}>()\n)"
            },
            {
                "name": "ibTableActionSetConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/store/actions/table.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[IbTable] IbTableAction SetConfig',\n  props<{ config: {config: IbTableConfigState, name: string}, tableName: string }>()\n)"
            },
            {
                "name": "ibTableActionSetPaginator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/store/actions/table.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[IbTable] IbTableAction Set Paginator',\n  props<{state: IbTablePaginatorState, tableName: string}>()\n)"
            },
            {
                "name": "ibTableActionSetTotalRowCell",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/store/actions/table.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[IbTable] IbTableAction TotalRow Set Cell',\n  props<{state: IbTableTotalRowState, tableName: string}>()\n)"
            },
            {
                "name": "ibTableCurrentConfSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/store/selectors/table.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectTableState,\n  (state: fromTable.IbTableState) => state?.selectedConfig\n)"
            },
            {
                "name": "ibTableFeatureInitialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IbTableState",
                "defaultValue": "{\n  instances: []\n}"
            },
            {
                "name": "ibTableFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'ibTable'"
            },
            {
                "name": "ibTableSelectFilters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/store/selectors/table.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(tableName) => createSelector(\n  selectTableState,\n  (state: fromTable.IbTableState) => state?.instances?.find(i => i.tableName === tableName)?.config?.filters\n)"
            },
            {
                "name": "ibTableSelectPaginator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/store/selectors/table.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(tableName) => createSelector(\n  selectTableState,\n  (state: fromTable.IbTableState) => state?.instances?.find(i => i.tableName === tableName)?.config?.paginator\n)"
            },
            {
                "name": "ibTableSelectSort",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/store/selectors/table.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(tableName) => createSelector(\n  selectTableState,\n  (state: fromTable.IbTableState) => state?.instances?.find(i => i.tableName === tableName)?.config?.sort\n)"
            },
            {
                "name": "ibTableSelectTotalRow",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/store/selectors/table.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(tableName) => createSelector(\n  selectTableState,\n  (state: fromTable.IbTableState) => state?.instances?.find(i => i.tableName === tableName)?.config?.totals\n)"
            },
            {
                "name": "ibTableSupportedFilters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/models/titles.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  IbTableTitlesTypes.ANY,\n  IbTableTitlesTypes.DATE,\n  IbTableTitlesTypes.STRING,\n  IbTableTitlesTypes.BOOLEAN,\n  IbTableTitlesTypes.NUMBER,\n  IbTableTitlesTypes.INPUT_NUMBER\n]"
            },
            {
                "name": "INITIAL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/examples/lazy-loaded/store/example/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IExampleState",
                "defaultValue": "{\n  value: ''\n}"
            },
            {
                "name": "INITIAL_COUNTER_STATE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/examples/redux-example/counter.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ICounterState",
                "defaultValue": "{\n  number: 0\n}"
            },
            {
                "name": "INITIAL_SESSION_STATE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/http/auth/redux/session.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ISessionState",
                "defaultValue": "{\n  activeSession: null\n}"
            },
            {
                "name": "INITIAL_TABLE_FILTERS_STATE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/redux/table.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ITableFiltersState",
                "defaultValue": "{\n  tableFilters: {}\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "lazyLoadedEffects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/examples/lazy-loaded/store/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    ExampleEffects,\n]"
            },
            {
                "name": "lazyLoadedFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/examples/lazy-loaded/store/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'lazyLoaded'"
            },
            {
                "name": "lazyLoadedReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/examples/lazy-loaded/store/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<ILazyLoadedStore>",
                "defaultValue": "{\n    example: exampleReducer,\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = await canvas.getByRole('button', {\n      name: /Log in/i,\n    });\n    await userEvent.click(loginButton);\n  },\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
            },
            {
                "name": "login",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/http/auth/redux/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[IbSession Service] Login', props<{ activeSession: IbSession}>())"
            },
            {
                "name": "loginUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/http/auth/session.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/api/auth/login'"
            },
            {
                "name": "logout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/http/auth/redux/session.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[IbSession Service] Logout')"
            },
            {
                "name": "lt",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.LESS_THAN,\n  value,\n})"
            },
            {
                "name": "lte",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.LESS_THAN_EQUALS,\n  value,\n})"
            },
            {
                "name": "main",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/examples/lazy-loaded/store/example/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(INITIAL,\n  on(exampleActions.exampleAction, (state, action) => {\n    return {\n      ...state,\n      value: 'exampleValue'\n    }\n  }),\n)"
            },
            {
                "name": "mainCounterReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/examples/redux-example/counter.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(INITIAL_COUNTER_STATE,\n  on(CounterActions.increment, state => ({ ...state, number: state.number + 1 })),\n  on(CounterActions.decrement, state => ({ ...state, number: state.number - 1 })),\n  on(CounterActions.reset, state => ({ ...state, number: 0 })),\n  on(CounterActions.addingNumber, (state, { numberToAdd }) => ({ number: state.number + numberToAdd}))\n)"
            },
            {
                "name": "mainSessionReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/http/auth/redux/session.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(INITIAL_SESSION_STATE,\n  on(SessionActions.login, (state, { activeSession }) => ({ activeSession})),\n  on(SessionActions.logout, state => ({ ...state, activeSession: null })),\n  on(SessionActions.changeNameSurname, (state, {name, surname}) => ({ ...state, activeSession: {\n      ...state.activeSession,\n      userData: {\n        ...state.activeSession.userData,\n        name,\n        surname\n      }\n    } }))\n)"
            },
            {
                "name": "mainTableFiltersReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/redux/table.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(INITIAL_TABLE_FILTERS_STATE,\n  on(TableFiltersActions.resetFilters, state => ({...state, tableFilters: {}})),\n  on(TableFiltersActions.addFilterToTable, (state, {tableName, filterName, filterValue}) => {\n    let obj;\n    if (state.tableFilters[tableName]) {\n      if (state.tableFilters[tableName][filterName]) {\n        state.tableFilters[tableName][filterName].value = filterValue;\n      } else {\n        obj = {\n          value: filterValue\n        };\n        state.tableFilters[tableName][filterName] = obj;\n      }\n    } else {\n      obj = {};\n      obj[filterName] = {value: filterValue};\n      state.tableFilters[tableName] = obj;\n    }\n    return {\n      ...state\n    };\n  }),\non(TableFiltersActions.addSortToTable, (state, {tableName, sortType/*, emitChange*/}) => {\n    if (state.tableFilters[tableName]) {\n      state.tableFilters[tableName].sortType = sortType;\n    } else {\n      state.tableFilters[tableName] = {\n        sortType\n      };\n    }\n    return {\n      ...state\n    };\n  }),\n  on(TableFiltersActions.addPaginatorFiltersToTable, (state, {tableName, previousPageIndex, pageIndex, pageSize, lengthP}) => {\n    const obj = {\n      paginatorFilters: {\n        previousPageIndex,\n        pageIndex,\n        pageSize,\n        lengthP\n      }\n    };\n\n    if (state.tableFilters[tableName]) {\n      state.tableFilters[tableName].paginatorFilters = obj.paginatorFilters;\n    } else {\n      state.tableFilters[tableName] = obj;\n    }\n    return {\n      ...state\n    };\n  })\n)"
            },
            {
                "name": "maxDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/examples/kai-table-example/users.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Date().setMonth(new Date().getMonth() + 2)"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Button>",
                "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Header>",
                "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Page>",
                "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
            },
            {
                "name": "minDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/examples/kai-table-example/users.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Date().setMonth(new Date().getMonth() - 2)"
            },
            {
                "name": "NAMES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/examples/kai-table-example/users.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string[]",
                "defaultValue": "[\n  'Maia',\n  'Asher',\n  'Olivia',\n  'Atticus',\n  'Amelia',\n  'Jack',\n  'Charlotte',\n  'Theodore',\n  'Isla',\n  'Oliver',\n  'Isabella',\n  'Jasper',\n  'Cora',\n  'Levi',\n  'Violet',\n  'Arthur',\n  'Mia',\n  'Thomas',\n  'Elizabeth',\n  'Alice'\n]"
            },
            {
                "name": "ncontains",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.NOT_CONTAINS,\n  value,\n})"
            },
            {
                "name": "neq",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.NOT_EQUALS,\n  value,\n})"
            },
            {
                "name": "none",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): IbFilterDef => ({\n  operator: IbFilterOperator.NONE,\n  value: null,\n})"
            },
            {
                "name": "or",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.OR,\n  value,\n})"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  ibTableFeatureInitialState,\n\n  on(TableActions.ibTableActionSetTotalRowCell,\n    (state, newTotalRowState) => {\n      if (!newTotalRowState.tableName) {\n        return { ...state };\n      }\n      const instance = state.instances?.find(i => i.tableName === newTotalRowState.tableName);\n      if (!instance) {\n        return formatFieldState(state, newTotalRowState.tableName, null, { totals: [newTotalRowState.state] });\n      }\n      state.instances.splice(state.instances.indexOf(instance), 1);\n      const rowExists = instance.config?.totals.find(t => t.columnName === newTotalRowState.state.columnName);\n      if (!rowExists) {\n        return formatFieldState(state,\n          newTotalRowState.tableName,\n          instance,\n          { totals: [...(instance.config?.totals || []), newTotalRowState.state] });\n      }\n      return formatFieldState(state, newTotalRowState.tableName, instance,\n        {\n          totals: instance.config.totals.map(\n            t => t.columnName === newTotalRowState.state.columnName\n              ? ({ columnName: newTotalRowState.state.columnName, func: newTotalRowState.state.func })\n              : t\n          )\n        });\n    }\n  ),\n\n  on(TableActions.ibTableActionSetConfig, (state, newConfigData) => {\n    if (!newConfigData.config) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === newConfigData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return {\n      ...state,\n      instances: [\n        ...(state.instances || []),\n        {\n          tableName: newConfigData.tableName,\n          config: newConfigData.config.config\n        }\n      ],\n      selectedConfig: `${newConfigData.tableName}/${newConfigData.config.name}`\n    };\n  }),\n\n  on(TableActions.ibTableActionSaveConfig, (state, saveConfigData) => {\n    return { ...state, selectedConfig: `${saveConfigData.tableName}/${saveConfigData.options.data.name}` };\n  }),\n\n  on(TableActions.ibTableActionSelectSortingField, (state, sortData) => {\n    if (!sortData.tableName) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === sortData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return formatFieldState(state, sortData.tableName, instance, { sort: sortData.options });\n  }),\n\n  on(TableActions.ibTableActionAddFilterField,\n    (state, addFilterState) => {\n      if (!addFilterState.tableName) {\n        return { ...state };\n      }\n      const instance = state.instances?.find(i => i.tableName === addFilterState.tableName);\n      if (!instance) {\n        return formatFieldState(state, addFilterState.tableName, null, { filters: [addFilterState.state] });\n      }\n      state.instances.splice(state.instances.indexOf(instance), 1);\n      const rowExists = instance.config?.filters.find(t => t.columnName === addFilterState.state.columnName);\n      if (!rowExists) {\n        return formatFieldState(state,\n          addFilterState.tableName,\n          instance,\n          { filters: [...(instance.config?.filters || []), addFilterState.state] });\n      }\n      return formatFieldState(state, addFilterState.tableName, instance, {\n        filters: instance.config.filters.map(\n          t => t.columnName === addFilterState.state.columnName\n            ? ({ columnName: addFilterState.state.columnName, value: addFilterState.state.value })\n            : t\n        )\n      });\n    }\n  ),\n\n  on(TableActions.ibTableActionSetPaginator, (state, paginatorData) => {\n    if (!paginatorData.tableName) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === paginatorData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return formatFieldState(state, paginatorData.tableName, instance, { paginator: paginatorData.state });\n  }),\n)"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<IAppState>",
                "defaultValue": "{\n  countState: counterReducer\n}"
            },
            {
                "name": "reduxStorageSave",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ibSetupHydration('__redux-store-inobeta-ui__', ['sessionState', 'ibTable', 'lazyLoaded'])"
            },
            {
                "name": "resetFilters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/redux/table.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Ib Table Filters] Reset filters')",
                "rawdescription": "deprecated\nView store/reducer for new actions",
                "description": "<p>deprecated\nView store/reducer for new actions</p>\n"
            },
            {
                "name": "sampleData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/examples/table-example/json-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    \"_id\": \"60533e84da35d4796dea19d0\",\n    \"index\": 0,\n    \"guid\": \"7d5f85ba-35fc-420d-89fa-9a65d5385c93\",\n    \"isActive\": true,\n    \"balance\": 3747.58,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 37,\n    \"enabled\": true,\n    \"eyeColor\": \"green\",\n    \"name\": \"Angela Saunders\",\n    \"gender\": \"female\",\n    \"company\": \"shared.ibTable.noData\",\n    \"email\": \"angelasaunders@quizmo.com\",\n    \"phone\": \"+1 (800) 421-3866\",\n    \"address\": \"808 Robert Street, Santel, Delaware, 1485\",\n    \"about\": \"Excepteur in velit irure in do. Ad consectetur esse reprehenderit nulla culpa anim laboris exercitation tempor velit duis aliquip. Exercitation quis reprehenderit do occaecat commodo voluptate mollit irure tempor minim mollit. Duis tempor aute qui laboris tempor pariatur reprehenderit magna laboris excepteur eiusmod consectetur. Anim eiusmod nostrud cillum incididunt laboris commodo id voluptate voluptate voluptate. Aute aliquip culpa deserunt id ad excepteur.\\r\\n\",\n    \"registered\": \"2014-12-31T01:07:28-01:00\",\n    \"latitude\": -30.245791,\n    \"longitude\": -164.541315,\n    \"label\": [\n      {\n        \"background\": \"yellow\",\n        \"color\": \"black\",\n        \"name\": \"nisi\"\n      },\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"laboris\"\n      },\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"esse\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e842bec379c7ed2064e\",\n    \"index\": 1,\n    \"guid\": \"076bbd7e-66f9-4b8b-99be-62b72f57e301\",\n    \"isActive\": false,\n    \"balance\": 1475.48,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 21,\n    \"enabled\": true,\n    \"eyeColor\": \"brown\",\n    \"name\": \"Vivian Oneill\",\n    \"gender\": \"female\",\n    \"company\": \"BRAINCLIP\",\n    \"email\": \"vivianoneill@brainclip.com\",\n    \"phone\": \"+1 (807) 562-3886\",\n    \"address\": \"766 Ocean Avenue, Sedley, Arkansas, 3020\",\n    \"about\": \"Do velit irure duis aliqua adipisicing duis aute proident enim. Do non ullamco adipisicing minim irure Lorem minim magna pariatur laborum. Amet velit in reprehenderit excepteur id laborum officia ad commodo aute ad. Sint aute est consequat consequat sint. Consequat enim tempor pariatur nulla tempor cillum mollit. Dolore nulla ullamco pariatur labore.\\r\\n\",\n    \"registered\": \"2018-10-22T01:20:38-02:00\",\n    \"latitude\": 81.95058,\n    \"longitude\": -1.873851,\n    \"label\": [\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"labore\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e84980b10dd15097183\",\n    \"index\": 2,\n    \"guid\": \"1f4d6a6e-b29e-4423-a480-42cf16b14a68\",\n    \"isActive\": false,\n    \"balance\": 2083.52,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 21,\n    \"enabled\": false,\n    \"eyeColor\": \"green\",\n    \"name\": \"Hensley Craig\",\n    \"gender\": \"male\",\n    \"company\": \"SONGBIRD\",\n    \"email\": \"hensleycraig@songbird.com\",\n    \"phone\": \"+1 (977) 462-2881\",\n    \"address\": \"468 Clarendon Road, Celeryville, South Carolina, 9175\",\n    \"about\": \"Id consequat elit proident eu ullamco quis anim non ea culpa excepteur pariatur. Cillum excepteur irure enim et id elit culpa velit veniam deserunt velit. Dolor ex consectetur sunt officia in culpa cupidatat ut.\\r\\n\",\n    \"registered\": \"2017-11-21T11:13:07-01:00\",\n    \"latitude\": 33.477698,\n    \"longitude\": 154.78551,\n    \"label\": [\n      {\n        \"background\": \"brown\",\n        \"color\": \"white\",\n        \"name\": \"consectetur\"\n      },\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"ea\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e84d6f70e3895d8e41d\",\n    \"index\": 3,\n    \"guid\": \"2907791b-b9e8-41da-83e3-213239f4a8b6\",\n    \"isActive\": false,\n    \"balance\": 2291.15,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 21,\n    \"enabled\": true,\n    \"eyeColor\": \"blue\",\n    \"name\": \"Blevins Patterson\",\n    \"gender\": \"male\",\n    \"company\": \"ZUVY\",\n    \"email\": \"blevinspatterson@zuvy.com\",\n    \"phone\": \"+1 (960) 451-2752\",\n    \"address\": \"938 Meeker Avenue, Nescatunga, Nebraska, 1792\",\n    \"about\": \"Ut id laboris ex qui. Est nisi aliquip deserunt in nostrud. Sit sint excepteur eiusmod eiusmod dolor quis magna eiusmod duis ullamco veniam minim. Commodo sit voluptate laborum exercitation aliquip do sunt anim commodo excepteur proident exercitation. Proident consequat nulla commodo enim esse qui ullamco anim in eiusmod dolore veniam.\\r\\n\",\n    \"registered\": \"2017-12-18T06:25:00-01:00\",\n    \"latitude\": -51.976657,\n    \"longitude\": -123.533984,\n    \"label\": [\n      {\n        \"background\": \"brown\",\n        \"color\": \"white\",\n        \"name\": \"eiusmod\"\n      },\n      {\n        \"background\": \"green\",\n        \"color\": \"white\",\n        \"name\": \"incididunt\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e847973b681ac2b24ad\",\n    \"index\": 4,\n    \"guid\": \"148d2ab0-7e69-4afa-b9e4-5383d360dae7\",\n    \"isActive\": false,\n    \"balance\": 2563.57,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 31,\n    \"enabled\": true,\n    \"eyeColor\": \"green\",\n    \"name\": \"Hooper Patrick\",\n    \"gender\": \"male\",\n    \"company\": \"CONJURICA\",\n    \"email\": \"hooperpatrick@conjurica.com\",\n    \"phone\": \"+1 (967) 506-2055\",\n    \"address\": \"970 Dewey Place, Turah, Kansas, 1030\",\n    \"about\": \"Ut est nisi laboris minim amet ex tempor adipisicing et exercitation pariatur laborum irure aliqua. Reprehenderit do nisi nulla ut Lorem. Proident anim cillum ea excepteur ullamco ut sint cupidatat voluptate labore. Fugiat magna sunt minim est duis.\\r\\n\",\n    \"registered\": \"2014-06-30T10:11:58-02:00\",\n    \"latitude\": 33.368782,\n    \"longitude\": 174.604308,\n    \"label\": [\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"consequat\"\n      },\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"sunt\"\n      },\n      {\n        \"background\": \"yellow\",\n        \"color\": \"black\",\n        \"name\": \"sint\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e847e34ba14c2707ab2\",\n    \"index\": 5,\n    \"guid\": \"96f31a6e-9488-496a-b5f8-97aaabfcfde5\",\n    \"isActive\": false,\n    \"balance\": 2553.09,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 33,\n    \"enabled\": false,\n    \"eyeColor\": \"brown\",\n    \"name\": \"Noreen Gill\",\n    \"gender\": \"female\",\n    \"company\": \"PHUEL\",\n    \"email\": \"noreengill@phuel.com\",\n    \"phone\": \"+1 (944) 592-3439\",\n    \"address\": \"221 Mermaid Avenue, Edenburg, Massachusetts, 6184\",\n    \"about\": \"Nulla do tempor pariatur minim officia veniam amet irure magna enim officia est. Ut nostrud elit velit ex cupidatat reprehenderit elit nisi nostrud duis. Aliquip commodo velit ea pariatur ipsum elit. Deserunt mollit ea tempor ut aliqua. Aliqua ex anim ut qui id qui tempor consectetur. Incididunt exercitation minim tempor adipisicing consectetur esse.\\r\\n\",\n    \"registered\": \"2016-08-03T07:04:44-02:00\",\n    \"latitude\": -80.206419,\n    \"longitude\": -100.68247,\n    \"label\": []\n  },\n  {\n    \"_id\": \"60533e84fbea003f468ef2a7\",\n    \"index\": 6,\n    \"guid\": \"fd7373eb-39c5-4954-9398-8af438ca7909\",\n    \"isActive\": false,\n    \"balance\": 2489.26,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 23,\n    \"enabled\": true,\n    \"eyeColor\": \"green\",\n    \"name\": \"Harriet Moreno\",\n    \"gender\": \"female\",\n    \"company\": \"STEELTAB\",\n    \"email\": \"harrietmoreno@steeltab.com\",\n    \"phone\": \"+1 (828) 527-2642\",\n    \"address\": \"372 Bogart Street, Lund, Minnesota, 6202\",\n    \"about\": \"Tempor tempor ipsum tempor veniam reprehenderit eu aliqua ea nostrud nisi adipisicing veniam ipsum. Consectetur elit irure velit anim voluptate nisi incididunt. Aute tempor occaecat esse anim occaecat consequat adipisicing exercitation eu ullamco sit et. Eiusmod et ad eu pariatur mollit sint veniam.\\r\\n\",\n    \"registered\": \"2014-12-29T02:31:14-01:00\",\n    \"latitude\": 71.733197,\n    \"longitude\": 109.245302,\n    \"label\": [\n      {\n        \"background\": \"yellow\",\n        \"color\": \"black\",\n        \"name\": \"ullamco\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e84d2e1759d281d5616\",\n    \"index\": 7,\n    \"guid\": \"2e447a73-1618-4512-91c0-63bde813bd39\",\n    \"isActive\": false,\n    \"balance\": 2220.35,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 27,\n    \"enabled\": true,\n    \"eyeColor\": \"blue\",\n    \"name\": \"Mejia Williams\",\n    \"gender\": \"male\",\n    \"company\": \"SLOFAST\",\n    \"email\": \"mejiawilliams@slofast.com\",\n    \"phone\": \"+1 (945) 451-2217\",\n    \"address\": \"624 Nixon Court, Ballico, Rhode Island, 9268\",\n    \"about\": \"Proident sint labore deserunt sit. Et ipsum reprehenderit ipsum est commodo id. Laboris sunt ut tempor qui id ad labore excepteur cillum cupidatat nostrud pariatur voluptate dolore. Laborum ipsum ullamco culpa velit minim excepteur adipisicing do laborum consequat aliqua nisi. Cillum amet dolore laborum do aliquip culpa.\\r\\n\",\n    \"registered\": \"2020-02-16T08:20:18-01:00\",\n    \"latitude\": -15.087671,\n    \"longitude\": -27.51475,\n    \"label\": [\n      {\n        \"background\": \"green\",\n        \"color\": \"white\",\n        \"name\": \"officia\"\n      },\n      {\n        \"background\": \"pink\",\n        \"color\": \"black\",\n        \"name\": \"deserunt\"\n      },\n      {\n        \"background\": \"pink\",\n        \"color\": \"black\",\n        \"name\": \"officia\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e84d428d42236a57b38\",\n    \"index\": 8,\n    \"guid\": \"841b952e-8c47-40d8-8f53-4e137222f7ac\",\n    \"isActive\": false,\n    \"balance\": 1686.64,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 38,\n    \"enabled\": true,\n    \"eyeColor\": \"brown\",\n    \"name\": \"Robyn Reilly\",\n    \"gender\": \"female\",\n    \"company\": \"JUMPSTACK\",\n    \"email\": \"robynreilly@jumpstack.com\",\n    \"phone\": \"+1 (886) 486-3992\",\n    \"address\": \"546 Court Square, Forestburg, Alaska, 7945\",\n    \"about\": \"Excepteur enim eiusmod ea cupidatat magna. Culpa ad laboris excepteur aute tempor tempor et. Culpa culpa deserunt ipsum nisi nostrud ex cillum ut voluptate culpa fugiat ipsum. Qui enim dolor minim consequat veniam.\\r\\n\",\n    \"registered\": \"2018-08-11T05:36:39-02:00\",\n    \"latitude\": -33.055566,\n    \"longitude\": 172.968323,\n    \"label\": [\n      {\n        \"background\": \"pink\",\n        \"color\": \"black\",\n        \"name\": \"commodo\"\n      },\n      {\n        \"background\": \"green\",\n        \"color\": \"white\",\n        \"name\": \"aliqua\"\n      },\n      {\n        \"background\": \"green\",\n        \"color\": \"white\",\n        \"name\": \"labore\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e842b9cd2767e4cdf0c\",\n    \"index\": 9,\n    \"guid\": \"9202d366-1d00-4f8c-9ed4-8f02fc40ab62\",\n    \"isActive\": false,\n    \"balance\": 1409.56,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 30,\n    \"enabled\": false,\n    \"eyeColor\": \"blue\",\n    \"name\": \"Atkins Mcintosh\",\n    \"gender\": \"male\",\n    \"company\": \"KOG\",\n    \"email\": \"atkinsmcintosh@kog.com\",\n    \"phone\": \"+1 (999) 504-3282\",\n    \"address\": \"389 Fayette Street, Caln, Maine, 6054\",\n    \"about\": \"Do aliquip adipisicing duis duis proident est nisi. Eiusmod quis nulla mollit deserunt ad officia eiusmod cupidatat. Duis ex id fugiat ea eu sint laboris aute labore irure adipisicing. Eiusmod do sint esse magna et qui voluptate officia incididunt laboris adipisicing nostrud proident amet. Voluptate duis consectetur velit commodo sint esse sunt amet sint voluptate esse laborum. Ex incididunt qui nisi elit culpa tempor do irure mollit commodo aliquip amet.\\r\\n\",\n    \"registered\": \"2019-01-08T10:26:34-01:00\",\n    \"latitude\": 31.634017,\n    \"longitude\": -66.176564,\n    \"label\": [\n      {\n        \"background\": \"yellow\",\n        \"color\": \"black\",\n        \"name\": \"in\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e844689590dd5bfe7cb\",\n    \"index\": 10,\n    \"guid\": \"483db46c-99f7-4df0-8de0-92edc2293f54\",\n    \"isActive\": false,\n    \"balance\": 2760.7,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 23,\n    \"enabled\": true,\n    \"eyeColor\": \"green\",\n    \"name\": \"Alma Sandoval\",\n    \"gender\": \"female\",\n    \"company\": \"TELPOD\",\n    \"email\": \"almasandoval@telpod.com\",\n    \"phone\": \"+1 (877) 510-2425\",\n    \"address\": \"625 Poplar Street, Jamestown, Oklahoma, 905\",\n    \"about\": \"Tempor minim et eu cillum pariatur ex. Aliqua et ex nostrud eiusmod incididunt ex laboris nisi. Mollit esse sint deserunt do nulla deserunt ad esse ex. Cupidatat ipsum mollit consequat anim nulla anim nulla duis veniam. Occaecat eiusmod dolor non sunt irure ut laboris nisi est deserunt mollit Lorem. Exercitation do aliquip deserunt enim anim occaecat ipsum sint id adipisicing est in.\\r\\n\",\n    \"registered\": \"2015-08-12T07:26:44-02:00\",\n    \"latitude\": 10.860612,\n    \"longitude\": -6.083388,\n    \"label\": [\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"do\"\n      },\n      {\n        \"background\": \"pink\",\n        \"color\": \"black\",\n        \"name\": \"dolore\"\n      },\n      {\n        \"background\": \"yellow\",\n        \"color\": \"black\",\n        \"name\": \"ipsum\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e84880e30bb9f9a5b69\",\n    \"index\": 11,\n    \"guid\": \"79a5f9b0-7b5b-40a0-aa99-177b1a3fe56c\",\n    \"isActive\": true,\n    \"balance\": 2263.19,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 31,\n    \"enabled\": false,\n    \"eyeColor\": \"blue\",\n    \"name\": \"Lorene Palmer\",\n    \"gender\": \"female\",\n    \"company\": \"KOFFEE\",\n    \"email\": \"lorenepalmer@koffee.com\",\n    \"phone\": \"+1 (978) 533-3144\",\n    \"address\": \"430 Leonard Street, Leeper, Nevada, 4133\",\n    \"about\": \"Labore minim proident Lorem adipisicing sint exercitation amet reprehenderit do mollit velit. Eiusmod duis qui esse dolore Lorem nostrud. Duis et ut ut anim dolor proident dolor ex.\\r\\n\",\n    \"registered\": \"2017-10-18T05:30:04-02:00\",\n    \"latitude\": -17.591932,\n    \"longitude\": -141.239979,\n    \"label\": [\n      {\n        \"background\": \"pink\",\n        \"color\": \"black\",\n        \"name\": \"ea\"\n      },\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"proident\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e8552eada4d5a8c95c5\",\n    \"index\": 12,\n    \"guid\": \"2167cabd-c2f5-41e4-b9e8-0b0d59038be2\",\n    \"isActive\": true,\n    \"balance\": 1093.9,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 37,\n    \"enabled\": true,\n    \"eyeColor\": \"blue\",\n    \"name\": \"Leon Mclaughlin\",\n    \"gender\": \"male\",\n    \"company\": \"BOILICON\",\n    \"email\": \"leonmclaughlin@boilicon.com\",\n    \"phone\": \"+1 (908) 537-2115\",\n    \"address\": \"320 Hoyts Lane, Chical, Vermont, 6785\",\n    \"about\": \"Sunt laboris ad cillum eiusmod nisi nulla nostrud adipisicing elit voluptate et. Anim consequat aliqua nostrud consectetur est. Aliquip esse proident ad esse. Elit magna minim veniam in anim commodo ea id. Non consectetur veniam fugiat voluptate nostrud dolore ullamco. Esse ea proident dolore magna duis nisi laboris minim sunt pariatur.\\r\\n\",\n    \"registered\": \"2016-03-26T09:33:18-01:00\",\n    \"latitude\": 56.238784,\n    \"longitude\": -33.484058,\n    \"label\": []\n  },\n  {\n    \"_id\": \"60533e85efd7008dd3720e08\",\n    \"index\": 13,\n    \"guid\": \"fb998093-1164-4b64-8d01-c4a64866fc70\",\n    \"isActive\": false,\n    \"balance\": 3572,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 39,\n    \"enabled\": true,\n    \"eyeColor\": \"green\",\n    \"name\": \"Sasha Harding\",\n    \"gender\": \"female\",\n    \"company\": \"TUBESYS\",\n    \"email\": \"sashaharding@tubesys.com\",\n    \"phone\": \"+1 (983) 540-2270\",\n    \"address\": \"639 Amber Street, Russellville, Iowa, 1990\",\n    \"about\": \"Consectetur voluptate consectetur esse ullamco et dolor. Enim velit proident ipsum in anim id ad qui. Commodo Lorem et dolore cupidatat laborum tempor aute nulla qui. Esse est cupidatat consectetur qui id aute nostrud sit et. Nulla qui aliquip duis veniam sint ea ut in ea. Irure aute id qui ullamco in amet duis magna consequat aliquip aute ex. Veniam elit nulla et non deserunt est.\\r\\n\",\n    \"registered\": \"2021-01-24T03:48:46-01:00\",\n    \"latitude\": 23.253791,\n    \"longitude\": 139.154837,\n    \"label\": []\n  },\n  {\n    \"_id\": \"60533e850a9d53ec09f39678\",\n    \"index\": 14,\n    \"guid\": \"e8ab3af6-9725-4163-8706-476b5dd09dfb\",\n    \"isActive\": false,\n    \"balance\": 3310.37,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 22,\n    \"enabled\": true,\n    \"eyeColor\": \"brown\",\n    \"name\": \"Whitfield Durham\",\n    \"gender\": \"male\",\n    \"company\": \"EXTRAWEAR\",\n    \"email\": \"whitfielddurham@extrawear.com\",\n    \"phone\": \"+1 (908) 541-3785\",\n    \"address\": \"254 Cypress Avenue, Martinsville, Kentucky, 1241\",\n    \"about\": \"Cupidatat id nisi tempor qui. Magna amet proident nulla cupidatat minim. Culpa ex sint minim duis irure ex ipsum ad quis voluptate fugiat esse tempor non.\\r\\n\",\n    \"registered\": \"2015-04-03T01:08:58-02:00\",\n    \"latitude\": 87.136547,\n    \"longitude\": 16.528903,\n    \"label\": [\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"voluptate\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e8585bc5182f406e575\",\n    \"index\": 15,\n    \"guid\": \"5c0af10a-cee7-46d3-ae81-7767962c566d\",\n    \"isActive\": false,\n    \"balance\": 3152.02,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 24,\n    \"enabled\": true,\n    \"eyeColor\": \"green\",\n    \"name\": \"Cash Cantu\",\n    \"gender\": \"male\",\n    \"company\": \"SPEEDBOLT\",\n    \"email\": \"cashcantu@speedbolt.com\",\n    \"phone\": \"+1 (908) 481-3778\",\n    \"address\": \"242 Arlington Place, Mulino, Ohio, 7829\",\n    \"about\": \"Laboris dolor minim sit qui ipsum magna aliquip sunt velit id eiusmod reprehenderit incididunt occaecat. Ex occaecat dolor tempor est mollit. Non ad ad voluptate magna sint minim elit do cupidatat pariatur incididunt sint magna. Exercitation irure adipisicing aliquip voluptate mollit occaecat esse ullamco tempor labore culpa commodo excepteur. Voluptate magna tempor occaecat laboris nisi est sint. Occaecat duis quis sunt amet reprehenderit incididunt fugiat ex et velit qui aute. Officia consequat amet commodo ea.\\r\\n\",\n    \"registered\": \"2015-07-02T03:13:37-02:00\",\n    \"latitude\": 75.421878,\n    \"longitude\": 169.088351,\n    \"label\": [\n      {\n        \"background\": \"brown\",\n        \"color\": \"white\",\n        \"name\": \"anim\"\n      },\n      {\n        \"background\": \"yellow\",\n        \"color\": \"black\",\n        \"name\": \"id\"\n      },\n      {\n        \"background\": \"brown\",\n        \"color\": \"white\",\n        \"name\": \"aliquip\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e85421b73bdbb0b8f47\",\n    \"index\": 16,\n    \"guid\": \"5a31bd98-ab56-48c3-aa52-fb0690f5c91b\",\n    \"isActive\": true,\n    \"balance\": 3473.91,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 20,\n    \"enabled\": true,\n    \"eyeColor\": \"blue\",\n    \"name\": \"Ramona Whitfield\",\n    \"gender\": \"female\",\n    \"company\": \"UTARIAN\",\n    \"email\": \"ramonawhitfield@utarian.com\",\n    \"phone\": \"+1 (975) 442-2879\",\n    \"address\": \"436 Barbey Street, Leming, Palau, 947\",\n    \"about\": \"Nulla officia anim minim exercitation enim in eu amet anim excepteur incididunt do veniam elit. Aute nostrud velit voluptate ad nisi adipisicing non consequat excepteur laboris laborum aliquip tempor. Lorem dolor sit eiusmod do eu nisi nisi deserunt culpa. Aute dolor eiusmod occaecat adipisicing nostrud id.\\r\\n\",\n    \"registered\": \"2017-02-09T09:45:45-01:00\",\n    \"latitude\": -75.341021,\n    \"longitude\": 149.061753,\n    \"label\": [\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"ea\"\n      },\n      {\n        \"background\": \"yellow\",\n        \"color\": \"black\",\n        \"name\": \"sunt\"\n      },\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"sunt\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e850470bc65c5b38d81\",\n    \"index\": 17,\n    \"guid\": \"2b0cd8b2-4eda-493e-82bb-c885ded414c5\",\n    \"isActive\": false,\n    \"balance\": 3173.09,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 24,\n    \"enabled\": true,\n    \"eyeColor\": \"brown\",\n    \"name\": \"Angie Bender\",\n    \"gender\": \"female\",\n    \"company\": \"ELITA\",\n    \"email\": \"angiebender@elita.com\",\n    \"phone\": \"+1 (806) 540-3301\",\n    \"address\": \"326 Fleet Street, Shrewsbury, Virginia, 9036\",\n    \"about\": \"Voluptate eu magna consectetur esse sunt velit magna pariatur irure. Eiusmod mollit eiusmod ullamco sit excepteur enim aute. Est aliqua sit duis ad proident ipsum ad nostrud ex labore proident labore ex duis. Qui ad ipsum officia elit officia nulla ut aute ea consequat adipisicing qui adipisicing eu. Nostrud voluptate pariatur exercitation id sunt esse eu sunt cupidatat voluptate incididunt mollit. Nostrud ea cupidatat in amet incididunt culpa elit ipsum elit.\\r\\n\",\n    \"registered\": \"2020-03-18T04:15:36-01:00\",\n    \"latitude\": -50.894386,\n    \"longitude\": -55.222191,\n    \"label\": [\n      {\n        \"background\": \"green\",\n        \"color\": \"white\",\n        \"name\": \"nisi\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e859abdbf887eac4b25\",\n    \"index\": 18,\n    \"guid\": \"8c8785b5-3031-430f-a34b-8b49b5304e87\",\n    \"isActive\": true,\n    \"balance\": 2902.14,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 32,\n    \"enabled\": false,\n    \"eyeColor\": \"green\",\n    \"name\": \"Esmeralda Mcconnell\",\n    \"gender\": \"female\",\n    \"company\": \"FARMEX\",\n    \"email\": \"esmeraldamcconnell@farmex.com\",\n    \"phone\": \"+1 (875) 533-3064\",\n    \"address\": \"479 Kiely Place, Dawn, Arizona, 2581\",\n    \"about\": \"Fugiat reprehenderit anim dolore anim enim duis ipsum elit id. Excepteur veniam sunt officia ad minim mollit amet ea ipsum dolor nulla pariatur ea. Occaecat aliquip consectetur commodo incididunt ad culpa do sunt. Enim aliquip proident deserunt culpa eiusmod eiusmod officia. Velit quis magna cupidatat cupidatat ex aliqua elit. Sit consectetur qui exercitation velit enim pariatur nostrud. Consequat nulla in qui qui.\\r\\n\",\n    \"registered\": \"2016-06-07T03:11:40-02:00\",\n    \"latitude\": -63.338444,\n    \"longitude\": 41.271469,\n    \"label\": [\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"dolore\"\n      },\n      {\n        \"background\": \"pink\",\n        \"color\": \"black\",\n        \"name\": \"enim\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e853129d6eaaad1bff5\",\n    \"index\": 19,\n    \"guid\": \"4e6269f2-2c20-4a5d-b378-4dd57a748dbb\",\n    \"isActive\": true,\n    \"balance\": 1367.46,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 38,\n    \"enabled\": false,\n    \"eyeColor\": \"blue\",\n    \"name\": \"Carmen Duke\",\n    \"gender\": \"female\",\n    \"company\": \"RECRITUBE\",\n    \"email\": \"carmenduke@recritube.com\",\n    \"phone\": \"+1 (900) 469-2130\",\n    \"address\": \"256 Garden Street, Tryon, Montana, 6400\",\n    \"about\": \"Adipisicing ea proident sit anim. Sint reprehenderit culpa proident laborum id ex officia nulla et enim fugiat ut nulla. Veniam proident elit dolor officia mollit excepteur amet ullamco. Ad nulla laboris laborum aliquip irure pariatur labore eiusmod id incididunt elit. Deserunt enim tempor sint elit fugiat id. Dolor magna sit consequat labore mollit culpa consectetur non duis reprehenderit laboris. Ex in ipsum esse velit commodo incididunt cupidatat proident.\\r\\n\",\n    \"registered\": \"2020-08-11T11:12:02-02:00\",\n    \"latitude\": 74.456123,\n    \"longitude\": 162.897203,\n    \"label\": [\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"et\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e857891a71226d8467d\",\n    \"index\": 20,\n    \"guid\": \"4436d40a-9b48-439d-b1ad-ec21caf16d5e\",\n    \"isActive\": false,\n    \"balance\": 3431.14,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 25,\n    \"enabled\": true,\n    \"eyeColor\": \"brown\",\n    \"name\": \"Fay Carver\",\n    \"gender\": \"female\",\n    \"company\": \"DEEPENDS\",\n    \"email\": \"faycarver@deepends.com\",\n    \"phone\": \"+1 (950) 547-3417\",\n    \"address\": \"926 Gunther Place, Herbster, Virgin Islands, 4756\",\n    \"about\": \"Ullamco fugiat nisi minim sunt nisi ullamco laborum culpa. Velit amet pariatur non enim Lorem aliquip. Ut est sint mollit irure commodo veniam duis fugiat aliquip eiusmod ex. Dolor minim amet reprehenderit aliqua magna id fugiat qui pariatur. Consectetur veniam enim est irure culpa incididunt labore exercitation proident irure ipsum.\\r\\n\",\n    \"registered\": \"2017-06-23T07:20:54-02:00\",\n    \"latitude\": 13.419379,\n    \"longitude\": 168.968013,\n    \"label\": []\n  },\n  {\n    \"_id\": \"60533e858c627049fce296f4\",\n    \"index\": 21,\n    \"guid\": \"86aac2a1-4599-4950-be5c-df352678b015\",\n    \"isActive\": false,\n    \"balance\": 3527.41,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 26,\n    \"enabled\": true,\n    \"eyeColor\": \"green\",\n    \"name\": \"Coleman Noel\",\n    \"gender\": \"male\",\n    \"company\": \"ORBAXTER\",\n    \"email\": \"colemannoel@orbaxter.com\",\n    \"phone\": \"+1 (986) 527-3453\",\n    \"address\": \"300 Williams Place, Gorham, Louisiana, 3425\",\n    \"about\": \"Velit laboris non minim aute non officia. Id nisi enim eiusmod duis esse reprehenderit laboris culpa consequat commodo eu quis et. Nisi incididunt enim deserunt reprehenderit irure id. Aliquip fugiat ipsum incididunt nisi in voluptate nostrud. Ullamco tempor ex sit esse irure exercitation aliquip magna proident. Dolore dolore nisi ea sunt in qui Lorem fugiat aliquip voluptate. Dolore laborum est aliqua incididunt do nisi commodo minim minim laborum sint eiusmod incididunt.\\r\\n\",\n    \"registered\": \"2018-07-25T03:59:40-02:00\",\n    \"latitude\": -30.386673,\n    \"longitude\": -52.354031,\n    \"label\": [\n      {\n        \"background\": \"green\",\n        \"color\": \"white\",\n        \"name\": \"esse\"\n      },\n      {\n        \"background\": \"green\",\n        \"color\": \"white\",\n        \"name\": \"exercitation\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e853e825481828520f0\",\n    \"index\": 22,\n    \"guid\": \"58c5ae20-62c6-4bfb-b8a2-7f852d29c6e9\",\n    \"isActive\": true,\n    \"balance\": 2752.31,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 29,\n    \"enabled\": true,\n    \"eyeColor\": \"green\",\n    \"name\": \"Kristina Hart\",\n    \"gender\": \"female\",\n    \"company\": \"SPHERIX\",\n    \"email\": \"kristinahart@spherix.com\",\n    \"phone\": \"+1 (992) 467-2294\",\n    \"address\": \"584 Albany Avenue, Frystown, Alabama, 9934\",\n    \"about\": \"Laboris tempor pariatur incididunt voluptate deserunt dolore ipsum ipsum. Tempor duis id in commodo nostrud exercitation ex mollit excepteur. Culpa officia nulla deserunt incididunt duis sunt. Anim enim id eiusmod non elit velit laboris qui. In reprehenderit in aute laboris adipisicing esse amet amet cillum culpa. Proident dolor pariatur dolore dolor laborum qui. Ea non dolor aliqua ipsum amet eiusmod do veniam ullamco sint eiusmod.\\r\\n\",\n    \"registered\": \"2019-06-28T06:22:41-02:00\",\n    \"latitude\": 20.197164,\n    \"longitude\": -78.993713,\n    \"label\": []\n  },\n  {\n    \"_id\": \"60533e85b4d15810bb1671d7\",\n    \"index\": 23,\n    \"guid\": \"cab014cc-afcf-466a-b3fb-3cfce9104e13\",\n    \"isActive\": false,\n    \"balance\": 2199.22,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 23,\n    \"enabled\": true,\n    \"eyeColor\": \"green\",\n    \"name\": \"Bullock Nichols\",\n    \"gender\": \"male\",\n    \"company\": \"IDEGO\",\n    \"email\": \"bullocknichols@idego.com\",\n    \"phone\": \"+1 (973) 582-3340\",\n    \"address\": \"219 Sackett Street, Berwind, Federated States Of Micronesia, 343\",\n    \"about\": \"Et tempor officia cillum est aliqua. Elit ut proident laborum Lorem aute proident qui fugiat dolore eiusmod aliquip. Deserunt cupidatat pariatur eiusmod consequat elit irure nulla aliqua in.\\r\\n\",\n    \"registered\": \"2020-03-30T01:36:02-02:00\",\n    \"latitude\": 1.154849,\n    \"longitude\": -104.472625,\n    \"label\": [\n      {\n        \"background\": \"brown\",\n        \"color\": \"white\",\n        \"name\": \"dolor\"\n      },\n      {\n        \"background\": \"brown\",\n        \"color\": \"white\",\n        \"name\": \"sint\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e85b8f150abcab63014\",\n    \"index\": 24,\n    \"guid\": \"4f1b7473-bebb-4677-a99a-3876078366f7\",\n    \"isActive\": true,\n    \"balance\": 2987.78,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 21,\n    \"enabled\": true,\n    \"eyeColor\": \"blue\",\n    \"name\": \"Gretchen Terrell\",\n    \"gender\": \"female\",\n    \"company\": \"ASIMILINE\",\n    \"email\": \"gretchenterrell@asimiline.com\",\n    \"phone\": \"+1 (925) 519-3822\",\n    \"address\": \"592 Crooke Avenue, Veyo, Maryland, 380\",\n    \"about\": \"Ex do nostrud in Lorem elit amet adipisicing dolore culpa deserunt fugiat irure duis. Reprehenderit esse commodo minim incididunt consequat. Dolor sunt pariatur laborum incididunt pariatur excepteur voluptate ad velit occaecat dolore est id aute. Mollit culpa nisi qui duis ex aute commodo nisi Lorem velit qui deserunt. Velit mollit officia voluptate adipisicing pariatur nostrud ad. Est sunt deserunt ea minim consequat proident esse nisi sit sit cillum. Commodo cillum sint fugiat ad velit.\\r\\n\",\n    \"registered\": \"2018-09-01T02:49:18-02:00\",\n    \"latitude\": 57.194127,\n    \"longitude\": 87.52193,\n    \"label\": []\n  },\n  {\n    \"_id\": \"60533e85ebcda3ccee6dfdf8\",\n    \"index\": 25,\n    \"guid\": \"499536e8-5fdb-441c-8895-74c426adf663\",\n    \"isActive\": true,\n    \"balance\": 1632.27,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 30,\n    \"enabled\": true,\n    \"eyeColor\": \"brown\",\n    \"name\": \"Patrick Gonzales\",\n    \"gender\": \"male\",\n    \"company\": \"DANCITY\",\n    \"email\": \"patrickgonzales@dancity.com\",\n    \"phone\": \"+1 (897) 598-3111\",\n    \"address\": \"619 McKibbin Street, Fairfield, New Jersey, 7805\",\n    \"about\": \"Laboris esse excepteur excepteur dolore anim nisi elit qui non irure. Lorem est do incididunt ullamco ut excepteur eiusmod qui. Commodo adipisicing qui non dolore occaecat proident.\\r\\n\",\n    \"registered\": \"2015-11-25T06:17:01-01:00\",\n    \"latitude\": -46.441126,\n    \"longitude\": -130.715017,\n    \"label\": [\n      {\n        \"background\": \"yellow\",\n        \"color\": \"black\",\n        \"name\": \"voluptate\"\n      },\n      {\n        \"background\": \"green\",\n        \"color\": \"white\",\n        \"name\": \"consectetur\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e85631914004378fa86\",\n    \"index\": 26,\n    \"guid\": \"6746546f-26a9-42d1-a043-fe4428f26712\",\n    \"isActive\": true,\n    \"balance\": 2960.16,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 28,\n    \"enabled\": false,\n    \"eyeColor\": \"brown\",\n    \"name\": \"Bonnie Mueller\",\n    \"gender\": \"female\",\n    \"company\": \"POLARIUM\",\n    \"email\": \"bonniemueller@polarium.com\",\n    \"phone\": \"+1 (916) 428-3956\",\n    \"address\": \"669 Powers Street, Summerfield, Wisconsin, 4667\",\n    \"about\": \"Dolore duis culpa pariatur ullamco commodo eiusmod consequat consectetur ad ipsum. Adipisicing quis qui deserunt qui ullamco eu ad officia occaecat laboris. Et amet ut aliqua ex incididunt reprehenderit qui reprehenderit adipisicing ea excepteur adipisicing reprehenderit nulla. Ipsum Lorem anim elit do officia. Duis veniam sint eiusmod laboris occaecat et sint adipisicing occaecat fugiat est nisi. Veniam irure laboris velit aliquip dolore aute et. Qui nisi proident enim consectetur exercitation fugiat laborum anim culpa non aliqua aliquip officia.\\r\\n\",\n    \"registered\": \"2014-10-01T05:01:23-02:00\",\n    \"latitude\": -12.765026,\n    \"longitude\": -41.387426,\n    \"label\": [\n      {\n        \"background\": \"yellow\",\n        \"color\": \"black\",\n        \"name\": \"proident\"\n      },\n      {\n        \"background\": \"pink\",\n        \"color\": \"black\",\n        \"name\": \"velit\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e856202fe1f3ece19b6\",\n    \"index\": 27,\n    \"guid\": \"3b738c85-c6b8-4f5a-983b-69ffec7f587c\",\n    \"isActive\": true,\n    \"balance\": 1847.36,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 27,\n    \"enabled\": false,\n    \"eyeColor\": \"brown\",\n    \"name\": \"Bonita Wade\",\n    \"gender\": \"female\",\n    \"company\": \"ISONUS\",\n    \"email\": \"bonitawade@isonus.com\",\n    \"phone\": \"+1 (916) 496-2943\",\n    \"address\": \"188 Bancroft Place, Aberdeen, North Carolina, 9804\",\n    \"about\": \"Eu ullamco amet adipisicing officia officia aliqua laborum tempor laboris anim culpa. In occaecat do eiusmod est Lorem nisi anim magna proident. Ex sit Lorem labore esse. Aute magna elit officia nostrud pariatur.\\r\\n\",\n    \"registered\": \"2019-05-20T02:02:26-02:00\",\n    \"latitude\": 50.746853,\n    \"longitude\": 123.936282,\n    \"label\": [\n      {\n        \"background\": \"yellow\",\n        \"color\": \"black\",\n        \"name\": \"fugiat\"\n      },\n      {\n        \"background\": \"green\",\n        \"color\": \"white\",\n        \"name\": \"elit\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e85f46c99230ea11303\",\n    \"index\": 28,\n    \"guid\": \"bb6a09f0-025b-4721-a2ee-215b44082dc5\",\n    \"isActive\": true,\n    \"balance\": 1270.4,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 32,\n    \"enabled\": true,\n    \"eyeColor\": \"green\",\n    \"name\": \"Sharron Buchanan\",\n    \"gender\": \"female\",\n    \"company\": \"EVENTAGE\",\n    \"email\": \"sharronbuchanan@eventage.com\",\n    \"phone\": \"+1 (834) 600-3302\",\n    \"address\": \"206 Cherry Street, Harrodsburg, Washington, 7226\",\n    \"about\": \"Exercitation deserunt cillum tempor adipisicing aute id Lorem velit aliqua do aute aliquip. Occaecat tempor cillum commodo ipsum excepteur occaecat ex laborum mollit dolor quis labore enim est. Sunt exercitation est non incididunt consectetur sint id proident laborum voluptate adipisicing commodo. Anim amet dolor anim eu aliqua ea excepteur nostrud in sunt ut non id eiusmod. Sint enim consequat reprehenderit ut velit minim eiusmod. Veniam velit do nulla aliqua nulla consectetur cupidatat aliquip aute occaecat labore anim anim veniam. Labore occaecat quis esse dolor qui amet.\\r\\n\",\n    \"registered\": \"2018-08-31T06:23:09-02:00\",\n    \"latitude\": 68.68166,\n    \"longitude\": 69.848154,\n    \"label\": []\n  }\n]"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "selectAllExampleStore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/examples/lazy-loaded/store/example/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectFeature,\n  (state: ILazyLoadedStore): IExampleState => {\n    return state.example\n  }\n)"
            },
            {
                "name": "selectExampleValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/examples/lazy-loaded/store/example/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectFeature,\n  (state: ILazyLoadedStore): string => {\n    return state.example.value\n  }\n)"
            },
            {
                "name": "selectFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/examples/lazy-loaded/store/example/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ILazyLoadedStore>(lazyLoadedFeatureKey)"
            },
            {
                "name": "selectTableState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/store/selectors/table.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<fromTable.IbTableState>(\n  fromTable.ibTableFeatureKey\n)"
            },
            {
                "name": "services",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/tools/tools-test.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  { provide: TranslateService, useValue: translateServiceStub},\n  { provide: MatDialogRef, useValue: serviceDialogStub}\n]"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "startsWith",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.STARTS_WITH,\n  value,\n})"
            },
            {
                "name": "statusErrorMessages",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{ 404: 'Risorsa non trovata'}"
            },
            {
                "name": "STORAGE_NAME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/table/store/effects/table.effects.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'ib-table-store'"
            },
            {
                "name": "tableNameGen",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/kai-table/table.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "generateTableName()"
            },
            {
                "name": "useColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/kai-table/cells.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T>(columnName: string, propertyName?: string, sort?: boolean): IbColumnDef => ({\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => e[propertyName ?? columnName],\n  sort\n})"
            },
            {
                "name": "useContextCell",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/kai-table/cells.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T>(cell: (e: T) => IbContextAction[]): IbColumnDef => ({\n  component: IbContextActionCell,\n  columnDef: '_ctxActions',\n  header: '',\n  cell,\n})"
            },
            {
                "name": "useContextColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/kai-table/cells.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "useContextCell"
            },
            {
                "name": "useDateColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/kai-table/cells.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T>(\n  columnName: string,\n  propertyName?: string,\n  sort?: boolean,\n  format: string = 'dd/MM/yyyy HH:mm z',\n  locale: string = 'it'\n): IbColumnDef => ({\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => `${formatDate(e[propertyName ?? columnName], format, locale)}`,\n  sort\n})"
            },
            {
                "name": "useNumberColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/kai-table/cells.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T>(\n  columnName: string,\n  propertyName?: string,\n  sort?: boolean,\n  format: string = '1.2-2',\n  locale: string = 'it'\n): IbColumnDef => ({\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => `${formatNumber(e[propertyName ?? columnName], locale, format)}`,\n  sort\n})"
            },
            {
                "name": "useTranslateColumn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/inobeta-ui/ui/kai-table/cells.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<T>(\n  columnName: string,\n  propertyName?: string,\n  sort?: boolean,\n  params: any = {},\n): IbColumnDef => ({\n  component: IbTranslateCell,\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => ({ key: e[propertyName ?? columnName], params }),\n  sort\n})"
            }
        ],
        "functions": [
            {
                "name": "applyFilter",
                "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "filter",
                        "type": "IbFilterDef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterValue",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "filter",
                        "type": "IbFilterDef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterValue",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "compare",
                "file": "src/app/inobeta-ui/ui/table/table.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "a",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "b",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isAsc",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "a",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "b",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isAsc",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "counterReducer",
                "file": "src/app/examples/redux-example/counter.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": "ICounterState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "INITIAL_COUNTER_STATE"
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "ICounterState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "INITIAL_COUNTER_STATE",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createNewUser",
                "file": "src/app/examples/kai-table-example/users.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "IbUserExample",
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "dateRequiredValidator",
                "file": "src/app/inobeta-ui/ui/material-forms/controls/datepicker.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "ValidatorFn"
            },
            {
                "name": "evalOperation",
                "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "operation",
                        "type": "IbFilterOperator",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "filterValue",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "operation",
                        "type": "IbFilterOperator",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterValue",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "exampleReducer",
                "file": "src/app/examples/lazy-loaded/store/example/reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": "IExampleState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "INITIAL"
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "IExampleState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "INITIAL",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "forceValueValidator",
                "file": "src/app/examples/dynamic-forms-example/dynamic-forms-example.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "forcedValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorMessage",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ValidatorFn",
                "jsdoctags": [
                    {
                        "name": "forcedValue",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorMessage",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "formatFieldState",
                "file": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tableName",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "instance",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "newConfig",
                        "type": "IbTableConfigState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "IbTableState",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tableName",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "instance",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "newConfig",
                        "type": "IbTableConfigState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateTableName",
                "file": "src/app/inobeta-ui/ui/kai-table/table.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "getRandomDate",
                "file": "src/app/examples/kai-table-example/users.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "startDate",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "endDate",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "startDate",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "endDate",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "ibCrudToast",
                "file": "src/app/inobeta-ui/http/http/messages.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "enableBackCall",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    },
                    {
                        "name": "successMessage",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'shared.ibCrudToast.success'"
                    },
                    {
                        "name": "timeoutOnSave",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "500"
                    }
                ],
                "returnType": "MethodDecorator",
                "jsdoctags": [
                    {
                        "name": "enableBackCall",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "successMessage",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'shared.ibCrudToast.success'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timeoutOnSave",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "500",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "ibMatDatepickerTranslate",
                "file": "src/app/inobeta-ui/ui/material-forms/material-form.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "ibMatPaginatorTranslate",
                "file": "src/app/inobeta-ui/ui/table/table.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "ibSessionReducer",
                "file": "src/app/inobeta-ui/http/auth/redux/session.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": "ISessionState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "INITIAL_SESSION_STATE"
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "ISessionState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "INITIAL_SESSION_STATE",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "ibTableFeatureReducer",
                "file": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": "IbTableState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "ibTableFeatureInitialState"
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "IbTableState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "ibTableFeatureInitialState",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "ibTableFiltersReducer",
                "file": "src/app/inobeta-ui/ui/table/redux/table.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": "ITableFiltersState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "INITIAL_TABLE_FILTERS_STATE"
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "ITableFiltersState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "INITIAL_TABLE_FILTERS_STATE",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "loadState",
                "file": "src/app/inobeta-ui/hydration/reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "ibSessionStorageKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ibReduxPersistKeys",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "ibSessionStorageKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ibReduxPersistKeys",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "saveState",
                "file": "src/app/inobeta-ui/hydration/effects.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "ibSessionStorageKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ibReduxPersistKeys",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "state",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "ibSessionStorageKey",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ibReduxPersistKeys",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "state",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "StickyColumnData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "IStickyColumnData | IbTableTitles",
                "file": "src/app/inobeta-ui/ui/table/directives/sticky-area/sticky-area.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Button>",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Header>",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Page>",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            }
        ],
        "enumerations": [
            {
                "name": "IbAuthTypes",
                "childs": [
                    {
                        "name": "BASIC_AUTH",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "JWT",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/inobeta-ui/http/auth/session.model.ts"
            },
            {
                "name": "IbBreadcrumbMode",
                "childs": [
                    {
                        "name": "static",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "static"
                    },
                    {
                        "name": "auto",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "auto"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/inobeta-ui/ui/breadcrumb/breadcrumb.component.ts"
            },
            {
                "name": "IbDateFilterCriteriaCategory",
                "childs": [
                    {
                        "name": "WITHIN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "within"
                    },
                    {
                        "name": "MORE_THAN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "moreThan"
                    },
                    {
                        "name": "RANGE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "range"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/inobeta-ui/ui/kai-filter/filters/date/filter-date.component.ts"
            },
            {
                "name": "IbDateFilterPeriod",
                "childs": [
                    {
                        "name": "MINUTES",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "HOURS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "DAYS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "WEEKS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/inobeta-ui/ui/kai-filter/filters/date/filter-date.component.ts"
            },
            {
                "name": "IbFilterOperator",
                "childs": [
                    {
                        "name": "NONE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "EQUALS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "NOT_EQUALS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "LESS_THAN",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "LESS_THAN_EQUALS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "GREATHER_THAN",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "GREATHER_THAN_EQUALS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "CONTAINS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "NOT_CONTAINS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "STARTS_WITH",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ENDS_WITH",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "AND",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "OR",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/inobeta-ui/ui/kai-filter/filter.types.ts"
            },
            {
                "name": "IbKaiTableState",
                "childs": [
                    {
                        "name": "IDLE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "LOADING",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "NO_DATA",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "HTTP_ERROR",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/inobeta-ui/ui/kai-table/table.types.ts"
            },
            {
                "name": "IbMatActionsPosition",
                "childs": [
                    {
                        "name": "BOTH",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TOP",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BOTTOM",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Crea un form dinamico usando componenti di Angular Material.</p>\n",
                "file": "src/app/inobeta-ui/ui/material-forms/material-form/material-form.component.ts"
            },
            {
                "name": "IbStickyAreas",
                "childs": [
                    {
                        "name": "HEADER",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "FOOTER",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "SELECT",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "DELETE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "EDIT",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TEMPLATE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "SETTINGS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/inobeta-ui/ui/table/models/titles.model.ts"
            },
            {
                "name": "IbStorageTypes",
                "childs": [
                    {
                        "name": "LOCALSTORAGE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "COOKIESTORAGE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/inobeta-ui/storage/storage.service.ts"
            },
            {
                "name": "IbTableActionsPosition",
                "childs": [
                    {
                        "name": "BOTH",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TOP",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BOTTOM",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/inobeta-ui/ui/table/models/titles.model.ts"
            },
            {
                "name": "IbTableCellAligns",
                "childs": [
                    {
                        "name": "LEFT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "left"
                    },
                    {
                        "name": "CENTER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "center"
                    },
                    {
                        "name": "RIGHT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "right"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/inobeta-ui/ui/table/models/titles.model.ts"
            },
            {
                "name": "IbTableTitlesTypes",
                "childs": [
                    {
                        "name": "ANY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "any"
                    },
                    {
                        "name": "DATE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "date"
                    },
                    {
                        "name": "TAG",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "tag"
                    },
                    {
                        "name": "NUMBER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "number"
                    },
                    {
                        "name": "HOUR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "hour"
                    },
                    {
                        "name": "COMBOBOX",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "combobox"
                    },
                    {
                        "name": "BOOLEAN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "boolean"
                    },
                    {
                        "name": "STRING",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "string"
                    },
                    {
                        "name": "INPUT_NUMBER",
                        "deprecated": true,
                        "deprecationMessage": "do not use this enum type. It will be removed in a future release",
                        "value": "input-number"
                    },
                    {
                        "name": "CUSTOM",
                        "deprecated": true,
                        "deprecationMessage": "do not use this enum type. It will be removed in a future release",
                        "value": "custom"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/inobeta-ui/ui/table/models/titles.model.ts"
            }
        ],
        "groupedVariables": {
            "src/app/inobeta-ui/ui/table/redux/table.action.ts": [
                {
                    "name": "addFilterToTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/redux/table.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Ib Table Filters] Update filters', props<{tableName: string, filterName: string, filterValue: any}>())",
                    "rawdescription": "deprecated\nView store/reducer for new actions",
                    "description": "<p>deprecated\nView store/reducer for new actions</p>\n"
                },
                {
                    "name": "addPaginatorFiltersToTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/redux/table.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Ib Table Filters] Update paginator filters', props<{tableName: string, previousPageIndex: number, pageIndex: number, pageSize: number, lengthP: number}>())",
                    "rawdescription": "deprecated\nView store/reducer for new actions",
                    "description": "<p>deprecated\nView store/reducer for new actions</p>\n"
                },
                {
                    "name": "addSortToTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/redux/table.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Ib Table Filters] Update sort', props<{tableName: string, sortType: Sort, emitChange: boolean}>())",
                    "rawdescription": "deprecated\nView store/reducer for new actions",
                    "description": "<p>deprecated\nView store/reducer for new actions</p>\n"
                },
                {
                    "name": "resetFilters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/redux/table.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Ib Table Filters] Reset filters')",
                    "rawdescription": "deprecated\nView store/reducer for new actions",
                    "description": "<p>deprecated\nView store/reducer for new actions</p>\n"
                }
            ],
            "src/app/inobeta-ui/ui/kai-filter/filters.ts": [
                {
                    "name": "and",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.AND,\n  value,\n})"
                },
                {
                    "name": "contains",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.CONTAINS,\n  value,\n})"
                },
                {
                    "name": "endsWith",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.ENDS_WITH,\n  value,\n})"
                },
                {
                    "name": "eq",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.EQUALS,\n  value,\n})"
                },
                {
                    "name": "gt",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.GREATHER_THAN,\n  value,\n})"
                },
                {
                    "name": "gte",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.GREATHER_THAN_EQUALS,\n  value,\n})"
                },
                {
                    "name": "lt",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.LESS_THAN,\n  value,\n})"
                },
                {
                    "name": "lte",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.LESS_THAN_EQUALS,\n  value,\n})"
                },
                {
                    "name": "ncontains",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.NOT_CONTAINS,\n  value,\n})"
                },
                {
                    "name": "neq",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.NOT_EQUALS,\n  value,\n})"
                },
                {
                    "name": "none",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): IbFilterDef => ({\n  operator: IbFilterOperator.NONE,\n  value: null,\n})"
                },
                {
                    "name": "or",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.OR,\n  value,\n})"
                },
                {
                    "name": "startsWith",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(value): IbFilterDef => ({\n  operator: IbFilterOperator.STARTS_WITH,\n  value,\n})"
                }
            ],
            "src/app/inobeta-ui/ui/table/store/effects/table.effects.ts": [
                {
                    "name": "ANON_USER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/store/effects/table.effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'ib-anon'"
                },
                {
                    "name": "STORAGE_NAME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/store/effects/table.effects.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'ib-table-store'"
                }
            ],
            "src/app/inobeta-ui/http/auth/redux/session.actions.ts": [
                {
                    "name": "changeNameSurname",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/http/auth/redux/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[IbSession Service] Change Name And Surname', props<{ name: string, surname: string}>())"
                },
                {
                    "name": "login",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/http/auth/redux/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[IbSession Service] Login', props<{ activeSession: IbSession}>())"
                },
                {
                    "name": "logout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/http/auth/redux/session.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[IbSession Service] Logout')"
                }
            ],
            "src/app/inobeta-ui/http/http.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/http/http.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  IbSpinnerLoadingComponent,\n  IbLoginComponent\n]"
                }
            ],
            "src/app/inobeta-ui/tools/tools-test.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/tools/tools-test.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  IbMockTranslatePipeDirective\n]"
                },
                {
                    "name": "services",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/tools/tools-test.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  { provide: TranslateService, useValue: translateServiceStub},\n  { provide: MatDialogRef, useValue: serviceDialogStub}\n]"
                }
            ],
            "src/app/inobeta-ui/ui/material-forms/material-form-test.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/material-forms/material-form-test.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  IbMaterialFormStubComponent\n]"
                }
            ],
            "src/app/inobeta-ui/ui/material-forms/material-form.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/material-forms/material-form.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  IbMatTextboxComponent,\n  IbMatDropdownComponent,\n  IbMatRadioComponent,\n  IbMatCheckboxComponent,\n  IbMatDatepickerComponent,\n  IbMatAutocompleteComponent,\n  IbMatLabelComponent,\n  IbMatTextareaComponent,\n  IbMatButtonComponent,\n  IbMatPaddingComponent,\n  IbMatSlideToggleComponent,\n  IbMaterialFormComponent,\n  IbMaterialFormControlComponent,\n  IbFormControlDirective\n]"
                }
            ],
            "src/app/inobeta-ui/ui/uploader/uploader.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/uploader/uploader.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  IbUploaderComponent\n]"
                }
            ],
            "src/app/inobeta-ui/ui/table/table-test.module.ts": [
                {
                    "name": "COMPONENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/table-test.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  IbTableStubComponent\n]"
                }
            ],
            "src/app/examples/redux-example/counter.action.ts": [
                {
                    "name": "CounterActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/examples/redux-example/counter.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  increment: createAction('[Counter Component] Increment'),\n  decrement: createAction('[Counter Component] Decrement'),\n  reset: createAction('[Counter Component] Reset'),\n  addingNumber: createAction('[Counter Component] Adding number', props<{ numberToAdd: number}>())\n}"
                }
            ],
            "src/app/inobeta-ui/ui/kai-table/table.component.ts": [
                {
                    "name": "defaultTableDef",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/kai-table/table.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTableDef",
                    "defaultValue": "{\n  paginator: {\n    pageSizeOptions: [5, 10, 25, 100],\n    showFirstLastButtons: true,\n    pageSize: 10,\n  },\n}"
                },
                {
                    "name": "IB_CELL_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/kai-table/table.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<IbCellData>(\"IbCellData\")"
                },
                {
                    "name": "tableNameGen",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/kai-table/table.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "generateTableName()"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/examples/lazy-loaded/store/example/actions.ts": [
                {
                    "name": "exampleActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/examples/lazy-loaded/store/example/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    exampleAction: createAction(\n    '[LazyLoaded/Example] exampleAction'\n  )\n}"
                }
            ],
            "src/app/examples/kai-table-example/users.ts": [
                {
                    "name": "FRUITS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/examples/kai-table-example/users.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "defaultValue": "[\n  'blueberry',\n  'lychee',\n  'kiwi',\n  'mango',\n  'peach',\n  'lime',\n  'pomegranate',\n  'pineapple',\n  'banana',\n  'apple',\n  'pear',\n  'orange',\n]"
                },
                {
                    "name": "maxDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/examples/kai-table-example/users.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Date().setMonth(new Date().getMonth() + 2)"
                },
                {
                    "name": "minDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/examples/kai-table-example/users.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Date().setMonth(new Date().getMonth() - 2)"
                },
                {
                    "name": "NAMES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/examples/kai-table-example/users.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "defaultValue": "[\n  'Maia',\n  'Asher',\n  'Olivia',\n  'Atticus',\n  'Amelia',\n  'Jack',\n  'Charlotte',\n  'Theodore',\n  'Isla',\n  'Oliver',\n  'Isabella',\n  'Jasper',\n  'Cora',\n  'Levi',\n  'Violet',\n  'Arthur',\n  'Mia',\n  'Thomas',\n  'Elizabeth',\n  'Alice'\n]"
                }
            ],
            "src/app/inobeta-ui/hydration/reducer.ts": [
                {
                    "name": "getIbHydrationMetaReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/hydration/reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(ibSessionStorageKey: string, ibReduxPersistKeys: string[]) => {\n  return (\n    reducer: ActionReducer<any>\n  ): ActionReducer<any> => {\n    return (state, action) => {\n\n      switch(action.type){\n        case HydrationActions.ibHydrate.type:\n        case UPDATE:\n          return {\n            ...state,\n            ...loadState(ibSessionStorageKey, ibReduxPersistKeys)\n          };\n        default:\n          return reducer(state, action);\n      }\n    };\n  };\n}"
                }
            ],
            "src/app/inobeta-ui/hydration/index.ts": [
                {
                    "name": "getIbMetaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/hydration/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(ibSessionStorageKey: string, ibReduxPersistKeys: string[]): MetaReducer<any, any>[] => {\n   return [\n    getIbHydrationMetaReducer(ibSessionStorageKey, ibReduxPersistKeys)\n  ]\n}"
                },
                {
                    "name": "ibSetupHydration",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/hydration/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(ibSessionStorageKey: string, ibReduxPersistKeys: string[]) => {\n  HydrationEffects.ibSessionStorageKey = ibSessionStorageKey;\n  HydrationEffects.ibReduxPersistKeys = ibReduxPersistKeys;\n  return {\n    effects: [\n      HydrationEffects\n    ],\n    metareducers: getIbMetaReducers(ibSessionStorageKey, ibReduxPersistKeys)\n  }\n}"
                }
            ],
            "src/app/inobeta-ui/ui/table/services/table-conf.service.ts": [
                {
                    "name": "IB_TABLE_ANON_USER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/services/table-conf.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'ib-anon'"
                },
                {
                    "name": "IB_TABLE_STORAGE_NAME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/services/table-conf.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'ib-table-store'"
                }
            ],
            "src/app/inobeta-ui/hydration/actions.ts": [
                {
                    "name": "ibHydrate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/hydration/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\"[IbHydration] Hydrate\")"
                }
            ],
            "src/app/inobeta-ui/ui/table/store/actions/table.actions.ts": [
                {
                    "name": "ibTableActionAddFilterField",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/store/actions/table.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[IbTable] IbTableAction Add Filter Field',\n  props<{state: IbTableFilterState, tableName: string}>()\n)"
                },
                {
                    "name": "ibTableActionLoadConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/store/actions/table.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[IbTable] IbTableAction LoadConfig',\n  props<{ configName: string, tableName: string }>()\n)"
                },
                {
                    "name": "ibTableActionSaveConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/store/actions/table.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[IbTable] IbTableAction SaveConfig',\n  props<{ options: any, tableName: string }>()\n)"
                },
                {
                    "name": "ibTableActionSelectSortingField",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/store/actions/table.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[IbTable] IbTableAction Select Sorting Field',\n  props<{options: IbTableSortState, tableName: string}>()\n)"
                },
                {
                    "name": "ibTableActionSetConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/store/actions/table.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[IbTable] IbTableAction SetConfig',\n  props<{ config: {config: IbTableConfigState, name: string}, tableName: string }>()\n)"
                },
                {
                    "name": "ibTableActionSetPaginator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/store/actions/table.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[IbTable] IbTableAction Set Paginator',\n  props<{state: IbTablePaginatorState, tableName: string}>()\n)"
                },
                {
                    "name": "ibTableActionSetTotalRowCell",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/store/actions/table.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[IbTable] IbTableAction TotalRow Set Cell',\n  props<{state: IbTableTotalRowState, tableName: string}>()\n)"
                }
            ],
            "src/app/inobeta-ui/ui/table/store/selectors/table.selectors.ts": [
                {
                    "name": "ibTableCurrentConfSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/store/selectors/table.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectTableState,\n  (state: fromTable.IbTableState) => state?.selectedConfig\n)"
                },
                {
                    "name": "ibTableSelectFilters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/store/selectors/table.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(tableName) => createSelector(\n  selectTableState,\n  (state: fromTable.IbTableState) => state?.instances?.find(i => i.tableName === tableName)?.config?.filters\n)"
                },
                {
                    "name": "ibTableSelectPaginator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/store/selectors/table.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(tableName) => createSelector(\n  selectTableState,\n  (state: fromTable.IbTableState) => state?.instances?.find(i => i.tableName === tableName)?.config?.paginator\n)"
                },
                {
                    "name": "ibTableSelectSort",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/store/selectors/table.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(tableName) => createSelector(\n  selectTableState,\n  (state: fromTable.IbTableState) => state?.instances?.find(i => i.tableName === tableName)?.config?.sort\n)"
                },
                {
                    "name": "ibTableSelectTotalRow",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/store/selectors/table.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(tableName) => createSelector(\n  selectTableState,\n  (state: fromTable.IbTableState) => state?.instances?.find(i => i.tableName === tableName)?.config?.totals\n)"
                },
                {
                    "name": "selectTableState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/store/selectors/table.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromTable.IbTableState>(\n  fromTable.ibTableFeatureKey\n)"
                }
            ],
            "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts": [
                {
                    "name": "ibTableFeatureInitialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IbTableState",
                    "defaultValue": "{\n  instances: []\n}"
                },
                {
                    "name": "ibTableFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'ibTable'"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  ibTableFeatureInitialState,\n\n  on(TableActions.ibTableActionSetTotalRowCell,\n    (state, newTotalRowState) => {\n      if (!newTotalRowState.tableName) {\n        return { ...state };\n      }\n      const instance = state.instances?.find(i => i.tableName === newTotalRowState.tableName);\n      if (!instance) {\n        return formatFieldState(state, newTotalRowState.tableName, null, { totals: [newTotalRowState.state] });\n      }\n      state.instances.splice(state.instances.indexOf(instance), 1);\n      const rowExists = instance.config?.totals.find(t => t.columnName === newTotalRowState.state.columnName);\n      if (!rowExists) {\n        return formatFieldState(state,\n          newTotalRowState.tableName,\n          instance,\n          { totals: [...(instance.config?.totals || []), newTotalRowState.state] });\n      }\n      return formatFieldState(state, newTotalRowState.tableName, instance,\n        {\n          totals: instance.config.totals.map(\n            t => t.columnName === newTotalRowState.state.columnName\n              ? ({ columnName: newTotalRowState.state.columnName, func: newTotalRowState.state.func })\n              : t\n          )\n        });\n    }\n  ),\n\n  on(TableActions.ibTableActionSetConfig, (state, newConfigData) => {\n    if (!newConfigData.config) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === newConfigData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return {\n      ...state,\n      instances: [\n        ...(state.instances || []),\n        {\n          tableName: newConfigData.tableName,\n          config: newConfigData.config.config\n        }\n      ],\n      selectedConfig: `${newConfigData.tableName}/${newConfigData.config.name}`\n    };\n  }),\n\n  on(TableActions.ibTableActionSaveConfig, (state, saveConfigData) => {\n    return { ...state, selectedConfig: `${saveConfigData.tableName}/${saveConfigData.options.data.name}` };\n  }),\n\n  on(TableActions.ibTableActionSelectSortingField, (state, sortData) => {\n    if (!sortData.tableName) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === sortData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return formatFieldState(state, sortData.tableName, instance, { sort: sortData.options });\n  }),\n\n  on(TableActions.ibTableActionAddFilterField,\n    (state, addFilterState) => {\n      if (!addFilterState.tableName) {\n        return { ...state };\n      }\n      const instance = state.instances?.find(i => i.tableName === addFilterState.tableName);\n      if (!instance) {\n        return formatFieldState(state, addFilterState.tableName, null, { filters: [addFilterState.state] });\n      }\n      state.instances.splice(state.instances.indexOf(instance), 1);\n      const rowExists = instance.config?.filters.find(t => t.columnName === addFilterState.state.columnName);\n      if (!rowExists) {\n        return formatFieldState(state,\n          addFilterState.tableName,\n          instance,\n          { filters: [...(instance.config?.filters || []), addFilterState.state] });\n      }\n      return formatFieldState(state, addFilterState.tableName, instance, {\n        filters: instance.config.filters.map(\n          t => t.columnName === addFilterState.state.columnName\n            ? ({ columnName: addFilterState.state.columnName, value: addFilterState.state.value })\n            : t\n        )\n      });\n    }\n  ),\n\n  on(TableActions.ibTableActionSetPaginator, (state, paginatorData) => {\n    if (!paginatorData.tableName) {\n      return { ...state };\n    }\n    const instance = state.instances?.find(i => i.tableName === paginatorData.tableName);\n    if (instance) {\n      state.instances.splice(state.instances.indexOf(instance), 1);\n    }\n    return formatFieldState(state, paginatorData.tableName, instance, { paginator: paginatorData.state });\n  }),\n)"
                }
            ],
            "src/app/inobeta-ui/ui/table/models/titles.model.ts": [
                {
                    "name": "ibTableSupportedFilters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/models/titles.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  IbTableTitlesTypes.ANY,\n  IbTableTitlesTypes.DATE,\n  IbTableTitlesTypes.STRING,\n  IbTableTitlesTypes.BOOLEAN,\n  IbTableTitlesTypes.NUMBER,\n  IbTableTitlesTypes.INPUT_NUMBER\n]"
                }
            ],
            "src/app/examples/lazy-loaded/store/example/reducers.ts": [
                {
                    "name": "INITIAL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/examples/lazy-loaded/store/example/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IExampleState",
                    "defaultValue": "{\n  value: ''\n}"
                },
                {
                    "name": "main",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/examples/lazy-loaded/store/example/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(INITIAL,\n  on(exampleActions.exampleAction, (state, action) => {\n    return {\n      ...state,\n      value: 'exampleValue'\n    }\n  }),\n)"
                }
            ],
            "src/app/examples/redux-example/counter.reducer.ts": [
                {
                    "name": "INITIAL_COUNTER_STATE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/examples/redux-example/counter.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICounterState",
                    "defaultValue": "{\n  number: 0\n}"
                },
                {
                    "name": "mainCounterReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/examples/redux-example/counter.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(INITIAL_COUNTER_STATE,\n  on(CounterActions.increment, state => ({ ...state, number: state.number + 1 })),\n  on(CounterActions.decrement, state => ({ ...state, number: state.number - 1 })),\n  on(CounterActions.reset, state => ({ ...state, number: 0 })),\n  on(CounterActions.addingNumber, (state, { numberToAdd }) => ({ number: state.number + numberToAdd}))\n)"
                }
            ],
            "src/app/inobeta-ui/http/auth/redux/session.reducer.ts": [
                {
                    "name": "INITIAL_SESSION_STATE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/http/auth/redux/session.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISessionState",
                    "defaultValue": "{\n  activeSession: null\n}"
                },
                {
                    "name": "mainSessionReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/http/auth/redux/session.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(INITIAL_SESSION_STATE,\n  on(SessionActions.login, (state, { activeSession }) => ({ activeSession})),\n  on(SessionActions.logout, state => ({ ...state, activeSession: null })),\n  on(SessionActions.changeNameSurname, (state, {name, surname}) => ({ ...state, activeSession: {\n      ...state.activeSession,\n      userData: {\n        ...state.activeSession.userData,\n        name,\n        surname\n      }\n    } }))\n)"
                }
            ],
            "src/app/inobeta-ui/ui/table/redux/table.reducer.ts": [
                {
                    "name": "INITIAL_TABLE_FILTERS_STATE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/redux/table.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITableFiltersState",
                    "defaultValue": "{\n  tableFilters: {}\n}"
                },
                {
                    "name": "mainTableFiltersReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/table/redux/table.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(INITIAL_TABLE_FILTERS_STATE,\n  on(TableFiltersActions.resetFilters, state => ({...state, tableFilters: {}})),\n  on(TableFiltersActions.addFilterToTable, (state, {tableName, filterName, filterValue}) => {\n    let obj;\n    if (state.tableFilters[tableName]) {\n      if (state.tableFilters[tableName][filterName]) {\n        state.tableFilters[tableName][filterName].value = filterValue;\n      } else {\n        obj = {\n          value: filterValue\n        };\n        state.tableFilters[tableName][filterName] = obj;\n      }\n    } else {\n      obj = {};\n      obj[filterName] = {value: filterValue};\n      state.tableFilters[tableName] = obj;\n    }\n    return {\n      ...state\n    };\n  }),\non(TableFiltersActions.addSortToTable, (state, {tableName, sortType/*, emitChange*/}) => {\n    if (state.tableFilters[tableName]) {\n      state.tableFilters[tableName].sortType = sortType;\n    } else {\n      state.tableFilters[tableName] = {\n        sortType\n      };\n    }\n    return {\n      ...state\n    };\n  }),\n  on(TableFiltersActions.addPaginatorFiltersToTable, (state, {tableName, previousPageIndex, pageIndex, pageSize, lengthP}) => {\n    const obj = {\n      paginatorFilters: {\n        previousPageIndex,\n        pageIndex,\n        pageSize,\n        lengthP\n      }\n    };\n\n    if (state.tableFilters[tableName]) {\n      state.tableFilters[tableName].paginatorFilters = obj.paginatorFilters;\n    } else {\n      state.tableFilters[tableName] = obj;\n    }\n    return {\n      ...state\n    };\n  })\n)"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Button>",
                    "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
                }
            ],
            "src/app/examples/lazy-loaded/store/index.ts": [
                {
                    "name": "lazyLoadedEffects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/examples/lazy-loaded/store/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    ExampleEffects,\n]"
                },
                {
                    "name": "lazyLoadedFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/examples/lazy-loaded/store/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'lazyLoaded'"
                },
                {
                    "name": "lazyLoadedReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/examples/lazy-loaded/store/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<ILazyLoadedStore>",
                    "defaultValue": "{\n    example: exampleReducer,\n}"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Header>",
                    "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = await canvas.getByRole('button', {\n      name: /Log in/i,\n    });\n    await userEvent.click(loginButton);\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Page>",
                    "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
                }
            ],
            "src/app/inobeta-ui/http/auth/session.service.ts": [
                {
                    "name": "loginUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/http/auth/session.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/api/auth/login'"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<IAppState>",
                    "defaultValue": "{\n  countState: counterReducer\n}"
                },
                {
                    "name": "reduxStorageSave",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ibSetupHydration('__redux-store-inobeta-ui__', ['sessionState', 'ibTable', 'lazyLoaded'])"
                },
                {
                    "name": "statusErrorMessages",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{ 404: 'Risorsa non trovata'}"
                }
            ],
            "src/app/examples/table-example/json-data.ts": [
                {
                    "name": "sampleData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/examples/table-example/json-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    \"_id\": \"60533e84da35d4796dea19d0\",\n    \"index\": 0,\n    \"guid\": \"7d5f85ba-35fc-420d-89fa-9a65d5385c93\",\n    \"isActive\": true,\n    \"balance\": 3747.58,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 37,\n    \"enabled\": true,\n    \"eyeColor\": \"green\",\n    \"name\": \"Angela Saunders\",\n    \"gender\": \"female\",\n    \"company\": \"shared.ibTable.noData\",\n    \"email\": \"angelasaunders@quizmo.com\",\n    \"phone\": \"+1 (800) 421-3866\",\n    \"address\": \"808 Robert Street, Santel, Delaware, 1485\",\n    \"about\": \"Excepteur in velit irure in do. Ad consectetur esse reprehenderit nulla culpa anim laboris exercitation tempor velit duis aliquip. Exercitation quis reprehenderit do occaecat commodo voluptate mollit irure tempor minim mollit. Duis tempor aute qui laboris tempor pariatur reprehenderit magna laboris excepteur eiusmod consectetur. Anim eiusmod nostrud cillum incididunt laboris commodo id voluptate voluptate voluptate. Aute aliquip culpa deserunt id ad excepteur.\\r\\n\",\n    \"registered\": \"2014-12-31T01:07:28-01:00\",\n    \"latitude\": -30.245791,\n    \"longitude\": -164.541315,\n    \"label\": [\n      {\n        \"background\": \"yellow\",\n        \"color\": \"black\",\n        \"name\": \"nisi\"\n      },\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"laboris\"\n      },\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"esse\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e842bec379c7ed2064e\",\n    \"index\": 1,\n    \"guid\": \"076bbd7e-66f9-4b8b-99be-62b72f57e301\",\n    \"isActive\": false,\n    \"balance\": 1475.48,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 21,\n    \"enabled\": true,\n    \"eyeColor\": \"brown\",\n    \"name\": \"Vivian Oneill\",\n    \"gender\": \"female\",\n    \"company\": \"BRAINCLIP\",\n    \"email\": \"vivianoneill@brainclip.com\",\n    \"phone\": \"+1 (807) 562-3886\",\n    \"address\": \"766 Ocean Avenue, Sedley, Arkansas, 3020\",\n    \"about\": \"Do velit irure duis aliqua adipisicing duis aute proident enim. Do non ullamco adipisicing minim irure Lorem minim magna pariatur laborum. Amet velit in reprehenderit excepteur id laborum officia ad commodo aute ad. Sint aute est consequat consequat sint. Consequat enim tempor pariatur nulla tempor cillum mollit. Dolore nulla ullamco pariatur labore.\\r\\n\",\n    \"registered\": \"2018-10-22T01:20:38-02:00\",\n    \"latitude\": 81.95058,\n    \"longitude\": -1.873851,\n    \"label\": [\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"labore\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e84980b10dd15097183\",\n    \"index\": 2,\n    \"guid\": \"1f4d6a6e-b29e-4423-a480-42cf16b14a68\",\n    \"isActive\": false,\n    \"balance\": 2083.52,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 21,\n    \"enabled\": false,\n    \"eyeColor\": \"green\",\n    \"name\": \"Hensley Craig\",\n    \"gender\": \"male\",\n    \"company\": \"SONGBIRD\",\n    \"email\": \"hensleycraig@songbird.com\",\n    \"phone\": \"+1 (977) 462-2881\",\n    \"address\": \"468 Clarendon Road, Celeryville, South Carolina, 9175\",\n    \"about\": \"Id consequat elit proident eu ullamco quis anim non ea culpa excepteur pariatur. Cillum excepteur irure enim et id elit culpa velit veniam deserunt velit. Dolor ex consectetur sunt officia in culpa cupidatat ut.\\r\\n\",\n    \"registered\": \"2017-11-21T11:13:07-01:00\",\n    \"latitude\": 33.477698,\n    \"longitude\": 154.78551,\n    \"label\": [\n      {\n        \"background\": \"brown\",\n        \"color\": \"white\",\n        \"name\": \"consectetur\"\n      },\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"ea\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e84d6f70e3895d8e41d\",\n    \"index\": 3,\n    \"guid\": \"2907791b-b9e8-41da-83e3-213239f4a8b6\",\n    \"isActive\": false,\n    \"balance\": 2291.15,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 21,\n    \"enabled\": true,\n    \"eyeColor\": \"blue\",\n    \"name\": \"Blevins Patterson\",\n    \"gender\": \"male\",\n    \"company\": \"ZUVY\",\n    \"email\": \"blevinspatterson@zuvy.com\",\n    \"phone\": \"+1 (960) 451-2752\",\n    \"address\": \"938 Meeker Avenue, Nescatunga, Nebraska, 1792\",\n    \"about\": \"Ut id laboris ex qui. Est nisi aliquip deserunt in nostrud. Sit sint excepteur eiusmod eiusmod dolor quis magna eiusmod duis ullamco veniam minim. Commodo sit voluptate laborum exercitation aliquip do sunt anim commodo excepteur proident exercitation. Proident consequat nulla commodo enim esse qui ullamco anim in eiusmod dolore veniam.\\r\\n\",\n    \"registered\": \"2017-12-18T06:25:00-01:00\",\n    \"latitude\": -51.976657,\n    \"longitude\": -123.533984,\n    \"label\": [\n      {\n        \"background\": \"brown\",\n        \"color\": \"white\",\n        \"name\": \"eiusmod\"\n      },\n      {\n        \"background\": \"green\",\n        \"color\": \"white\",\n        \"name\": \"incididunt\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e847973b681ac2b24ad\",\n    \"index\": 4,\n    \"guid\": \"148d2ab0-7e69-4afa-b9e4-5383d360dae7\",\n    \"isActive\": false,\n    \"balance\": 2563.57,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 31,\n    \"enabled\": true,\n    \"eyeColor\": \"green\",\n    \"name\": \"Hooper Patrick\",\n    \"gender\": \"male\",\n    \"company\": \"CONJURICA\",\n    \"email\": \"hooperpatrick@conjurica.com\",\n    \"phone\": \"+1 (967) 506-2055\",\n    \"address\": \"970 Dewey Place, Turah, Kansas, 1030\",\n    \"about\": \"Ut est nisi laboris minim amet ex tempor adipisicing et exercitation pariatur laborum irure aliqua. Reprehenderit do nisi nulla ut Lorem. Proident anim cillum ea excepteur ullamco ut sint cupidatat voluptate labore. Fugiat magna sunt minim est duis.\\r\\n\",\n    \"registered\": \"2014-06-30T10:11:58-02:00\",\n    \"latitude\": 33.368782,\n    \"longitude\": 174.604308,\n    \"label\": [\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"consequat\"\n      },\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"sunt\"\n      },\n      {\n        \"background\": \"yellow\",\n        \"color\": \"black\",\n        \"name\": \"sint\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e847e34ba14c2707ab2\",\n    \"index\": 5,\n    \"guid\": \"96f31a6e-9488-496a-b5f8-97aaabfcfde5\",\n    \"isActive\": false,\n    \"balance\": 2553.09,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 33,\n    \"enabled\": false,\n    \"eyeColor\": \"brown\",\n    \"name\": \"Noreen Gill\",\n    \"gender\": \"female\",\n    \"company\": \"PHUEL\",\n    \"email\": \"noreengill@phuel.com\",\n    \"phone\": \"+1 (944) 592-3439\",\n    \"address\": \"221 Mermaid Avenue, Edenburg, Massachusetts, 6184\",\n    \"about\": \"Nulla do tempor pariatur minim officia veniam amet irure magna enim officia est. Ut nostrud elit velit ex cupidatat reprehenderit elit nisi nostrud duis. Aliquip commodo velit ea pariatur ipsum elit. Deserunt mollit ea tempor ut aliqua. Aliqua ex anim ut qui id qui tempor consectetur. Incididunt exercitation minim tempor adipisicing consectetur esse.\\r\\n\",\n    \"registered\": \"2016-08-03T07:04:44-02:00\",\n    \"latitude\": -80.206419,\n    \"longitude\": -100.68247,\n    \"label\": []\n  },\n  {\n    \"_id\": \"60533e84fbea003f468ef2a7\",\n    \"index\": 6,\n    \"guid\": \"fd7373eb-39c5-4954-9398-8af438ca7909\",\n    \"isActive\": false,\n    \"balance\": 2489.26,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 23,\n    \"enabled\": true,\n    \"eyeColor\": \"green\",\n    \"name\": \"Harriet Moreno\",\n    \"gender\": \"female\",\n    \"company\": \"STEELTAB\",\n    \"email\": \"harrietmoreno@steeltab.com\",\n    \"phone\": \"+1 (828) 527-2642\",\n    \"address\": \"372 Bogart Street, Lund, Minnesota, 6202\",\n    \"about\": \"Tempor tempor ipsum tempor veniam reprehenderit eu aliqua ea nostrud nisi adipisicing veniam ipsum. Consectetur elit irure velit anim voluptate nisi incididunt. Aute tempor occaecat esse anim occaecat consequat adipisicing exercitation eu ullamco sit et. Eiusmod et ad eu pariatur mollit sint veniam.\\r\\n\",\n    \"registered\": \"2014-12-29T02:31:14-01:00\",\n    \"latitude\": 71.733197,\n    \"longitude\": 109.245302,\n    \"label\": [\n      {\n        \"background\": \"yellow\",\n        \"color\": \"black\",\n        \"name\": \"ullamco\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e84d2e1759d281d5616\",\n    \"index\": 7,\n    \"guid\": \"2e447a73-1618-4512-91c0-63bde813bd39\",\n    \"isActive\": false,\n    \"balance\": 2220.35,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 27,\n    \"enabled\": true,\n    \"eyeColor\": \"blue\",\n    \"name\": \"Mejia Williams\",\n    \"gender\": \"male\",\n    \"company\": \"SLOFAST\",\n    \"email\": \"mejiawilliams@slofast.com\",\n    \"phone\": \"+1 (945) 451-2217\",\n    \"address\": \"624 Nixon Court, Ballico, Rhode Island, 9268\",\n    \"about\": \"Proident sint labore deserunt sit. Et ipsum reprehenderit ipsum est commodo id. Laboris sunt ut tempor qui id ad labore excepteur cillum cupidatat nostrud pariatur voluptate dolore. Laborum ipsum ullamco culpa velit minim excepteur adipisicing do laborum consequat aliqua nisi. Cillum amet dolore laborum do aliquip culpa.\\r\\n\",\n    \"registered\": \"2020-02-16T08:20:18-01:00\",\n    \"latitude\": -15.087671,\n    \"longitude\": -27.51475,\n    \"label\": [\n      {\n        \"background\": \"green\",\n        \"color\": \"white\",\n        \"name\": \"officia\"\n      },\n      {\n        \"background\": \"pink\",\n        \"color\": \"black\",\n        \"name\": \"deserunt\"\n      },\n      {\n        \"background\": \"pink\",\n        \"color\": \"black\",\n        \"name\": \"officia\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e84d428d42236a57b38\",\n    \"index\": 8,\n    \"guid\": \"841b952e-8c47-40d8-8f53-4e137222f7ac\",\n    \"isActive\": false,\n    \"balance\": 1686.64,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 38,\n    \"enabled\": true,\n    \"eyeColor\": \"brown\",\n    \"name\": \"Robyn Reilly\",\n    \"gender\": \"female\",\n    \"company\": \"JUMPSTACK\",\n    \"email\": \"robynreilly@jumpstack.com\",\n    \"phone\": \"+1 (886) 486-3992\",\n    \"address\": \"546 Court Square, Forestburg, Alaska, 7945\",\n    \"about\": \"Excepteur enim eiusmod ea cupidatat magna. Culpa ad laboris excepteur aute tempor tempor et. Culpa culpa deserunt ipsum nisi nostrud ex cillum ut voluptate culpa fugiat ipsum. Qui enim dolor minim consequat veniam.\\r\\n\",\n    \"registered\": \"2018-08-11T05:36:39-02:00\",\n    \"latitude\": -33.055566,\n    \"longitude\": 172.968323,\n    \"label\": [\n      {\n        \"background\": \"pink\",\n        \"color\": \"black\",\n        \"name\": \"commodo\"\n      },\n      {\n        \"background\": \"green\",\n        \"color\": \"white\",\n        \"name\": \"aliqua\"\n      },\n      {\n        \"background\": \"green\",\n        \"color\": \"white\",\n        \"name\": \"labore\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e842b9cd2767e4cdf0c\",\n    \"index\": 9,\n    \"guid\": \"9202d366-1d00-4f8c-9ed4-8f02fc40ab62\",\n    \"isActive\": false,\n    \"balance\": 1409.56,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 30,\n    \"enabled\": false,\n    \"eyeColor\": \"blue\",\n    \"name\": \"Atkins Mcintosh\",\n    \"gender\": \"male\",\n    \"company\": \"KOG\",\n    \"email\": \"atkinsmcintosh@kog.com\",\n    \"phone\": \"+1 (999) 504-3282\",\n    \"address\": \"389 Fayette Street, Caln, Maine, 6054\",\n    \"about\": \"Do aliquip adipisicing duis duis proident est nisi. Eiusmod quis nulla mollit deserunt ad officia eiusmod cupidatat. Duis ex id fugiat ea eu sint laboris aute labore irure adipisicing. Eiusmod do sint esse magna et qui voluptate officia incididunt laboris adipisicing nostrud proident amet. Voluptate duis consectetur velit commodo sint esse sunt amet sint voluptate esse laborum. Ex incididunt qui nisi elit culpa tempor do irure mollit commodo aliquip amet.\\r\\n\",\n    \"registered\": \"2019-01-08T10:26:34-01:00\",\n    \"latitude\": 31.634017,\n    \"longitude\": -66.176564,\n    \"label\": [\n      {\n        \"background\": \"yellow\",\n        \"color\": \"black\",\n        \"name\": \"in\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e844689590dd5bfe7cb\",\n    \"index\": 10,\n    \"guid\": \"483db46c-99f7-4df0-8de0-92edc2293f54\",\n    \"isActive\": false,\n    \"balance\": 2760.7,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 23,\n    \"enabled\": true,\n    \"eyeColor\": \"green\",\n    \"name\": \"Alma Sandoval\",\n    \"gender\": \"female\",\n    \"company\": \"TELPOD\",\n    \"email\": \"almasandoval@telpod.com\",\n    \"phone\": \"+1 (877) 510-2425\",\n    \"address\": \"625 Poplar Street, Jamestown, Oklahoma, 905\",\n    \"about\": \"Tempor minim et eu cillum pariatur ex. Aliqua et ex nostrud eiusmod incididunt ex laboris nisi. Mollit esse sint deserunt do nulla deserunt ad esse ex. Cupidatat ipsum mollit consequat anim nulla anim nulla duis veniam. Occaecat eiusmod dolor non sunt irure ut laboris nisi est deserunt mollit Lorem. Exercitation do aliquip deserunt enim anim occaecat ipsum sint id adipisicing est in.\\r\\n\",\n    \"registered\": \"2015-08-12T07:26:44-02:00\",\n    \"latitude\": 10.860612,\n    \"longitude\": -6.083388,\n    \"label\": [\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"do\"\n      },\n      {\n        \"background\": \"pink\",\n        \"color\": \"black\",\n        \"name\": \"dolore\"\n      },\n      {\n        \"background\": \"yellow\",\n        \"color\": \"black\",\n        \"name\": \"ipsum\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e84880e30bb9f9a5b69\",\n    \"index\": 11,\n    \"guid\": \"79a5f9b0-7b5b-40a0-aa99-177b1a3fe56c\",\n    \"isActive\": true,\n    \"balance\": 2263.19,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 31,\n    \"enabled\": false,\n    \"eyeColor\": \"blue\",\n    \"name\": \"Lorene Palmer\",\n    \"gender\": \"female\",\n    \"company\": \"KOFFEE\",\n    \"email\": \"lorenepalmer@koffee.com\",\n    \"phone\": \"+1 (978) 533-3144\",\n    \"address\": \"430 Leonard Street, Leeper, Nevada, 4133\",\n    \"about\": \"Labore minim proident Lorem adipisicing sint exercitation amet reprehenderit do mollit velit. Eiusmod duis qui esse dolore Lorem nostrud. Duis et ut ut anim dolor proident dolor ex.\\r\\n\",\n    \"registered\": \"2017-10-18T05:30:04-02:00\",\n    \"latitude\": -17.591932,\n    \"longitude\": -141.239979,\n    \"label\": [\n      {\n        \"background\": \"pink\",\n        \"color\": \"black\",\n        \"name\": \"ea\"\n      },\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"proident\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e8552eada4d5a8c95c5\",\n    \"index\": 12,\n    \"guid\": \"2167cabd-c2f5-41e4-b9e8-0b0d59038be2\",\n    \"isActive\": true,\n    \"balance\": 1093.9,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 37,\n    \"enabled\": true,\n    \"eyeColor\": \"blue\",\n    \"name\": \"Leon Mclaughlin\",\n    \"gender\": \"male\",\n    \"company\": \"BOILICON\",\n    \"email\": \"leonmclaughlin@boilicon.com\",\n    \"phone\": \"+1 (908) 537-2115\",\n    \"address\": \"320 Hoyts Lane, Chical, Vermont, 6785\",\n    \"about\": \"Sunt laboris ad cillum eiusmod nisi nulla nostrud adipisicing elit voluptate et. Anim consequat aliqua nostrud consectetur est. Aliquip esse proident ad esse. Elit magna minim veniam in anim commodo ea id. Non consectetur veniam fugiat voluptate nostrud dolore ullamco. Esse ea proident dolore magna duis nisi laboris minim sunt pariatur.\\r\\n\",\n    \"registered\": \"2016-03-26T09:33:18-01:00\",\n    \"latitude\": 56.238784,\n    \"longitude\": -33.484058,\n    \"label\": []\n  },\n  {\n    \"_id\": \"60533e85efd7008dd3720e08\",\n    \"index\": 13,\n    \"guid\": \"fb998093-1164-4b64-8d01-c4a64866fc70\",\n    \"isActive\": false,\n    \"balance\": 3572,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 39,\n    \"enabled\": true,\n    \"eyeColor\": \"green\",\n    \"name\": \"Sasha Harding\",\n    \"gender\": \"female\",\n    \"company\": \"TUBESYS\",\n    \"email\": \"sashaharding@tubesys.com\",\n    \"phone\": \"+1 (983) 540-2270\",\n    \"address\": \"639 Amber Street, Russellville, Iowa, 1990\",\n    \"about\": \"Consectetur voluptate consectetur esse ullamco et dolor. Enim velit proident ipsum in anim id ad qui. Commodo Lorem et dolore cupidatat laborum tempor aute nulla qui. Esse est cupidatat consectetur qui id aute nostrud sit et. Nulla qui aliquip duis veniam sint ea ut in ea. Irure aute id qui ullamco in amet duis magna consequat aliquip aute ex. Veniam elit nulla et non deserunt est.\\r\\n\",\n    \"registered\": \"2021-01-24T03:48:46-01:00\",\n    \"latitude\": 23.253791,\n    \"longitude\": 139.154837,\n    \"label\": []\n  },\n  {\n    \"_id\": \"60533e850a9d53ec09f39678\",\n    \"index\": 14,\n    \"guid\": \"e8ab3af6-9725-4163-8706-476b5dd09dfb\",\n    \"isActive\": false,\n    \"balance\": 3310.37,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 22,\n    \"enabled\": true,\n    \"eyeColor\": \"brown\",\n    \"name\": \"Whitfield Durham\",\n    \"gender\": \"male\",\n    \"company\": \"EXTRAWEAR\",\n    \"email\": \"whitfielddurham@extrawear.com\",\n    \"phone\": \"+1 (908) 541-3785\",\n    \"address\": \"254 Cypress Avenue, Martinsville, Kentucky, 1241\",\n    \"about\": \"Cupidatat id nisi tempor qui. Magna amet proident nulla cupidatat minim. Culpa ex sint minim duis irure ex ipsum ad quis voluptate fugiat esse tempor non.\\r\\n\",\n    \"registered\": \"2015-04-03T01:08:58-02:00\",\n    \"latitude\": 87.136547,\n    \"longitude\": 16.528903,\n    \"label\": [\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"voluptate\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e8585bc5182f406e575\",\n    \"index\": 15,\n    \"guid\": \"5c0af10a-cee7-46d3-ae81-7767962c566d\",\n    \"isActive\": false,\n    \"balance\": 3152.02,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 24,\n    \"enabled\": true,\n    \"eyeColor\": \"green\",\n    \"name\": \"Cash Cantu\",\n    \"gender\": \"male\",\n    \"company\": \"SPEEDBOLT\",\n    \"email\": \"cashcantu@speedbolt.com\",\n    \"phone\": \"+1 (908) 481-3778\",\n    \"address\": \"242 Arlington Place, Mulino, Ohio, 7829\",\n    \"about\": \"Laboris dolor minim sit qui ipsum magna aliquip sunt velit id eiusmod reprehenderit incididunt occaecat. Ex occaecat dolor tempor est mollit. Non ad ad voluptate magna sint minim elit do cupidatat pariatur incididunt sint magna. Exercitation irure adipisicing aliquip voluptate mollit occaecat esse ullamco tempor labore culpa commodo excepteur. Voluptate magna tempor occaecat laboris nisi est sint. Occaecat duis quis sunt amet reprehenderit incididunt fugiat ex et velit qui aute. Officia consequat amet commodo ea.\\r\\n\",\n    \"registered\": \"2015-07-02T03:13:37-02:00\",\n    \"latitude\": 75.421878,\n    \"longitude\": 169.088351,\n    \"label\": [\n      {\n        \"background\": \"brown\",\n        \"color\": \"white\",\n        \"name\": \"anim\"\n      },\n      {\n        \"background\": \"yellow\",\n        \"color\": \"black\",\n        \"name\": \"id\"\n      },\n      {\n        \"background\": \"brown\",\n        \"color\": \"white\",\n        \"name\": \"aliquip\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e85421b73bdbb0b8f47\",\n    \"index\": 16,\n    \"guid\": \"5a31bd98-ab56-48c3-aa52-fb0690f5c91b\",\n    \"isActive\": true,\n    \"balance\": 3473.91,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 20,\n    \"enabled\": true,\n    \"eyeColor\": \"blue\",\n    \"name\": \"Ramona Whitfield\",\n    \"gender\": \"female\",\n    \"company\": \"UTARIAN\",\n    \"email\": \"ramonawhitfield@utarian.com\",\n    \"phone\": \"+1 (975) 442-2879\",\n    \"address\": \"436 Barbey Street, Leming, Palau, 947\",\n    \"about\": \"Nulla officia anim minim exercitation enim in eu amet anim excepteur incididunt do veniam elit. Aute nostrud velit voluptate ad nisi adipisicing non consequat excepteur laboris laborum aliquip tempor. Lorem dolor sit eiusmod do eu nisi nisi deserunt culpa. Aute dolor eiusmod occaecat adipisicing nostrud id.\\r\\n\",\n    \"registered\": \"2017-02-09T09:45:45-01:00\",\n    \"latitude\": -75.341021,\n    \"longitude\": 149.061753,\n    \"label\": [\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"ea\"\n      },\n      {\n        \"background\": \"yellow\",\n        \"color\": \"black\",\n        \"name\": \"sunt\"\n      },\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"sunt\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e850470bc65c5b38d81\",\n    \"index\": 17,\n    \"guid\": \"2b0cd8b2-4eda-493e-82bb-c885ded414c5\",\n    \"isActive\": false,\n    \"balance\": 3173.09,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 24,\n    \"enabled\": true,\n    \"eyeColor\": \"brown\",\n    \"name\": \"Angie Bender\",\n    \"gender\": \"female\",\n    \"company\": \"ELITA\",\n    \"email\": \"angiebender@elita.com\",\n    \"phone\": \"+1 (806) 540-3301\",\n    \"address\": \"326 Fleet Street, Shrewsbury, Virginia, 9036\",\n    \"about\": \"Voluptate eu magna consectetur esse sunt velit magna pariatur irure. Eiusmod mollit eiusmod ullamco sit excepteur enim aute. Est aliqua sit duis ad proident ipsum ad nostrud ex labore proident labore ex duis. Qui ad ipsum officia elit officia nulla ut aute ea consequat adipisicing qui adipisicing eu. Nostrud voluptate pariatur exercitation id sunt esse eu sunt cupidatat voluptate incididunt mollit. Nostrud ea cupidatat in amet incididunt culpa elit ipsum elit.\\r\\n\",\n    \"registered\": \"2020-03-18T04:15:36-01:00\",\n    \"latitude\": -50.894386,\n    \"longitude\": -55.222191,\n    \"label\": [\n      {\n        \"background\": \"green\",\n        \"color\": \"white\",\n        \"name\": \"nisi\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e859abdbf887eac4b25\",\n    \"index\": 18,\n    \"guid\": \"8c8785b5-3031-430f-a34b-8b49b5304e87\",\n    \"isActive\": true,\n    \"balance\": 2902.14,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 32,\n    \"enabled\": false,\n    \"eyeColor\": \"green\",\n    \"name\": \"Esmeralda Mcconnell\",\n    \"gender\": \"female\",\n    \"company\": \"FARMEX\",\n    \"email\": \"esmeraldamcconnell@farmex.com\",\n    \"phone\": \"+1 (875) 533-3064\",\n    \"address\": \"479 Kiely Place, Dawn, Arizona, 2581\",\n    \"about\": \"Fugiat reprehenderit anim dolore anim enim duis ipsum elit id. Excepteur veniam sunt officia ad minim mollit amet ea ipsum dolor nulla pariatur ea. Occaecat aliquip consectetur commodo incididunt ad culpa do sunt. Enim aliquip proident deserunt culpa eiusmod eiusmod officia. Velit quis magna cupidatat cupidatat ex aliqua elit. Sit consectetur qui exercitation velit enim pariatur nostrud. Consequat nulla in qui qui.\\r\\n\",\n    \"registered\": \"2016-06-07T03:11:40-02:00\",\n    \"latitude\": -63.338444,\n    \"longitude\": 41.271469,\n    \"label\": [\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"dolore\"\n      },\n      {\n        \"background\": \"pink\",\n        \"color\": \"black\",\n        \"name\": \"enim\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e853129d6eaaad1bff5\",\n    \"index\": 19,\n    \"guid\": \"4e6269f2-2c20-4a5d-b378-4dd57a748dbb\",\n    \"isActive\": true,\n    \"balance\": 1367.46,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 38,\n    \"enabled\": false,\n    \"eyeColor\": \"blue\",\n    \"name\": \"Carmen Duke\",\n    \"gender\": \"female\",\n    \"company\": \"RECRITUBE\",\n    \"email\": \"carmenduke@recritube.com\",\n    \"phone\": \"+1 (900) 469-2130\",\n    \"address\": \"256 Garden Street, Tryon, Montana, 6400\",\n    \"about\": \"Adipisicing ea proident sit anim. Sint reprehenderit culpa proident laborum id ex officia nulla et enim fugiat ut nulla. Veniam proident elit dolor officia mollit excepteur amet ullamco. Ad nulla laboris laborum aliquip irure pariatur labore eiusmod id incididunt elit. Deserunt enim tempor sint elit fugiat id. Dolor magna sit consequat labore mollit culpa consectetur non duis reprehenderit laboris. Ex in ipsum esse velit commodo incididunt cupidatat proident.\\r\\n\",\n    \"registered\": \"2020-08-11T11:12:02-02:00\",\n    \"latitude\": 74.456123,\n    \"longitude\": 162.897203,\n    \"label\": [\n      {\n        \"background\": \"blue\",\n        \"color\": \"white\",\n        \"name\": \"et\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e857891a71226d8467d\",\n    \"index\": 20,\n    \"guid\": \"4436d40a-9b48-439d-b1ad-ec21caf16d5e\",\n    \"isActive\": false,\n    \"balance\": 3431.14,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 25,\n    \"enabled\": true,\n    \"eyeColor\": \"brown\",\n    \"name\": \"Fay Carver\",\n    \"gender\": \"female\",\n    \"company\": \"DEEPENDS\",\n    \"email\": \"faycarver@deepends.com\",\n    \"phone\": \"+1 (950) 547-3417\",\n    \"address\": \"926 Gunther Place, Herbster, Virgin Islands, 4756\",\n    \"about\": \"Ullamco fugiat nisi minim sunt nisi ullamco laborum culpa. Velit amet pariatur non enim Lorem aliquip. Ut est sint mollit irure commodo veniam duis fugiat aliquip eiusmod ex. Dolor minim amet reprehenderit aliqua magna id fugiat qui pariatur. Consectetur veniam enim est irure culpa incididunt labore exercitation proident irure ipsum.\\r\\n\",\n    \"registered\": \"2017-06-23T07:20:54-02:00\",\n    \"latitude\": 13.419379,\n    \"longitude\": 168.968013,\n    \"label\": []\n  },\n  {\n    \"_id\": \"60533e858c627049fce296f4\",\n    \"index\": 21,\n    \"guid\": \"86aac2a1-4599-4950-be5c-df352678b015\",\n    \"isActive\": false,\n    \"balance\": 3527.41,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 26,\n    \"enabled\": true,\n    \"eyeColor\": \"green\",\n    \"name\": \"Coleman Noel\",\n    \"gender\": \"male\",\n    \"company\": \"ORBAXTER\",\n    \"email\": \"colemannoel@orbaxter.com\",\n    \"phone\": \"+1 (986) 527-3453\",\n    \"address\": \"300 Williams Place, Gorham, Louisiana, 3425\",\n    \"about\": \"Velit laboris non minim aute non officia. Id nisi enim eiusmod duis esse reprehenderit laboris culpa consequat commodo eu quis et. Nisi incididunt enim deserunt reprehenderit irure id. Aliquip fugiat ipsum incididunt nisi in voluptate nostrud. Ullamco tempor ex sit esse irure exercitation aliquip magna proident. Dolore dolore nisi ea sunt in qui Lorem fugiat aliquip voluptate. Dolore laborum est aliqua incididunt do nisi commodo minim minim laborum sint eiusmod incididunt.\\r\\n\",\n    \"registered\": \"2018-07-25T03:59:40-02:00\",\n    \"latitude\": -30.386673,\n    \"longitude\": -52.354031,\n    \"label\": [\n      {\n        \"background\": \"green\",\n        \"color\": \"white\",\n        \"name\": \"esse\"\n      },\n      {\n        \"background\": \"green\",\n        \"color\": \"white\",\n        \"name\": \"exercitation\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e853e825481828520f0\",\n    \"index\": 22,\n    \"guid\": \"58c5ae20-62c6-4bfb-b8a2-7f852d29c6e9\",\n    \"isActive\": true,\n    \"balance\": 2752.31,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 29,\n    \"enabled\": true,\n    \"eyeColor\": \"green\",\n    \"name\": \"Kristina Hart\",\n    \"gender\": \"female\",\n    \"company\": \"SPHERIX\",\n    \"email\": \"kristinahart@spherix.com\",\n    \"phone\": \"+1 (992) 467-2294\",\n    \"address\": \"584 Albany Avenue, Frystown, Alabama, 9934\",\n    \"about\": \"Laboris tempor pariatur incididunt voluptate deserunt dolore ipsum ipsum. Tempor duis id in commodo nostrud exercitation ex mollit excepteur. Culpa officia nulla deserunt incididunt duis sunt. Anim enim id eiusmod non elit velit laboris qui. In reprehenderit in aute laboris adipisicing esse amet amet cillum culpa. Proident dolor pariatur dolore dolor laborum qui. Ea non dolor aliqua ipsum amet eiusmod do veniam ullamco sint eiusmod.\\r\\n\",\n    \"registered\": \"2019-06-28T06:22:41-02:00\",\n    \"latitude\": 20.197164,\n    \"longitude\": -78.993713,\n    \"label\": []\n  },\n  {\n    \"_id\": \"60533e85b4d15810bb1671d7\",\n    \"index\": 23,\n    \"guid\": \"cab014cc-afcf-466a-b3fb-3cfce9104e13\",\n    \"isActive\": false,\n    \"balance\": 2199.22,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 23,\n    \"enabled\": true,\n    \"eyeColor\": \"green\",\n    \"name\": \"Bullock Nichols\",\n    \"gender\": \"male\",\n    \"company\": \"IDEGO\",\n    \"email\": \"bullocknichols@idego.com\",\n    \"phone\": \"+1 (973) 582-3340\",\n    \"address\": \"219 Sackett Street, Berwind, Federated States Of Micronesia, 343\",\n    \"about\": \"Et tempor officia cillum est aliqua. Elit ut proident laborum Lorem aute proident qui fugiat dolore eiusmod aliquip. Deserunt cupidatat pariatur eiusmod consequat elit irure nulla aliqua in.\\r\\n\",\n    \"registered\": \"2020-03-30T01:36:02-02:00\",\n    \"latitude\": 1.154849,\n    \"longitude\": -104.472625,\n    \"label\": [\n      {\n        \"background\": \"brown\",\n        \"color\": \"white\",\n        \"name\": \"dolor\"\n      },\n      {\n        \"background\": \"brown\",\n        \"color\": \"white\",\n        \"name\": \"sint\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e85b8f150abcab63014\",\n    \"index\": 24,\n    \"guid\": \"4f1b7473-bebb-4677-a99a-3876078366f7\",\n    \"isActive\": true,\n    \"balance\": 2987.78,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 21,\n    \"enabled\": true,\n    \"eyeColor\": \"blue\",\n    \"name\": \"Gretchen Terrell\",\n    \"gender\": \"female\",\n    \"company\": \"ASIMILINE\",\n    \"email\": \"gretchenterrell@asimiline.com\",\n    \"phone\": \"+1 (925) 519-3822\",\n    \"address\": \"592 Crooke Avenue, Veyo, Maryland, 380\",\n    \"about\": \"Ex do nostrud in Lorem elit amet adipisicing dolore culpa deserunt fugiat irure duis. Reprehenderit esse commodo minim incididunt consequat. Dolor sunt pariatur laborum incididunt pariatur excepteur voluptate ad velit occaecat dolore est id aute. Mollit culpa nisi qui duis ex aute commodo nisi Lorem velit qui deserunt. Velit mollit officia voluptate adipisicing pariatur nostrud ad. Est sunt deserunt ea minim consequat proident esse nisi sit sit cillum. Commodo cillum sint fugiat ad velit.\\r\\n\",\n    \"registered\": \"2018-09-01T02:49:18-02:00\",\n    \"latitude\": 57.194127,\n    \"longitude\": 87.52193,\n    \"label\": []\n  },\n  {\n    \"_id\": \"60533e85ebcda3ccee6dfdf8\",\n    \"index\": 25,\n    \"guid\": \"499536e8-5fdb-441c-8895-74c426adf663\",\n    \"isActive\": true,\n    \"balance\": 1632.27,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 30,\n    \"enabled\": true,\n    \"eyeColor\": \"brown\",\n    \"name\": \"Patrick Gonzales\",\n    \"gender\": \"male\",\n    \"company\": \"DANCITY\",\n    \"email\": \"patrickgonzales@dancity.com\",\n    \"phone\": \"+1 (897) 598-3111\",\n    \"address\": \"619 McKibbin Street, Fairfield, New Jersey, 7805\",\n    \"about\": \"Laboris esse excepteur excepteur dolore anim nisi elit qui non irure. Lorem est do incididunt ullamco ut excepteur eiusmod qui. Commodo adipisicing qui non dolore occaecat proident.\\r\\n\",\n    \"registered\": \"2015-11-25T06:17:01-01:00\",\n    \"latitude\": -46.441126,\n    \"longitude\": -130.715017,\n    \"label\": [\n      {\n        \"background\": \"yellow\",\n        \"color\": \"black\",\n        \"name\": \"voluptate\"\n      },\n      {\n        \"background\": \"green\",\n        \"color\": \"white\",\n        \"name\": \"consectetur\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e85631914004378fa86\",\n    \"index\": 26,\n    \"guid\": \"6746546f-26a9-42d1-a043-fe4428f26712\",\n    \"isActive\": true,\n    \"balance\": 2960.16,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 28,\n    \"enabled\": false,\n    \"eyeColor\": \"brown\",\n    \"name\": \"Bonnie Mueller\",\n    \"gender\": \"female\",\n    \"company\": \"POLARIUM\",\n    \"email\": \"bonniemueller@polarium.com\",\n    \"phone\": \"+1 (916) 428-3956\",\n    \"address\": \"669 Powers Street, Summerfield, Wisconsin, 4667\",\n    \"about\": \"Dolore duis culpa pariatur ullamco commodo eiusmod consequat consectetur ad ipsum. Adipisicing quis qui deserunt qui ullamco eu ad officia occaecat laboris. Et amet ut aliqua ex incididunt reprehenderit qui reprehenderit adipisicing ea excepteur adipisicing reprehenderit nulla. Ipsum Lorem anim elit do officia. Duis veniam sint eiusmod laboris occaecat et sint adipisicing occaecat fugiat est nisi. Veniam irure laboris velit aliquip dolore aute et. Qui nisi proident enim consectetur exercitation fugiat laborum anim culpa non aliqua aliquip officia.\\r\\n\",\n    \"registered\": \"2014-10-01T05:01:23-02:00\",\n    \"latitude\": -12.765026,\n    \"longitude\": -41.387426,\n    \"label\": [\n      {\n        \"background\": \"yellow\",\n        \"color\": \"black\",\n        \"name\": \"proident\"\n      },\n      {\n        \"background\": \"pink\",\n        \"color\": \"black\",\n        \"name\": \"velit\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e856202fe1f3ece19b6\",\n    \"index\": 27,\n    \"guid\": \"3b738c85-c6b8-4f5a-983b-69ffec7f587c\",\n    \"isActive\": true,\n    \"balance\": 1847.36,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 27,\n    \"enabled\": false,\n    \"eyeColor\": \"brown\",\n    \"name\": \"Bonita Wade\",\n    \"gender\": \"female\",\n    \"company\": \"ISONUS\",\n    \"email\": \"bonitawade@isonus.com\",\n    \"phone\": \"+1 (916) 496-2943\",\n    \"address\": \"188 Bancroft Place, Aberdeen, North Carolina, 9804\",\n    \"about\": \"Eu ullamco amet adipisicing officia officia aliqua laborum tempor laboris anim culpa. In occaecat do eiusmod est Lorem nisi anim magna proident. Ex sit Lorem labore esse. Aute magna elit officia nostrud pariatur.\\r\\n\",\n    \"registered\": \"2019-05-20T02:02:26-02:00\",\n    \"latitude\": 50.746853,\n    \"longitude\": 123.936282,\n    \"label\": [\n      {\n        \"background\": \"yellow\",\n        \"color\": \"black\",\n        \"name\": \"fugiat\"\n      },\n      {\n        \"background\": \"green\",\n        \"color\": \"white\",\n        \"name\": \"elit\"\n      }\n    ]\n  },\n  {\n    \"_id\": \"60533e85f46c99230ea11303\",\n    \"index\": 28,\n    \"guid\": \"bb6a09f0-025b-4721-a2ee-215b44082dc5\",\n    \"isActive\": true,\n    \"balance\": 1270.4,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 32,\n    \"enabled\": true,\n    \"eyeColor\": \"green\",\n    \"name\": \"Sharron Buchanan\",\n    \"gender\": \"female\",\n    \"company\": \"EVENTAGE\",\n    \"email\": \"sharronbuchanan@eventage.com\",\n    \"phone\": \"+1 (834) 600-3302\",\n    \"address\": \"206 Cherry Street, Harrodsburg, Washington, 7226\",\n    \"about\": \"Exercitation deserunt cillum tempor adipisicing aute id Lorem velit aliqua do aute aliquip. Occaecat tempor cillum commodo ipsum excepteur occaecat ex laborum mollit dolor quis labore enim est. Sunt exercitation est non incididunt consectetur sint id proident laborum voluptate adipisicing commodo. Anim amet dolor anim eu aliqua ea excepteur nostrud in sunt ut non id eiusmod. Sint enim consequat reprehenderit ut velit minim eiusmod. Veniam velit do nulla aliqua nulla consectetur cupidatat aliquip aute occaecat labore anim anim veniam. Labore occaecat quis esse dolor qui amet.\\r\\n\",\n    \"registered\": \"2018-08-31T06:23:09-02:00\",\n    \"latitude\": 68.68166,\n    \"longitude\": 69.848154,\n    \"label\": []\n  }\n]"
                }
            ],
            "src/app/examples/lazy-loaded/store/example/selectors.ts": [
                {
                    "name": "selectAllExampleStore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/examples/lazy-loaded/store/example/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectFeature,\n  (state: ILazyLoadedStore): IExampleState => {\n    return state.example\n  }\n)"
                },
                {
                    "name": "selectExampleValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/examples/lazy-loaded/store/example/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectFeature,\n  (state: ILazyLoadedStore): string => {\n    return state.example.value\n  }\n)"
                },
                {
                    "name": "selectFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/examples/lazy-loaded/store/example/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ILazyLoadedStore>(lazyLoadedFeatureKey)"
                }
            ],
            "src/app/inobeta-ui/ui/kai-table/cells.ts": [
                {
                    "name": "useColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/kai-table/cells.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T>(columnName: string, propertyName?: string, sort?: boolean): IbColumnDef => ({\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => e[propertyName ?? columnName],\n  sort\n})"
                },
                {
                    "name": "useContextCell",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/kai-table/cells.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T>(cell: (e: T) => IbContextAction[]): IbColumnDef => ({\n  component: IbContextActionCell,\n  columnDef: '_ctxActions',\n  header: '',\n  cell,\n})"
                },
                {
                    "name": "useContextColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/kai-table/cells.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "useContextCell"
                },
                {
                    "name": "useDateColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/kai-table/cells.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T>(\n  columnName: string,\n  propertyName?: string,\n  sort?: boolean,\n  format: string = 'dd/MM/yyyy HH:mm z',\n  locale: string = 'it'\n): IbColumnDef => ({\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => `${formatDate(e[propertyName ?? columnName], format, locale)}`,\n  sort\n})"
                },
                {
                    "name": "useNumberColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/kai-table/cells.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T>(\n  columnName: string,\n  propertyName?: string,\n  sort?: boolean,\n  format: string = '1.2-2',\n  locale: string = 'it'\n): IbColumnDef => ({\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => `${formatNumber(e[propertyName ?? columnName], locale, format)}`,\n  sort\n})"
                },
                {
                    "name": "useTranslateColumn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/inobeta-ui/ui/kai-table/cells.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<T>(\n  columnName: string,\n  propertyName?: string,\n  sort?: boolean,\n  params: any = {},\n): IbColumnDef => ({\n  component: IbTranslateCell,\n  columnDef: propertyName ?? columnName,\n  header: columnName,\n  cell: (e) => ({ key: e[propertyName ?? columnName], params }),\n  sort\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/inobeta-ui/ui/kai-filter/filters.ts": [
                {
                    "name": "applyFilter",
                    "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "filter",
                            "type": "IbFilterDef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filterValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "IbFilterDef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "evalOperation",
                    "file": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "operation",
                            "type": "IbFilterOperator",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filterValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "operation",
                            "type": "IbFilterOperator",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/inobeta-ui/ui/table/table.component.ts": [
                {
                    "name": "compare",
                    "file": "src/app/inobeta-ui/ui/table/table.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "a",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isAsc",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isAsc",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/examples/redux-example/counter.reducer.ts": [
                {
                    "name": "counterReducer",
                    "file": "src/app/examples/redux-example/counter.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": "ICounterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "INITIAL_COUNTER_STATE"
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "ICounterState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "INITIAL_COUNTER_STATE",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/examples/kai-table-example/users.ts": [
                {
                    "name": "createNewUser",
                    "file": "src/app/examples/kai-table-example/users.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "IbUserExample",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandomDate",
                    "file": "src/app/examples/kai-table-example/users.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "startDate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "endDate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "startDate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "endDate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/inobeta-ui/ui/material-forms/controls/datepicker.ts": [
                {
                    "name": "dateRequiredValidator",
                    "file": "src/app/inobeta-ui/ui/material-forms/controls/datepicker.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "ValidatorFn"
                }
            ],
            "src/app/examples/lazy-loaded/store/example/reducers.ts": [
                {
                    "name": "exampleReducer",
                    "file": "src/app/examples/lazy-loaded/store/example/reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": "IExampleState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "INITIAL"
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IExampleState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "INITIAL",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/examples/dynamic-forms-example/dynamic-forms-example.component.ts": [
                {
                    "name": "forceValueValidator",
                    "file": "src/app/examples/dynamic-forms-example/dynamic-forms-example.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "forcedValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "errorMessage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ValidatorFn",
                    "jsdoctags": [
                        {
                            "name": "forcedValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "errorMessage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts": [
                {
                    "name": "formatFieldState",
                    "file": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tableName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "instance",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newConfig",
                            "type": "IbTableConfigState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "IbTableState",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tableName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "instance",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newConfig",
                            "type": "IbTableConfigState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ibTableFeatureReducer",
                    "file": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": "IbTableState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "ibTableFeatureInitialState"
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "IbTableState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "ibTableFeatureInitialState",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/inobeta-ui/ui/kai-table/table.component.ts": [
                {
                    "name": "generateTableName",
                    "file": "src/app/inobeta-ui/ui/kai-table/table.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/inobeta-ui/http/http/messages.decorator.ts": [
                {
                    "name": "ibCrudToast",
                    "file": "src/app/inobeta-ui/http/http/messages.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "enableBackCall",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "successMessage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'shared.ibCrudToast.success'"
                        },
                        {
                            "name": "timeoutOnSave",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "500"
                        }
                    ],
                    "returnType": "MethodDecorator",
                    "jsdoctags": [
                        {
                            "name": "enableBackCall",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "successMessage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'shared.ibCrudToast.success'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timeoutOnSave",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "500",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/inobeta-ui/ui/material-forms/material-form.module.ts": [
                {
                    "name": "ibMatDatepickerTranslate",
                    "file": "src/app/inobeta-ui/ui/material-forms/material-form.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "translateService",
                            "type": "TranslateService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "translateService",
                            "type": "TranslateService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/inobeta-ui/ui/table/table.module.ts": [
                {
                    "name": "ibMatPaginatorTranslate",
                    "file": "src/app/inobeta-ui/ui/table/table.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "translateService",
                            "type": "TranslateService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "translateService",
                            "type": "TranslateService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/inobeta-ui/http/auth/redux/session.reducer.ts": [
                {
                    "name": "ibSessionReducer",
                    "file": "src/app/inobeta-ui/http/auth/redux/session.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": "ISessionState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "INITIAL_SESSION_STATE"
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "ISessionState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "INITIAL_SESSION_STATE",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/inobeta-ui/ui/table/redux/table.reducer.ts": [
                {
                    "name": "ibTableFiltersReducer",
                    "file": "src/app/inobeta-ui/ui/table/redux/table.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": "ITableFiltersState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "INITIAL_TABLE_FILTERS_STATE"
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "ITableFiltersState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "INITIAL_TABLE_FILTERS_STATE",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/inobeta-ui/hydration/reducer.ts": [
                {
                    "name": "loadState",
                    "file": "src/app/inobeta-ui/hydration/reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "ibSessionStorageKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ibReduxPersistKeys",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ibSessionStorageKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ibReduxPersistKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/inobeta-ui/hydration/effects.ts": [
                {
                    "name": "saveState",
                    "file": "src/app/inobeta-ui/hydration/effects.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "ibSessionStorageKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ibReduxPersistKeys",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ibSessionStorageKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ibReduxPersistKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/inobeta-ui/http/auth/session.model.ts": [
                {
                    "name": "IbAuthTypes",
                    "childs": [
                        {
                            "name": "BASIC_AUTH",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "JWT",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/inobeta-ui/http/auth/session.model.ts"
                }
            ],
            "src/app/inobeta-ui/ui/breadcrumb/breadcrumb.component.ts": [
                {
                    "name": "IbBreadcrumbMode",
                    "childs": [
                        {
                            "name": "static",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "static"
                        },
                        {
                            "name": "auto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "auto"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/inobeta-ui/ui/breadcrumb/breadcrumb.component.ts"
                }
            ],
            "src/app/inobeta-ui/ui/kai-filter/filters/date/filter-date.component.ts": [
                {
                    "name": "IbDateFilterCriteriaCategory",
                    "childs": [
                        {
                            "name": "WITHIN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "within"
                        },
                        {
                            "name": "MORE_THAN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "moreThan"
                        },
                        {
                            "name": "RANGE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "range"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/inobeta-ui/ui/kai-filter/filters/date/filter-date.component.ts"
                },
                {
                    "name": "IbDateFilterPeriod",
                    "childs": [
                        {
                            "name": "MINUTES",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "HOURS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "DAYS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "WEEKS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/inobeta-ui/ui/kai-filter/filters/date/filter-date.component.ts"
                }
            ],
            "src/app/inobeta-ui/ui/kai-filter/filter.types.ts": [
                {
                    "name": "IbFilterOperator",
                    "childs": [
                        {
                            "name": "NONE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "EQUALS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "NOT_EQUALS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "LESS_THAN",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "LESS_THAN_EQUALS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "GREATHER_THAN",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "GREATHER_THAN_EQUALS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "CONTAINS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "NOT_CONTAINS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "STARTS_WITH",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ENDS_WITH",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "AND",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "OR",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/inobeta-ui/ui/kai-filter/filter.types.ts"
                }
            ],
            "src/app/inobeta-ui/ui/kai-table/table.types.ts": [
                {
                    "name": "IbKaiTableState",
                    "childs": [
                        {
                            "name": "IDLE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "LOADING",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "NO_DATA",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "HTTP_ERROR",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/inobeta-ui/ui/kai-table/table.types.ts"
                }
            ],
            "src/app/inobeta-ui/ui/material-forms/material-form/material-form.component.ts": [
                {
                    "name": "IbMatActionsPosition",
                    "childs": [
                        {
                            "name": "BOTH",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TOP",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "BOTTOM",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Crea un form dinamico usando componenti di Angular Material.</p>\n",
                    "file": "src/app/inobeta-ui/ui/material-forms/material-form/material-form.component.ts"
                }
            ],
            "src/app/inobeta-ui/ui/table/models/titles.model.ts": [
                {
                    "name": "IbStickyAreas",
                    "childs": [
                        {
                            "name": "HEADER",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "FOOTER",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "SELECT",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "DELETE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "EDIT",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TEMPLATE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "SETTINGS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/inobeta-ui/ui/table/models/titles.model.ts"
                },
                {
                    "name": "IbTableActionsPosition",
                    "childs": [
                        {
                            "name": "BOTH",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TOP",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "BOTTOM",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/inobeta-ui/ui/table/models/titles.model.ts"
                },
                {
                    "name": "IbTableCellAligns",
                    "childs": [
                        {
                            "name": "LEFT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "left"
                        },
                        {
                            "name": "CENTER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "center"
                        },
                        {
                            "name": "RIGHT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "right"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/inobeta-ui/ui/table/models/titles.model.ts"
                },
                {
                    "name": "IbTableTitlesTypes",
                    "childs": [
                        {
                            "name": "ANY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "any"
                        },
                        {
                            "name": "DATE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "date"
                        },
                        {
                            "name": "TAG",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "tag"
                        },
                        {
                            "name": "NUMBER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "number"
                        },
                        {
                            "name": "HOUR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "hour"
                        },
                        {
                            "name": "COMBOBOX",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "combobox"
                        },
                        {
                            "name": "BOOLEAN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "boolean"
                        },
                        {
                            "name": "STRING",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "string"
                        },
                        {
                            "name": "INPUT_NUMBER",
                            "deprecated": true,
                            "deprecationMessage": "do not use this enum type. It will be removed in a future release",
                            "value": "input-number"
                        },
                        {
                            "name": "CUSTOM",
                            "deprecated": true,
                            "deprecationMessage": "do not use this enum type. It will be removed in a future release",
                            "value": "custom"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/inobeta-ui/ui/table/models/titles.model.ts"
                }
            ],
            "src/app/inobeta-ui/storage/storage.service.ts": [
                {
                    "name": "IbStorageTypes",
                    "childs": [
                        {
                            "name": "LOCALSTORAGE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "COOKIESTORAGE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/inobeta-ui/storage/storage.service.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/inobeta-ui/ui/table/directives/sticky-area/sticky-area.ts": [
                {
                    "name": "StickyColumnData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "IStickyColumnData | IbTableTitles",
                    "file": "src/app/inobeta-ui/ui/table/directives/sticky-area/sticky-area.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Button>",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Header>",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Page>",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "appRoutes",
                "filename": "src/app/routing.module.ts",
                "module": "RoutingModule",
                "children": [
                    {
                        "path": "home",
                        "component": "NavComponent",
                        "children": [
                            {
                                "path": "table",
                                "data": {
                                    "breadcrumb": "Table"
                                },
                                "children": [
                                    {
                                        "path": "redux",
                                        "component": "IbTableExampleComponent",
                                        "data": {
                                            "breadcrumb": ""
                                        }
                                    },
                                    {
                                        "path": "noredux",
                                        "data": {
                                            "breadcrumb": "Withoutredux"
                                        },
                                        "component": "IbTableExampleNoReduxComponent"
                                    },
                                    {
                                        "path": "sticky",
                                        "data": {
                                            "breadcrumb": "Sticky"
                                        },
                                        "component": "IbTableStickyExampleComponent"
                                    },
                                    {
                                        "path": "",
                                        "redirectTo": "redux",
                                        "pathMatch": "full"
                                    }
                                ]
                            },
                            {
                                "path": "forms",
                                "data": {
                                    "breadcrumb": "Forms"
                                },
                                "component": "DynamicFormsExampleComponent"
                            },
                            {
                                "path": "redux",
                                "data": {
                                    "breadcrumb": "Redux"
                                },
                                "children": [
                                    {
                                        "path": "base",
                                        "component": "MyCounterComponent",
                                        "data": {
                                            "breadcrumb": "Base"
                                        }
                                    },
                                    {
                                        "path": "lazy",
                                        "data": {
                                            "breadcrumb": "Lazyloaded"
                                        },
                                        "loadChildren": "./examples/lazy-loaded/lazy-loaded.module#LazyLoadedModule",
                                        "children": [
                                            {
                                                "kind": "module",
                                                "children": [
                                                    {
                                                        "name": "routes",
                                                        "filename": "src/app/examples/lazy-loaded/lazy-loaded.routing.ts",
                                                        "module": "LazyLoadedRoutingModule",
                                                        "children": [
                                                            {
                                                                "path": "",
                                                                "component": "LazyLoadedComponent",
                                                                "data": {
                                                                    "breadcrumb": ""
                                                                }
                                                            },
                                                            {
                                                                "path": "",
                                                                "redirectTo": "all",
                                                                "pathMatch": "full"
                                                            }
                                                        ],
                                                        "kind": "module"
                                                    }
                                                ],
                                                "module": "LazyLoadedModule"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "path": "http",
                                "data": {
                                    "breadcrumb": "Http"
                                },
                                "component": "HttpExampleComponent"
                            },
                            {
                                "path": "dialog",
                                "data": {
                                    "breadcrumb": "Dialog"
                                },
                                "component": "DialogExampleComponent"
                            },
                            {
                                "path": "toast",
                                "data": {
                                    "breadcrumb": "examples.toastMenu"
                                },
                                "component": "IbToastExampleComponent"
                            },
                            {
                                "path": "kai-table",
                                "data": {
                                    "breadcrumb": "Table"
                                },
                                "children": [
                                    {
                                        "path": "simple",
                                        "data": {
                                            "breadcrumb": "Simple"
                                        },
                                        "component": "IbKaiTableExamplePage"
                                    },
                                    {
                                        "path": "context-action",
                                        "data": {
                                            "breadcrumb": "ContextAction"
                                        },
                                        "component": "IbKaiTableContextActionExamplePage"
                                    },
                                    {
                                        "path": "api",
                                        "data": {
                                            "breadcrumb": "Api"
                                        },
                                        "component": "IbKaiTableApiExamplePage"
                                    },
                                    {
                                        "path": "full",
                                        "data": {
                                            "breadcrumb": "Full"
                                        },
                                        "component": "IbKaiTableFullExamplePage"
                                    }
                                ]
                            },
                            {
                                "path": "",
                                "redirectTo": "table",
                                "pathMatch": "full"
                            }
                        ]
                    },
                    {
                        "path": "**",
                        "redirectTo": "home",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reduxStorageSave",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "statusErrorMessages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/dialog-example/dialog-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/dynamic-forms-example/dynamic-forms-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormsExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/dynamic-forms-example/dynamic-forms-example.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "forceValueValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/dynamic-forms-example/my-custom-textbox.model.ts",
                "type": "component",
                "linktype": "component",
                "name": "MyCustomTextboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/dynamic-forms-example/my-custom-textbox.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MyCustomTextbox",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/dynamic-forms-example/my-custom-textbox.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MyCustomTextboxParams",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/http-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HttpExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/kai-table-example/kai-table-api-example.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbKaiTableApiExamplePage",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/kai-table-example/kai-table-api-example.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GithubService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/kai-table-example/kai-table-api-example.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GithubApi",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/kai-table-example/kai-table-api-example.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GithubIssue",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/kai-table-example/kai-table-context-action-example.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbKaiTableContextActionExamplePage",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/kai-table-example/kai-table-example.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbKaiTableExamplePage",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/kai-table-example/kai-table-full-example.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbKaiTableFullExamplePage",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/kai-table-example/users.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbUserExample",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/kai-table-example/users.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createNewUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/kai-table-example/users.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRandomDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/kai-table-example/users.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FRUITS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/kai-table-example/users.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "maxDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/kai-table-example/users.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "minDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/kai-table-example/users.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NAMES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/lazy-loaded/lazy-loaded.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LazyLoadedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/lazy-loaded/store/example/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exampleActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/lazy-loaded/store/example/effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ExampleEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/lazy-loaded/store/example/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IExampleState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/lazy-loaded/store/example/reducers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "exampleReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/lazy-loaded/store/example/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INITIAL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/lazy-loaded/store/example/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "main",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/lazy-loaded/store/example/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllExampleStore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/lazy-loaded/store/example/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectExampleValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/lazy-loaded/store/example/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/lazy-loaded/store/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILazyLoadedStore",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/lazy-loaded/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lazyLoadedEffects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/lazy-loaded/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lazyLoadedFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/lazy-loaded/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lazyLoadedReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/main-menu-example/main-menu-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbMainMenuExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/nav/nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/redux-example/counter.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CounterActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/redux-example/counter.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICounterState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/redux-example/counter.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "counterReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/redux-example/counter.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INITIAL_COUNTER_STATE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/redux-example/counter.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mainCounterReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/redux-example/my-counter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MyCounterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/table-example/json-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sampleData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/table-example/table-sticky/table-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTableStickyExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/table-example/table-with-redux/table-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTableExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/table-example/table-without-redux/table-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTableExampleNoReduxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/examples/toast-example/toast-example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbToastExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IbAuthService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/auth/guard.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "IbAuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/auth/guard.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "IbLoginGuard",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/auth/redux/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "changeNameSurname",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/auth/redux/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "login",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/auth/redux/session.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/auth/redux/session.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISessionState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/auth/redux/session.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ibSessionReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/auth/redux/session.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INITIAL_SESSION_STATE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/auth/redux/session.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mainSessionReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/auth/session.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbSession",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/auth/session.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbUserLogin",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/auth/session.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IbSessionService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/auth/session.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/http.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/http/auth.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "IbAuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/http/error.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "IbErrorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/http/http-client.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IbHttpClientService",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/http/http-client.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbHttpRequestDefinition",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/http/messages.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ibCrudToast",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/http/response-handler.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IbResponseHandlerService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/http/spinner-loading.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbSpinnerLoadingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/http/pages/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbLoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/hydration/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ibHydrate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/hydration/effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HydrationEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/hydration/effects.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "saveState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/hydration/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getIbMetaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/hydration/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ibSetupHydration",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/hydration/reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "loadState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/hydration/reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getIbHydrationMetaReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/storage/storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IbStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/tools/tools-test.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/tools/tools-test.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "services",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/breadcrumb/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbBreadcrumbComponent",
                "coveragePercent": 25,
                "coverageCount": "2/8",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/breadcrumb/breadcrumb.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbBreadcrumbItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/breadcrumb/material-breadcrumb/material-breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbMaterialBreadcrumbComponent",
                "coveragePercent": 28,
                "coverageCount": "2/7",
                "status": "medium"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/forms/controls/checkbox.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbCheckbox",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/forms/controls/dropdown.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbDropdown",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/forms/controls/form-control-base.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbFormControlBase",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/forms/controls/form-control-base.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbFormControlBaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/forms/controls/form-control-base.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbFormControlBaseParams",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/forms/controls/form-control-base.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbFormControlData",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/forms/controls/form-control-base.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbFormControlInterface",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/forms/controls/radio.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbRadio",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/forms/controls/textbox.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbTextbox",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/forms/dynamic-form-control/dynamic-form-control.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbDynamicFormControlComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/forms/dynamic-form/dynamic-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbDynamicFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/forms/dynamic-form/dynamic-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbFormAction",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/forms/dynamic-form/dynamic-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbFormOnChanges",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/forms/form-control.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IbFormControlService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filter-actions/apply-filter-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbApplyFilterButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filter-actions/filter-actions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbFilterActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filter-button/filter-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbFilterButton",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbFilter",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filter.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbFilterDef",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filter.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbFilterSyntax",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "applyFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "evalOperation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "and",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "contains",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "endsWith",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "eq",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "gt",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "gte",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lt",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lte",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ncontains",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "neq",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "none",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "or",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filters.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "startsWith",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filters/base/filter-base.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "IbFilterBase",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filters/base/filter-base.ts",
                "type": "class",
                "linktype": "classe",
                "name": "_IbFilterBase",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filters/date/filter-date.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbDateFilter",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filters/number/filter-number.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbNumberFilter",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filters/tag/filter-tag.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTagFilter",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-filter/filters/text/filter-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTextFilter",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/cells.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbCell",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/cells.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbContextActionCell",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/cells.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTranslateCell",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/cells.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbContextAction",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/cells.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "useColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/cells.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "useContextCell",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/cells.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "useContextColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/cells.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "useDateColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/cells.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "useNumberColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/cells.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "useTranslateColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/rowgroup.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "IbKaiRowGroupDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/selection-column.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbSelectionColumn",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/table-data-source.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbDataSource",
                "coveragePercent": 17,
                "coverageCount": "3/17",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTable",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/table.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "generateTableName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/table.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTableDef",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/table.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IB_CELL_DATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/table.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tableNameGen",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/table.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbCellData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/table.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbColumnDef",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/table.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbPaginatorOptions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/table.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbTableDef",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/table.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbTableRowEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/kai-table/table.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbTableRowSelectionChange",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/main-menu/components/main-menu-bar/main-menu-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbMainMenuBarComponent",
                "coveragePercent": 53,
                "coverageCount": "8/15",
                "status": "good"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/main-menu/components/main-menu-dialog/main-menu-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbMainMenuDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/main-menu/components/main-menu-expanded/header-footer-buttons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbMainMenuHeaderFooterButtonsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/main-menu/components/main-menu-expanded/main-menu-expanded.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbMainMenuExpandedComponent",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/main-menu/models/main-menu-button.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbMainMenuButton",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/main-menu/models/main-menu-data-set.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbMainMenuDataSet",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/main-menu/models/main-menu-data.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbMainMenuData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/autocomplete.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbMatAutocompleteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/autocomplete.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbMatAutocompleteControl",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/button.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbMatButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/button.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbMatButtonControl",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/button.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbMatButtonData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/button.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbMatButtonParams",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/checkbox.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbMatCheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/checkbox.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbMatCheckboxControl",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/datepicker.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbMatDatepickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/datepicker.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbMatDatepickerControl",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/datepicker.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "dateRequiredValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/dropdown.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbMatDropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/dropdown.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbMatDropdownControl",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/dropdown.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbDropdownData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/dropdown.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbMatDropdownParams",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/label.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbMatLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/label.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbMatLabelControl",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/padding.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbMatPaddingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/padding.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbMatPaddingControl",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/radio.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbMatRadioComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/radio.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbMatRadioControl",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/slide-toggle.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbMatSlideToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/slide-toggle.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbMatSlideToggleControl",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/textarea.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbMatTextareaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/textarea.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbMatTextareaControl",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/textarea.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbMatTextareaData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/textarea.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbMatTextareaParams",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/textbox.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbMatTextboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/textbox.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbMatTextboxControl",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/textbox.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbMatTextboxData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/controls/textbox.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbMatTextboxParams",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/intl/datepicker.intl.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbMatDatepickerI18n",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/intl/datepicker.intl.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IbMatDateAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/material-form-control/material-form-control.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbMaterialFormControlComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/material-form-control/material-form-control.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "IbFormControlDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/material-form-test.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/material-form.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ibMatDatepickerTranslate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/material-form.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/material-forms/material-form/material-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbMaterialFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/modal/modal-message.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbModalMessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/modal/modal-message.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbModalMessage",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/modal/modal-message.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IbModalMessageService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/components/table-actions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTableActionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/components/table-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTableButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/components/table-conf/table-conf-load.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTableConfLoadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/components/table-conf/table-conf-save.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTableConfSaveComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/components/table-export.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTableExportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/components/table-export.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTableExportDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/components/table-header-filter-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTableHeaderFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/components/table-header-popup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTableHeaderPopupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/components/table-header/table-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTableHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/components/table-header/table-header.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbTableConfDialogParams",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/components/table-paginator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTablePaginatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/components/table-row.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTableRowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/components/table-total-row/cells/ib-total-row-add-cell/ib-total-row-add-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTotalRowAddCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/components/table-total-row/cells/ib-total-row-avg-cell/ib-total-row-avg-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTotalRowAvgCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/components/table-total-row/cells/ib-total-row-base-cell/ib-total-row-base-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTotalRowBaseCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/components/table-total-row/cells/ib-total-row-default-cell/ib-total-row-default-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTotalRowDefaultCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/components/table-total-row/cells/ib-total-row-default-cell/ib-total-row-default-cell.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "IbTableTotalRowCellDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/components/table-total-row/cells/ib-total-row-default-cell/ib-total-row-default-cell.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TotalRowCell",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/components/table-total-row/cells/ib-total-row-sum-cell/total-row-sum-cell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTotalRowSumCellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/components/table-total-row/table-total-row-apply-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTableTotalRowApplyDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/components/table-total-row/table-total-row.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTableTotalRowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/components/table-total-row/total-row.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TotalRowService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/directives/sticky-area/sticky-area.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IStickyColumnData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/directives/sticky-area/sticky-column.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "IbStickyColumnDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/material-intl/paginator.intl.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbMatPaginatorI18n",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/models/table-item.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbTableItem",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/models/template.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbTemplateModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/models/titles.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbTableAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/models/titles.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbTableComboItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/models/titles.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IbTableTitles",
                "coveragePercent": 6,
                "coverageCount": "1/16",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/models/titles.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ibTableSupportedFilters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/redux/table.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addFilterToTable",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/redux/table.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addPaginatorFiltersToTable",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/redux/table.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addSortToTable",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/redux/table.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetFilters",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/redux/table.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITableFiltersState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/redux/table.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ibTableFiltersReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/redux/table.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INITIAL_TABLE_FILTERS_STATE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/redux/table.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mainTableFiltersReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/services/table-conf.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IbTableConfService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/services/table-conf.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IB_TABLE_ANON_USER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/services/table-conf.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IB_TABLE_STORAGE_NAME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/actions/table.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ibTableActionAddFilterField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/actions/table.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ibTableActionLoadConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/actions/table.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ibTableActionSaveConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/actions/table.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ibTableActionSelectSortingField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/actions/table.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ibTableActionSetConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/actions/table.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ibTableActionSetPaginator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/actions/table.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ibTableActionSetTotalRowCell",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/effects/table.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TableEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/effects/table.effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ANON_USER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/effects/table.effects.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORAGE_NAME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbTableColumnState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbTableConfigState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbTableFilterState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbTablePaginatorState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbTableSortState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbTableState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IbTableTotalRowState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "formatFieldState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ibTableFeatureReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ibTableFeatureInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ibTableFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/reducers/table.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/selectors/table.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ibTableCurrentConfSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/selectors/table.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ibTableSelectFilters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/selectors/table.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ibTableSelectPaginator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/selectors/table.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ibTableSelectSort",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/selectors/table.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ibTableSelectTotalRow",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/store/selectors/table.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTableState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/table-test.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPONENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbTableComponent",
                "coveragePercent": 2,
                "coverageCount": "2/68",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/table.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Navigator",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/table.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "compare",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/table/table.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ibMatPaginatorTranslate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/toast/toast.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IbToastNotification",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/uploader/uploader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IbUploaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/inobeta-ui/ui/uploader/uploader.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}